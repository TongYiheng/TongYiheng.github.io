<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TongYiheng&#39;s Blog</title>
  
  <subtitle>Trust your trust</subtitle>
  <link href="https://tongyiheng.github.io/atom.xml" rel="self"/>
  
  <link href="https://tongyiheng.github.io/"/>
  <updated>2021-04-20T12:58:35.062Z</updated>
  <id>https://tongyiheng.github.io/</id>
  
  <author>
    <name>TongYiheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20210420</title>
    <link href="https://tongyiheng.github.io/2021/04/20/JingYing%20Class/20210420/"/>
    <id>https://tongyiheng.github.io/2021/04/20/JingYing%20Class/20210420/</id>
    <published>2021-04-20T09:10:38.000Z</published>
    <updated>2021-04-20T12:58:35.062Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="29d841a1b02e0db503613199d7c9e1c0780449b31dfd7fc883ff9f0a23755013">1a1d9abe5672c7bc37baaec17a6e5159515451f0571d00edcbb5bd7cff710270b2c80bd894018ec924b79a1de86d11857ac4a9e07dbd2285c83f0ed0d66899db4406c9ae50994fd9b21d01cb77e0ef975b226d982b9bbd2894371398d79e868dbdd325e543a94623b11563032ea908fc26da67a54bc184a31ec3c7ccf88b72d5f2cca2a0bd35915c881a2e968afea75410224fbffcd7f68ad68f38badc91bf5974e73ccb645ed041028b35064659c69ef53bf854167901890bec946b3201fe037b2fe9df7353d6664e73ab2a07ec404534c6467fe088d7ad2b9de5e905757bab060435bebf57a24feac81b67d1b3a7cfda934591fa003f2adbdb667028dafcf1ba29c080cb57f46a74d4018a9258b65790bf91b0e17b0c7959d3cb26c713d3dc4fde976614c2f8eef024909b6a08835d8ceb598df140103f060bdf7fa4a4ea06d51d39190e470cbb6f91841124ab59bf10261a1250d7f95745a2fd9604e5b0e85a8c9c56bbac8947db6354b6da5d778c58e38e2e5d9da80488fe0118179bef283f0c02c13b981aa73a7871d84c2899a12fb579cae1fa39b1698b22ab74d6f63ecd4d365b5140d702fa7cd9133b8f49d18a3c6bf2f4549d2e118ebda78d7698cfe20ba9e47a0d1da1837bf0664acf5f1acfaa3269bbeae8561d0f0d743efc9f0f35a84e4d1538ef38ca35e98ab472a4419c33a939ffc2dddb599f2b3b004052b0cc78fc175c1f9d11e2e97cbe405cfc37a809fafc40cd4f69d0c7a2f746234c1ff632f315939ed49bc86880656efb285f5ed797461d076d5f562f8312c8d8f1b829076923fa3f8ddd142f53e0d4d5cef39eac5e6a840abf9e3be077d5884eefa73280601f12ad81aaafab9f526ff50791cfb22cc70b9e396c8db37baae0c593929aa55eb3d37dac56ece9fad5e7c4d977eb5810776f162f6b5d68741535e40bd543bdde8687ebdbf1701da9ff3b5a44e8e29be0de0efeda3b043e18f4d1a46f828cc1345810c4c9864b77b5042ae1faaf67cde3e943ab7f4042e21de05a7987a6dc354e944e6922bdabd9b680d9534be5bad761da0dbd6fade313025464c239ad538eb9bcd1aeac3740df86d9989ec9d769ebeade844b86d79975be8d1d6a4fe4c2b3425bfabfc9777fde963bc4d6837baa60dba5b16f893e06d7e22fde240f1cdea4234be29d7f9c56c613622212aa2859c4c3c69108089e98a9a3fd7bc0d301ce0b1312f8445c6fbaf32c54d054d5a1d822270188aaa315f46ebd8e8d629efb707e05a978d6cf8cb93e2333032fb810be55db3be223ffcd0c72f852da18145677b702cf53fcfb35f422ed0ce545ab5b3de2b6c21ff95da80528f50a91f76a192c70b85a25c0da23e32650c969ed7c1db2ff15675febed458cf4f6f18e3701c316079700de2ef7ec2cc34af0ed6b40f2f3b5653f5745b875d2db7f3adaca40fe346cbcc7331d6bf08fc848f0d20fbc367b66446bc8590481554ed117a13ba9f8f94f4e250c388bd9e213c84ea66a65681e42ecc4ecf8c03e2a9f3c34d774871648aacc20714c825d2fc75f92563231d84fe6fc5d50b0cc84345c435ad8405c05f859625fe4acd213c76e1f65cb99e77499b42e3dca2045985a3509dae0f351c6fd3e56ecb9dd498920d1f1d2319e6789dd375a0870debbdf13df73456216da8d270ed8041cdf848db6a5cc3a3d85c29750b9af35e0a2762f9bf2bcd7fbff87db8d86a771be5d1638dbb18ed8c18c7f8d78a94fa1c085a7f7c51d529eee359f23e16870eceea361b7fa5aa916601e81e6d13d1548e6d0569e181c06ca932fd4003930829ef1362d52a259a0504702aa57c3ea304d08577b9ffb74b0392ffdbefa1ec041b2359b001722c11614164431cef9486e6d5e01a3edfab14fbd0d1778b59251609e53c1a4bc29357e65a7b5422cd9e82262a5ed1cb82180994f500ec7f0a5e4143ca42905da74c751eb2105c9415adc427c23d2030ff6276e76c5f79daa13746a435b267fc2895361c7ef5f28767a824d6bf95473e194aa6d03375ecc7e93aca5c288924c3b08bc21dd9b1ef2566a6b18e7235f2664af4bb6ce0c94e3747dd9e169f58e9e00382492e50d0a2b98a57a2a9d16e4dc90ebf996de1462ba46de3cc4d3182784a7fab3cbd5975211c043ffa55f375653be365a05b3d61b507b1966e202dca6c82d2b773e6d3f62ea97e8a659f36adedc737509897e903a4807a6b53808614319b75e2fa808861962e17e90991d5939b7facf317ac40d893b2135c7f9093b55c90b7313b2326c39351c4573305e23cc0b6c9ffdb8f6d7456254fec4e2259a07fb2bb27b139bf17db15cd7e1e43a15663d24750d6d5c787008e1155d45e1eb88158de02c1d4046196279a1a012ecd13967e4d7f86a9362f4ca8e0b45879f09d4015e9fcf02967cc5ea751ff6472031b851338eade81903dc3fbdd7a9c4487726954a03d8247424b8bd020a84191d37abb68a48abeebfc463578ee9dc4d13bbcc339d53ef6be978d7bcd09e6496a6959f6a12db3e8ce0300c3be67c1523fc351f91eb00a051dc1a8d532bbb66d561768cbc10a1f8cdef4b50859a628909bcd08d23e089f482b62af897717762aad457108f172673885c5435318653372e3d9158f4beb7cb4096ade997097d0d00aaa39177572571c309fc439b9d743b8f7717798d8580b185b1120d055df3a6835ef01e5e05248db2eff9615d32d431d473cd2e13bf8337707f9083bccb492aaef24b03d0d974ccf7bbd9ed51fa268dad04e613a256aed5450a97030a5f7a87507415d5e79ed4e9311f807d0b3a1acd02669bf77de925f84b17e27cec1b3ff4771a43fdde29102c01a027f83a420d6dae907e4c3172122fdd190fb09d3ba008114ec1e552850fa355b9f1968bdefc252896d6fcda302ee1d78362090e00578eaec6e9a3732b1488fa11ee6942bcc25abaab80a6f2a03ada91630e7b8e9aba77ebba4c8925bc042730ed3eb6721a619eedce259ce0ffc16c1604fb4f1911da763e37dc156a3912ff892ae90c973d5382c24d6027e5ae65ef8d68ae20b100e2debd3083f231fb91daedb73bb229ee833fcc0921ca85f8ae4eacc6ac7dedcfe7f7d1bfee69d80b41920c7101f046ec8d8f15b9952e75c8298fd7b41a8e29999d45de4fdcfacd382f7f366bb33c04daab52a88c2fe6a1269964638813f084d6cb7b5310691c6f7394e010b454bce93d09b087cd8d0afba8649214865ae80e0fd74e26a73f422d94c9da61e7152588b70935324878aab59323b5a5a647aeed8a39f5ba8e5eb7b878cfa1ec5221204fcbf18020340dd8100f96d80b1018a3cdaa4b70d07407807cec3e21c9cc995cd28f31ba5a4ae926ff95c7f72c41f248185b5bdb7a82d645a81fad89a30636dad9bb1550a96b5a95f187d7e3dffa4780838b83cd10315ed118bef586e7cc57f6e6117d57aa6710ad6c542d528e7f13fe0203ce2dcbc5cbbe75fa6fea58fd289f4de2d2db2e42181f7b935e5c79c27cc8870db7327226e37a578137a0b245e7c0eb314533093538bb1fab64de08af28320fe4ae4e7c2274265a22c3a9d0ebad87d30b0a5e7fc8e80a9246b7f71a0acdeb0407ab51d4cab6ccfc198b98a3b829298393</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">输入密码，查看文章</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Record the 2nd lunch meeting.</summary>
    
    
    
    <category term="Recording" scheme="https://tongyiheng.github.io/categories/Recording/"/>
    
    
  </entry>
  
  <entry>
    <title>20210414</title>
    <link href="https://tongyiheng.github.io/2021/04/20/JingYing%20Class/20210414/"/>
    <id>https://tongyiheng.github.io/2021/04/20/JingYing%20Class/20210414/</id>
    <published>2021-04-20T08:40:46.000Z</published>
    <updated>2021-04-20T12:58:20.569Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="abf970dcf018b89457fa50c630c1d1af3e1d610d47086defe093a6a89179c3dd">1a1d9abe5672c7bc37baaec17a6e5159515451f0571d00edcbb5bd7cff710270a8fba6795f0fa45552155e3314c529b9d9f346565a011a7fda1dc6de7518da9f7caf1f3e63078a0c114f090d2703dcb15788f1c264bb84bb08f5b7bae390cd58f7b44055b873336235dd3f9a2444bc2eb32f32921bba48fa1fd6dc2777d2d915c5c3bc728c398af5154c9d41cc215382ba1f557be2f4c7d8dd5c34ce0642c5910d9aa63e4a501d50d2e53f393a9d429aa4a3350b644fd7640f3a4be42a010e7c31b53d32bfb7fa1a5e354c17ba94ef8b4e7ef946b1071bf3af6f4229b02b67f32e578686cdfe08985b6435f72f4fd138a449a3dd913a1905350e8a4cd8f0244448bad5f5f971be8f55b1ff28a85052f5aa9d36387e5eb911527c25a353ccd936694639aef8ab448df773f42bbae212b4c5d28d79d95d54432f8255f26e353583c09c552a7b32c84c781ea1f30a7716dd0ccc88c99e775f077f500508f94f8e28162e0c9de555cfd08d5d230c575f992729e9678f23682fc04c3a36c65c42a7473861339556ee54233c1dbc95ca378f4e3451b0e1c770e968f3f4a1d03ab2d5094736c7af1c18f76fb215e57b24916276ba0c8e1eddc653f90318213d282913e5a90c0ad5dd604309deca1546e5db77b58475d071a9f329355e83c643f169a4d7fe9e409138664c48cb923ad133ad45b288bb88c10c42a8422d586b6857682588ebad6c7acbd1758b25a8564271520dbd2a4dcee9b983863dde7a199289a604ef031be3d588e8f49c1720c3b6520c8cadedb3d6574ab740699bd27a399aca1e4075513a721e5fce41dba5bb1ae80e945e064cf95871851009a95767e686a1dc21c1d5151594026cdf83e0bae0f29f5c17704901a4ddbd36ed177fecaf307ad28661f254849d54116c9800db95db784bba8de4514de792c69cc87e997c2e7a2478685815301e2a878efd0248dd0598669c0e8cebf6a273fd398a9fa5056634e606730f408cc8d71358f7ca1df75b2d00f06163c3b626d64cd5409e6749cdf31c6734db78782cff5ca9750b411ddc9a6b78edba9ff77c210a3e701f487aa0d21c518bc68ee19a6e165d4a694ddfea29278828a6355a6abcfcdbde108fedd65d2528</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">输入密码，查看文章</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Record the 1st lunch meeting.</summary>
    
    
    
    <category term="Recording" scheme="https://tongyiheng.github.io/categories/Recording/"/>
    
    
  </entry>
  
  <entry>
    <title>程序设计思维与实践：Week3</title>
    <link href="https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-3/"/>
    <id>https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-3/</id>
    <published>2021-03-21T13:14:46.000Z</published>
    <updated>2021-04-09T16:15:23.913Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Week3作业和CSP模测（一）</p><span id="more"></span><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="A：游戏"><a href="#A：游戏" class="headerlink" title="A：游戏"></a>A：游戏</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>有n个小朋友围成一圈玩游戏，小朋友从1至n编号，2号小朋友坐在1号小朋友的顺时针方向，3号小朋友坐在2号小朋友的顺时针方向，……，1号小朋友坐在n号小朋友的顺时针方向。<br>　　游戏开始，从1号小朋友开始顺时针报数，接下来每个小朋友的报数是上一个小朋友报的数加1。若一个小朋友报的数为k的倍数或其末位数（即数的个位）为k，则该小朋友被淘汰出局，不再参加以后的报数。当游戏中只剩下一个小朋友时，该小朋友获胜。<br>　　例如，当n=5, k=2时：<br>　　1号小朋友报数1；<br>　　2号小朋友报数2淘汰；<br>　　3号小朋友报数3；<br>　　4号小朋友报数4淘汰；<br>　　5号小朋友报数5；<br>　　1号小朋友报数6淘汰；<br>　　3号小朋友报数7；<br>　　5号小朋友报数8淘汰；<br>　　3号小朋友获胜。</p><p>给定n和k，请问最后获胜的小朋友编号为多少？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行，包括两个整数n和k，意义如题目所述。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含一个整数，表示获胜的小朋友编号。</p><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h4><p>对于所有评测用例，1≤n≤1000，1≤k≤9。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>()&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">if</span>(num%k==<span class="number">0</span> || num%<span class="number">10</span>==k)</span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(q.<span class="built_in">front</span>());</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,q.<span class="built_in">front</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B：跳一跳"><a href="#B：跳一跳" class="headerlink" title="B：跳一跳"></a>B：跳一跳</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。<br>　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。<br>　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。<br>　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，为本局游戏的得分（在本题的规则下）。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span></span><br></pre></td></tr></table></figure><h4 id="数据规模和约定-1"><a href="#数据规模和约定-1" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h4><p>对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,sum=<span class="number">0</span>,last=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) &amp;&amp; x!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)    <span class="comment">//first jump</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>)    &#123;sum+=<span class="number">1</span>; last=<span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span>    &#123;sum+=<span class="number">2</span>; last=<span class="number">2</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum+=<span class="number">1</span>;</span><br><span class="line">                last=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(last==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=<span class="number">2</span>;</span><br><span class="line">                    last=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum+=last+<span class="number">2</span>;</span><br><span class="line">                    last+=<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C：奇怪的电梯"><a href="#C：奇怪的电梯" class="headerlink" title="C：奇怪的电梯"></a>C：奇怪的电梯</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/1.png" alt="1"></p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/2.png" alt="2"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k[<span class="number">210</span>],vis[<span class="number">210</span>],cnt[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,A,B;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N) &amp;&amp; N!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;A,&amp;B);</span><br><span class="line">        <span class="built_in">memset</span>(k,<span class="number">0</span>,<span class="number">210</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="number">210</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="number">210</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k[i]);</span><br><span class="line">            </span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(A);</span><br><span class="line">        vis[A]=<span class="number">1</span>;</span><br><span class="line">        cnt[A]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=q.<span class="built_in">front</span>();</span><br><span class="line">            <span class="keyword">if</span>(r==B)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt[r]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                    </span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">int</span> up=r+k[r];</span><br><span class="line">            <span class="keyword">int</span> down=r-k[r];</span><br><span class="line">            <span class="keyword">if</span>(up&lt;=N &amp;&amp; vis[up]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(up);</span><br><span class="line">                vis[up]=<span class="number">1</span>;</span><br><span class="line">                cnt[up]=cnt[r]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(down&gt;=<span class="number">1</span> &amp;&amp; vis[down]==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(down);</span><br><span class="line">                vis[down]=<span class="number">1</span>;</span><br><span class="line">                cnt[down]=cnt[r]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q.<span class="built_in">empty</span>())</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D：选数"><a href="#D：选数" class="headerlink" title="D：选数"></a>D：选数</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/3.png" alt="3"></p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">12</span> <span class="number">19</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="数据规模和约定-2"><a href="#数据规模和约定-2" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h4><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/4.png" alt="4"></p><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>素数的判定方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>（n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">   <span class="keyword">if</span> (n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">21</span>];</span><br><span class="line"><span class="keyword">int</span> n,k,cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> sum,<span class="keyword">int</span> kk,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(kk==k &amp;&amp; <span class="built_in">prime</span>(sum))</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(sum,kk,x+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs</span>(sum+a[x],kk+<span class="number">1</span>,x+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E：棋盘问题"><a href="#E：棋盘问题" class="headerlink" title="E：棋盘问题"></a>E：棋盘问题</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>小H收集到一些形状特殊的棋盘，她想在棋盘上面摆放棋子（棋子都是相同的）。她希望摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，你能帮她求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案数C嘛？</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入含有多组测试数据。<br>每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n * n的矩阵内描述棋盘，以及摆放棋子的数目。<br>当为-1 -1时表示输入结束。<br>随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。<br>注意只有#棋盘区域可以摆放棋子。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一组数据，给出一行输出，输出摆放的方案数目C（数据保证C&lt;2^31）。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line">#.</span><br><span class="line">.#</span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line">...#</span><br><span class="line">..#.</span><br><span class="line">.#..</span><br><span class="line">#...</span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="数据规模和约定-3"><a href="#数据规模和约定-3" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h4><p>1&lt;=k&lt;=n&lt;=8</p><h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, n, k, kk;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (kk == k)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= n)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i] &amp;&amp; a[i][x] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i] = <span class="number">1</span>;</span><br><span class="line">            kk++;</span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line">            vis[i] = <span class="number">0</span>;</span><br><span class="line">            kk--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k) &amp;&amp; n != <span class="number">-1</span> &amp;&amp; k != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        kk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="string">&#x27;\0&#x27;</span>, <span class="number">100</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="number">10</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a[i]);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSP模测（一）"><a href="#CSP模测（一）" class="headerlink" title="CSP模测（一）"></a>CSP模测（一）</h2><h3 id="A：R-G-B"><a href="#A：R-G-B" class="headerlink" title="A：R!!G!!B!!"></a>A：R!!G!!B!!</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>msy 的显示器被 yhf 借走了，于是 msy 需要一个新的显示器。他买来了许多 LED 小灯，每个小灯只能发出红、绿、蓝三种颜色光的其中一种。msy 需要三个不同颜色的小灯来拼成一个像素（像素之间并不能共用小灯），但是他并不知道每种颜色的小灯具体有多少个，只知道每个小灯的颜色。msy 想知道他用手头上的小灯可以拼出多少个像素，但是一个个数太麻烦了，他希望你来用程序解决这个问题。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入一个数 nn，表示所有小灯的数量。<br>第二行输入一个长度为 nn 的字符串，表示每个小灯的颜色。颜色使用R、G、B三种字母表示。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示 msy 可以拼出的像素的个数。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line">RGBRGBRG</span><br></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>1≤n≤10^5</p><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="keyword">int</span> R=<span class="number">0</span>,G=<span class="number">0</span>,B=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;R&#x27;</span>)</span><br><span class="line">            R++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i]==<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">            G++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            B++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(<span class="built_in">min</span>(R,G),B));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B：密码强弱度"><a href="#B：密码强弱度" class="headerlink" title="B：密码强弱度"></a>B：密码强弱度</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>在很多的交互式网站中，都需要通过使用用户名与密码进行登录，为了正确的评估一个密码的强弱，机智的 lzh 想出了一个评价方案。<br>这里研究的密码只有数字与大小写字母组成。具体的评价方案如下：<br>如果一个密码的长度小于 66，则这个密码的强度为 00。<br>对于长度大于等于 66 的密码，根据字符的种类（字符分为三类：数字，小写字母，大写字母），将连续的同种类的密码划分为一段，其段数即为密码的强弱程度。例如，密码 asd123As2d 可以分为 asd、123、A、s、2、d 6段，所以这个密码的强度为6。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行一个字符串s，1≤∣s∣≤10^6，表示密码。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行一个整数，表示密码的强弱程度。</p><h4 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h4><h5 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>VIpuVNOv8</span><br></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; a&lt;=<span class="string">&#x27;z&#x27;</span> &amp;&amp; b&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; b&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; a&lt;=<span class="string">&#x27;Z&#x27;</span> &amp;&amp; b&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; b&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">if</span>(a&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; a&lt;=<span class="string">&#x27;9&#x27;</span> &amp;&amp; b&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; b&lt;=<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">size</span>()&lt;<span class="number">6</span>)</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">f</span>(s[i],s[i+<span class="number">1</span>]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C：拉面馆"><a href="#C：拉面馆" class="headerlink" title="C：拉面馆"></a>C：拉面馆</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/5.png" alt="5"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-3/6.png" alt="6"></p><h4 id="Case-1-1"><a href="#Case-1-1" class="headerlink" title="Case 1"></a>Case 1</h4><h5 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><h4 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h4><h5 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">43</span> <span class="number">45</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">51</span> <span class="number">63</span> <span class="number">66</span> <span class="number">69</span> <span class="number">73</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line">Angry</span><br><span class="line">Angry</span><br><span class="line">Angry</span><br></pre></td></tr></table></figure><h4 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h4><h5 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span> <span class="number">14</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">12</span> <span class="number">15</span> <span class="number">23</span> <span class="number">26</span> <span class="number">28</span> <span class="number">30</span> <span class="number">33</span> <span class="number">34</span> <span class="number">37</span> <span class="number">41</span> <span class="number">43</span> <span class="number">45</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">59</span> <span class="number">61</span> <span class="number">62</span> <span class="number">63</span> <span class="number">66</span> <span class="number">72</span> <span class="number">80</span> <span class="number">83</span> <span class="number">88</span> <span class="number">91</span> <span class="number">92</span> <span class="number">95</span> <span class="number">96</span> <span class="number">99</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">33</span></span><br><span class="line"><span class="number">31</span></span><br><span class="line">Angry</span><br><span class="line"><span class="number">53</span></span><br><span class="line"><span class="number">73</span></span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line">Angry</span><br><span class="line"><span class="number">73</span></span><br><span class="line"><span class="number">71</span></span><br></pre></td></tr></table></figure><h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><h5 id="Score-30"><a href="#Score-30" class="headerlink" title="Score:30"></a>Score:30</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> inc[<span class="number">200010</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">200010</span>];</span><br><span class="line"><span class="keyword">int</span> lov[<span class="number">200010</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> choose[<span class="number">200010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">eat</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=n;</span><br><span class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(inc[i][<span class="number">0</span>]&gt;=lov[a][<span class="number">0</span>] &amp;&amp; choose[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;=k;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(lov[a][j]==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(inc[i][j]==<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                         <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;k)</span><br><span class="line">            &#123;</span><br><span class="line">                choose[i]=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,s[a]-t[i]);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen(&quot;a.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;a.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    <span class="built_in">memset</span>(choose,<span class="number">1</span>,<span class="number">200010</span>*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;inc[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=inc[i][<span class="number">0</span>];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            inc[i][temp]=<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        printf(&quot;第%d碗面的配料有: &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=k;j++)</span></span><br><span class="line"><span class="comment">            if(inc[i][j]==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%d &quot;,j);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lov[i][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lov[i][<span class="number">0</span>];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line">            lov[i][temp]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        printf(&quot;第%d个人like的配料有: &quot;,i);</span></span><br><span class="line"><span class="comment">        for(int j=1;j&lt;=k;j++)</span></span><br><span class="line"><span class="comment">            if(lov[i][j]==1)</span></span><br><span class="line"><span class="comment">                printf(&quot;%d &quot;,j);</span></span><br><span class="line"><span class="comment">        printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">eat</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Angry\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Score-100"><a href="#Score-100" class="headerlink" title="Score:100"></a>Score:100</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t[<span class="number">200010</span>], s[<span class="number">200010</span>];</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; sp[<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> kk, v = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;kk);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= kk; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            v |= (<span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> ((v &amp; j) == j)</span><br><span class="line">                sp[j].<span class="built_in">emplace</span>(t[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> kk, v = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;kk);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= kk; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            v |= (<span class="number">1</span> &lt;&lt; (x - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sp[v].<span class="built_in">empty</span>())</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Angry\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> tt = *sp[v].<span class="built_in">rbegin</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[i] - tt);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">8</span>; j++) &#123;</span><br><span class="line">                sp[j].<span class="built_in">erase</span>(tt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Week3作业和CSP模测（一）&lt;/p&gt;</summary>
    
    
    
    <category term="Programming Thinking and Practice" scheme="https://tongyiheng.github.io/categories/Programming-Thinking-and-Practice/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="BFS" scheme="https://tongyiheng.github.io/tags/BFS/"/>
    
    <category term="DFS" scheme="https://tongyiheng.github.io/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>程序设计思维与实践：Week2</title>
    <link href="https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-2/"/>
    <id>https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-2/</id>
    <published>2021-03-21T13:14:37.000Z</published>
    <updated>2021-04-09T16:15:21.184Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Week2作业</p><span id="more"></span><h3 id="A：相邻数对"><a href="#A：相邻数对" class="headerlink" title="A：相邻数对"></a>A：相邻数对</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数n，表示给定整数的个数。<br>第二行包含所给定的n个整数。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示值正好相差1的数对的个数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h4><p>值正好相差11的数对包括 (2, 3), (6, 7), (7, 8)。</p><h4 id="评测用例规模与约定"><a href="#评测用例规模与约定" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>1≤n≤1000，给定的整数为不超过 1000010000 的非负整数。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>,temp;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">x</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        x.<span class="built_in">push_back</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it=x.<span class="built_in">begin</span>();it!=x.<span class="built_in">end</span>();it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> ib=it+<span class="number">1</span>;ib!=x.<span class="built_in">end</span>();ib++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((*ib)-(*it)==<span class="number">1</span> || (*ib)-(*it)==<span class="number">-1</span>)</span><br><span class="line">                cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B：门禁系统"><a href="#B：门禁系统" class="headerlink" title="B：门禁系统"></a>B：门禁系统</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数n，表示涛涛的记录条数。<br>第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="评测用例规模与约定-1"><a href="#评测用例规模与约定-1" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p>1≤n≤1000，读者的编号为不超过n的正整数。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,temp;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;temp;</span><br><span class="line">        x[temp]++;</span><br><span class="line">        cout&lt;&lt;x[temp]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C：桶装数字"><a href="#C：桶装数字" class="headerlink" title="C：桶装数字"></a>C：桶装数字</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>yhf有n个桶，每个桶里都装着一些数字（一个或多个），所有的数字总共有m个。这天，lzh把yhf所有的桶全打翻了，数字洒了一地！所幸，每个数字都有它所在的桶的标记。yhf希望恢复所有的桶，但是他还要刷考研题目，于是他拜托你来完成这个任务。<br>由于yhf能在一秒内完成一套考研数学题，因此他希望你的程序能在一秒内得出结果。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行输入两个整数n,m，第二行到第m+1行，每行两个整数x,t，分别表示这个数字和它所在的桶。<br>保证每个桶至少含有一个数字。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出n行，若第i个桶含有k_i个数字，则第i行输出k_i个整数，表示这个桶内的数字。<strong>注意：输出每个桶的数字时应按升序排序输出。</strong></p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="评测用例规模与约定-2"><a href="#评测用例规模与约定-2" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-2/1.png" alt="1"></p><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,a,b;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">x</span>(n+<span class="number">1</span>,vector&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        x[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">sort</span>(x[i].<span class="built_in">begin</span>(),x[i].<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> k:x[i])</span><br><span class="line">            cout&lt;&lt;k&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D：笔记本"><a href="#D：笔记本" class="headerlink" title="D：笔记本"></a>D：笔记本</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>为了复习考研英语，yhf开始背单词。<br>yhf有一个笔记本，一开始是空的。当yhf遇到一个不认识的单词时，他会先查找笔记本，如果笔记本上没有，他就会先在互联网上查找这个单词，然后记在笔记本上。当yhf认为他已经熟记一个单词时，他会将这个单词在笔记本上擦掉（如果笔记本上没有就不用擦了）。yhf有时也会关心他的笔记本上记了多少单词，他会将笔记本上的单词按照字典序升序读一遍。<br>这天，yhf发现他的笔记本已经记满了单词，他决定用程序来实现笔记本的功能。但考虑到编写程序消耗的时间可以多背几千个单词，他决定把这个任务交给你。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行包含一个整数m，接下来有m行，每一行有一个整数op，表示你的程序应执行哪种操作,具体如下：</p><ul><li>op=1，后接一个单词，表示查找这个单词；如果笔记本中没有这个单词，则将单词写进笔记本。</li><li>op=2，后接一个单词，表示删除这个单词；如果笔记本中没有这个单词，则无需进行操作。</li><li>op=3，表示按字典序通读整个笔记本。</li></ul><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出m行，每一行表示输入的操作对应的输出，具体如下：</p><ul><li>op=1，如果笔记本中有这个单词，输出found，否则输出write。</li><li>op=2，如果笔记本中有这个单词，输出erased，否则输出not found。</li><li>op=3，在一行内按字典序升序输出所有单词，中间用空格隔开。</li></ul><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span> problem</span><br><span class="line"><span class="number">1</span> problem</span><br><span class="line"><span class="number">2</span> problem</span><br><span class="line"><span class="number">1</span> problem</span><br><span class="line"><span class="number">2</span> acm</span><br><span class="line"><span class="number">1</span> pro</span><br><span class="line"><span class="number">1</span> acm</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">write</span><br><span class="line">found</span><br><span class="line">erased</span><br><span class="line">write</span><br><span class="line"><span class="keyword">not</span> found</span><br><span class="line">write</span><br><span class="line">write</span><br><span class="line">acm pro problem</span><br></pre></td></tr></table></figure><h4 id="评测用例规模与约定-3"><a href="#评测用例规模与约定-3" class="headerlink" title="评测用例规模与约定"></a>评测用例规模与约定</h4><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-2/2.png" alt="2"></p><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,op;</span><br><span class="line">    string s;</span><br><span class="line">    map&lt;string,<span class="keyword">bool</span>&gt; note;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            <span class="keyword">auto</span> it=note.<span class="built_in">find</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(it!=note.<span class="built_in">end</span>())</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;found&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                note.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(s,<span class="literal">true</span>));</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;write&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            <span class="keyword">auto</span> it=note.<span class="built_in">find</span>(s);</span><br><span class="line">            <span class="keyword">if</span>(it!=note.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                note.<span class="built_in">erase</span>(it);</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;erased&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;not found&quot;</span>&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:note)</span><br><span class="line">                cout&lt;&lt;x.first&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Week2作业&lt;/p&gt;</summary>
    
    
    
    <category term="Programming Thinking and Practice" scheme="https://tongyiheng.github.io/categories/Programming-Thinking-and-Practice/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="STL" scheme="https://tongyiheng.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>程序设计思维与实践：Week1</title>
    <link href="https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-1/"/>
    <id>https://tongyiheng.github.io/2021/03/21/Programming%20Thinking%20and%20Practice/week-1/</id>
    <published>2021-03-21T13:14:30.000Z</published>
    <updated>2021-04-09T16:15:26.194Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Week1作业和实验</p><span id="more"></span><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><h3 id="A：打酱油"><a href="#A：打酱油" class="headerlink" title="A：打酱油"></a>A：打酱油</h3><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>小明带着N元钱去买酱油。酱油10块钱一瓶，商家进行促销，每买3瓶送1瓶，或者每买5瓶送2瓶。请问小明最多可以得到多少瓶酱油。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数N，表示小明可用于买酱油的钱数。N是10的整数倍，N不超过300。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示小明最多可以得到多少瓶酱油。</p><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h5 id="样例说明"><a href="#样例说明" class="headerlink" title="样例说明"></a>样例说明</h5><p>把40元分成30元和10元，分别买3瓶和1瓶，其中3瓶送1瓶，共得到5瓶。</p><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure><h5 id="样例说明-1"><a href="#样例说明-1" class="headerlink" title="样例说明"></a>样例说明</h5><p>把80元分成30元和50元，分别买3瓶和5瓶，其中3瓶送1瓶，5瓶送2瓶，共得到11瓶。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">50</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt+=<span class="number">7</span>;</span><br><span class="line">        n-=<span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">30</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt+=<span class="number">4</span>;</span><br><span class="line">        n-=<span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        n-=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B：最小差值"><a href="#B：最小差值" class="headerlink" title="B：最小差值"></a>B：最小差值</h3><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定n个数，请找出其中相差（差的绝对值）最小的两个数，输出它们的差值的绝对值。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行包含一个整数n。<br>第二行包含n个正整数，相邻整数之间使用一个空格分隔。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示答案。</p><h4 id="样例1-1"><a href="#样例1-1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">4</span> <span class="number">8</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="样例说明-2"><a href="#样例说明-2" class="headerlink" title="样例说明"></a>样例说明</h5><p>相差最小的两个数是5和4，它们之间的差值是1。</p><h4 id="样例2-1"><a href="#样例2-1" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="样例说明-3"><a href="#样例说明-3" class="headerlink" title="样例说明"></a>样例说明</h5><p>有两个相同的数3，它们之间的差值是0。</p><h4 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h4><p>对于所有评测用例，2 ≤ n ≤ 1000，每个给定的整数都是不超过10000的正整数。</p><h4 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1000</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,min;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    min=<span class="built_in">fabs</span>(num[<span class="number">0</span>]-num[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">fabs</span>(num[i]-num[j])&lt;<span class="built_in">fabs</span>(min))</span><br><span class="line">                min=<span class="built_in">fabs</span>(num[i]-num[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,min);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="A：签到题【请在实验开始5分钟内完成签到】"><a href="#A：签到题【请在实验开始5分钟内完成签到】" class="headerlink" title="A：签到题【请在实验开始5分钟内完成签到】"></a>A：签到题【请在实验开始5分钟内完成签到】</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>请在比赛开始 5分钟 以内提交以下代码进行签到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="built_in">puts</span>(<span class="string">&quot;qiandao&quot;</span>);&#125;</span><br></pre></td></tr></table></figure><h3 id="B：IO1"><a href="#B：IO1" class="headerlink" title="B：IO1"></a>B：IO1</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>计算a+b。</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>输入第一行是一个整数N，代表接下来N行会有N组样例输入。</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>每组输出占一行。</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="C：IO2"><a href="#C：IO2" class="headerlink" title="C：IO2"></a>C：IO2</h3><h4 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h4><p>计算a+b。</p><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>有多组样例输入，以0 0代表输入结束。</p><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>每组输出占一行。</p><h4 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b) &amp;&amp; a!=<span class="number">0</span> &amp;&amp; b!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D：IO3"><a href="#D：IO3" class="headerlink" title="D：IO3"></a>D：IO3</h3><h4 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h4><p>计算a+b。</p><h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><p>有多组样例输入。</p><h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><p>每组输出占一行。</p><h4 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="E：IO4"><a href="#E：IO4" class="headerlink" title="E：IO4"></a>E：IO4</h3><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><p>你的任务是计算一些整数的和。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组样例。<br>每组样例包含一个整数N，然后在同行有N个整数。<br>若N = 0，则表示输入结束，这个样例不需要被处理。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组用例，你应当输出这组样例N个数字的和，每个输出占一行。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> </span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n) &amp;&amp; n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F：IO5"><a href="#F：IO5" class="headerlink" title="F：IO5"></a>F：IO5</h3><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><p>请计算下面每行数的和。</p><h4 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有一个整数N，表示有N行数。接下来N行，每行第一个为整数M，表示本行后面有M个整数。</p><h4 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于输入的每一行数，请分别对应输出每一行数的和。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h4><p>本题相关知识：输入输出和循环语句（for）的使用方式。</p><h4 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m,x,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G：IO6"><a href="#G：IO6" class="headerlink" title="G：IO6"></a>G：IO6</h3><h4 id="问题描述-4"><a href="#问题描述-4" class="headerlink" title="问题描述"></a>问题描述</h4><p>请计算下面每行数的和。</p><h4 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组数据，每组数据占一行。每行第一个数为整数N，后面有N个整数。</p><h4 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于输入的每一行数，请分别对应输出每一行数的和。</p><h4 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="Hint-1"><a href="#Hint-1" class="headerlink" title="Hint"></a>Hint</h4><p>本题相关知识：输入输出和循环语句（while）的使用方式。</p><h4 id="Code-7"><a href="#Code-7" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">            sum+=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H：IO7"><a href="#H：IO7" class="headerlink" title="H：IO7"></a>H：IO7</h3><h4 id="问题描述-5"><a href="#问题描述-5" class="headerlink" title="问题描述"></a>问题描述</h4><p>请计算下面每行数的和。</p><h4 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含多组数据，每组数据占一行。每行有若干个整数。</p><h4 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于输入的每一行数，请分别对应输出每一行数的和。</p><h4 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure><h4 id="Hint-2"><a href="#Hint-2" class="headerlink" title="Hint"></a>Hint</h4><p>本题相关知识：读取一行的处理和格式化读取字符串，也可使用getline和stringstream。</p><h4 id="Code-8"><a href="#Code-8" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">istringstream <span class="title">is</span><span class="params">(a)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">while</span>(is&gt;&gt;x)</span><br><span class="line">            sum+=x;</span><br><span class="line">        cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I：IO8"><a href="#I：IO8" class="headerlink" title="I：IO8"></a>I：IO8</h3><h4 id="问题描述-6"><a href="#问题描述-6" class="headerlink" title="问题描述"></a>问题描述</h4><p>给定两个十六进制整数a和b，输出他们的和。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入多组数据，以EOF作为数据的结束。<br>每组数据在一行中包含了两个十六进制整数a和b。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每一组数据，以十进制输出a+b的和。<br>每组输出占用一行。</p><h4 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">9</span></span><br><span class="line">A B</span><br><span class="line">a b</span><br></pre></td></tr></table></figure><h4 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">21</span></span><br></pre></td></tr></table></figure><h4 id="Code-9"><a href="#Code-9" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%x%x&quot;</span>,&amp;a,&amp;b))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a+b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="J：Discount"><a href="#J：Discount" class="headerlink" title="J：Discount"></a>J：Discount</h3><h4 id="问题描述-7"><a href="#问题描述-7" class="headerlink" title="问题描述"></a>问题描述</h4><p>给出商品的原价和现价，求该商品的优惠力度。</p><h4 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入两个数 A,B(1≤B&lt;A≤10^5)，分别表示原价和现价。</p><h4 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个实数，表示降价的百分比，保留三位小数输出。</p><h4 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28.571</span></span><br></pre></td></tr></table></figure><h4 id="Code-10"><a href="#Code-10" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    x=<span class="number">100.0</span>*(a-b)/a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3f\n&quot;</span>,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="K：Slot"><a href="#K：Slot" class="headerlink" title="K：Slot"></a>K：Slot</h3><h4 id="问题描述-8"><a href="#问题描述-8" class="headerlink" title="问题描述"></a>问题描述</h4><p>给出一个长度为3的字符串，所有字母均为大写英文字母，请判断该字符串是否由同一个字母构成。</p><h4 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行表示字符串。</p><h4 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h4><p>若该字符串是否由同一个字母构成，输出Won，否则输出Lost。</p><h4 id="样例输入1"><a href="#样例输入1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TTT</span><br></pre></td></tr></table></figure><h4 id="样例输出1"><a href="#样例输出1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Won</span><br></pre></td></tr></table></figure><h4 id="样例输入2"><a href="#样例输入2" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SYS</span><br></pre></td></tr></table></figure><h4 id="样例输出2"><a href="#样例输出2" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lost</span><br></pre></td></tr></table></figure><h4 id="Code-11"><a href="#Code-11" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==str[<span class="number">1</span>] &amp;&amp; str[<span class="number">1</span>]==str[<span class="number">2</span>])</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Won\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Lost\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="L：Orthogonality"><a href="#L：Orthogonality" class="headerlink" title="L：Orthogonality"></a>L：Orthogonality</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-1/1.png" alt="1"></p><h4 id="样例输入1-1"><a href="#样例输入1-1" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">-5</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例输出1-1"><a href="#样例输出1-1" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="样例输入2-1"><a href="#样例输入2-1" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例输出2-1"><a href="#样例输出2-1" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="Code-12"><a href="#Code-12" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100000</span>],b[<span class="number">100000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res+=a[i]*b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(res==<span class="number">0</span>)  <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span>    <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="M：uNrEaDaBlE-sTrInG"><a href="#M：uNrEaDaBlE-sTrInG" class="headerlink" title="M：uNrEaDaBlE sTrInG"></a>M：uNrEaDaBlE sTrInG</h3><h4 id="问题描述-9"><a href="#问题描述-9" class="headerlink" title="问题描述"></a>问题描述</h4><p>我们称一个字符串是“难读的”，当且仅当它的奇数位置的字母都是小写字母，偶数位置的字母都是大写字母。请你判断一个字符串是否为“难读的”字符串。</p><h4 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行包含一个字符串。</p><h4 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h4><p>如果输入的字符串是“难读的”，输出Yes，否则输出No。</p><h4 id="样例输入1-2"><a href="#样例输入1-2" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tImElImItExCeEdEd</span><br></pre></td></tr></table></figure><h4 id="样例输出1-2"><a href="#样例输出1-2" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="样例输入2-2"><a href="#样例输入2-2" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AccePt</span><br></pre></td></tr></table></figure><h4 id="样例输出2-2"><a href="#样例输出2-2" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="Code-13"><a href="#Code-13" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.<span class="built_in">at</span>(i)&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; str.<span class="built_in">at</span>(i)&lt;=<span class="string">&#x27;z&#x27;</span>)    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>    &#123;<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.<span class="built_in">at</span>(i)&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; str.<span class="built_in">at</span>(i)&lt;=<span class="string">&#x27;Z&#x27;</span>)    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>    &#123;<span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="N：Remove-It"><a href="#N：Remove-It" class="headerlink" title="N：Remove It"></a>N：Remove It</h3><h4 id="问题描述-10"><a href="#问题描述-10" class="headerlink" title="问题描述"></a>问题描述</h4><p>给出一个长度为n的数列和一个数x，请从数列中删除数值等于x的项，输出剩余的数列。</p><h4 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行包含两个整数n,x，第二行包含n个整数，表示数列。</p><h4 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，表示删除后的数列。输出数字的相对顺序应与原数列相同。</p><h4 id="样例输入1-3"><a href="#样例输入1-3" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="样例输出1-3"><a href="#样例输出1-3" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输入2-3"><a href="#样例输入2-3" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h4 id="样例输出2-3"><a href="#样例输出2-3" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Code-14"><a href="#Code-14" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        <span class="keyword">if</span>(a!=x)    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a);</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="O：Rally"><a href="#O：Rally" class="headerlink" title="O：Rally"></a>O：Rally</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-1/2.png" alt="2"></p><h4 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">37</span></span><br></pre></td></tr></table></figure><h4 id="Code-15"><a href="#Code-15" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;pos[i]);</span><br><span class="line">    </span><br><span class="line">    a=pos[<span class="number">0</span>];</span><br><span class="line">    b=pos[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[i]&lt;a)    a=pos[i];</span><br><span class="line">        <span class="keyword">if</span>(pos[i]&gt;b)    b=pos[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        res+=(pos[j]-a)*(pos[j]-a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a+<span class="number">1</span>;i&lt;=b;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cur+=(pos[j]-i)*(pos[j]-i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cur&lt;res)</span><br><span class="line">            res=cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P：：-Colon"><a href="#P：：-Colon" class="headerlink" title="P：：(Colon)"></a>P：：(Colon)</h3><h4 id="问题描述-11"><a href="#问题描述-11" class="headerlink" title="问题描述"></a>问题描述</h4><p>钟表的时针和分针长度分别为a,b，当前的时间为H时M分，求时针端点与分针端点的距离。</p><h4 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一行包含4个整数a,b,H,M。</p><h4 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个实数，表示端点之间的距离。你的输出与实际值的误差应小于10^(-9)。</p><h4 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">10</span> <span class="number">40</span></span><br></pre></td></tr></table></figure><h4 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.56425719433005567605</span></span><br></pre></td></tr></table></figure><h4 id="Code-16"><a href="#Code-16" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926535</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,H,M;</span><br><span class="line">    <span class="keyword">double</span> j,x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;H,&amp;M);</span><br><span class="line"></span><br><span class="line">    j=<span class="built_in">fabs</span>(H*<span class="number">30</span>+M*<span class="number">0.5</span>-M*<span class="number">6</span>);</span><br><span class="line">    x=<span class="built_in">sqrt</span>(a*a+b*b<span class="number">-2</span>*a*b*<span class="built_in">cos</span>(j*pi/<span class="number">180</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9f\n&quot;</span>,x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q：Kaprekar-Number"><a href="#Q：Kaprekar-Number" class="headerlink" title="Q：Kaprekar Number"></a>Q：Kaprekar Number</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Programming%20Thinking%20and%20Practice/week-1/3.png" alt="3"></p><h4 id="样例输入1-4"><a href="#样例输入1-4" class="headerlink" title="样例输入1"></a>样例输入1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1024</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="样例输出1-4"><a href="#样例输出1-4" class="headerlink" title="样例输出1"></a>样例输出1</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8172</span></span><br></pre></td></tr></table></figure><h4 id="样例输入2-4"><a href="#样例输入2-4" class="headerlink" title="样例输入2"></a>样例输入2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例输出2-4"><a href="#样例输出2-4" class="headerlink" title="样例输出2"></a>样例输出2</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="Code-17"><a href="#Code-17" class="headerlink" title="Code"></a>Code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>],w,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;x&gt;<span class="number">0</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=x%<span class="number">10</span>;</span><br><span class="line">        x=x/<span class="number">10</span>;</span><br><span class="line">        w=i;</span><br><span class="line">    &#125;</span><br><span class="line">    w++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y+=a[i]*<span class="built_in">pow</span>(<span class="number">10</span>,w-i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g2</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">20</span>],w,y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;x&gt;<span class="number">0</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=x%<span class="number">10</span>;</span><br><span class="line">        x=x/<span class="number">10</span>;</span><br><span class="line">        w=i;</span><br><span class="line">    &#125;</span><br><span class="line">    w++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;w-i<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(a[j],a[j+<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y+=a[i]*<span class="built_in">pow</span>(<span class="number">10</span>,w-i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,K,res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;N,&amp;K);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="built_in">g1</span>(N)-<span class="built_in">g2</span>(N);</span><br><span class="line">        N=res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Week1作业和实验&lt;/p&gt;</summary>
    
    
    
    <category term="Programming Thinking and Practice" scheme="https://tongyiheng.github.io/categories/Programming-Thinking-and-Practice/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="I/O" scheme="https://tongyiheng.github.io/tags/I-O/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code环境配置和使用技巧</title>
    <link href="https://tongyiheng.github.io/2021/03/20/Configuring%20Environment/vscode/"/>
    <id>https://tongyiheng.github.io/2021/03/20/Configuring%20Environment/vscode/</id>
    <published>2021-03-20T12:21:35.000Z</published>
    <updated>2021-04-09T16:04:16.854Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Windows平台下vscode配置较为复杂，需要下载编译环境，添加环境变量，手动在json文件中输入编译环境的目录。Linux平台下配置较为简单，使用命令行(sudo apt-get install )安装gcc和g++，然后在文件夹下新建测试文件，点击运行和调试，在弹出的窗口中直接选择gcc或g++即可自动生成json文件，不需要任何改动。</p><span id="more"></span><h2 id="Windows平台"><a href="#Windows平台" class="headerlink" title="Windows平台"></a>Windows平台</h2><h3 id="Step1-下载MinGW"><a href="#Step1-下载MinGW" class="headerlink" title="Step1: 下载MinGW"></a>Step1: 下载MinGW</h3><p>官网下载地址:  <a href="https://sourceforge.net/projects/mingw-w64/">MinGW-w64 - for 32 and 64 bit Windows</a></p><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/1.png" alt="1"></p><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/2.png" alt="2"></p><p>不同版本区别如下：<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/3.png" alt="3"></p><p>这里建议选择x86_64-posix-sehz。下载后，解压到自己常用的软件安装路径下，这里以D盘为例。<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/4.png" alt="4"></p><h3 id="Step2-添加环境变量"><a href="#Step2-添加环境变量" class="headerlink" title="Step2: 添加环境变量"></a>Step2: 添加环境变量</h3><p>1.以windows10为例，右键此电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量。<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/5.png" alt="5"></p><p>2.找到系统变量下的Path，点击编辑，新建，将bin目录的路径复制即可。<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/6.png" alt="6"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/7.png" alt="7"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/8.png" alt="8"></p><h3 id="Step3-配置json文件"><a href="#Step3-配置json文件" class="headerlink" title="Step3: 配置json文件"></a>Step3: 配置json文件</h3><p>1.打开vscode，选择或新建一个空文件夹目录打开作为项目目录。<br>2.点击“文件”按钮，再点击“新建文件夹”按钮，并重命名为”.vscode”。<br>3.在该文件夹内，在点击“新建文件”按钮，新建launch.json，tasks.json，c_cpp_properties.json三个.json文件。<br>文件具体内容如下：<br>launch.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,  </span><br><span class="line"> <span class="attr">&quot;configurations&quot;</span>: [  </span><br><span class="line">        &#123;  </span><br><span class="line">         <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示  </span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,       <span class="comment">// 配置类型，这里只能为cppdbg  </span></span><br><span class="line">         <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,    <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）  </span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,<span class="comment">// 将要进行调试的程序的路径  </span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],             <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,   <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false  </span></span><br><span class="line">         <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],  </span><br><span class="line">         <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>, <span class="comment">// 调试时是否显示控制台窗口，true使用控制台（小黑框），false使用内置终端  </span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,  </span><br><span class="line">         <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;D:\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应  </span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++&quot;</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span></span><br><span class="line">         <span class="attr">&quot;setupCommands&quot;</span>: [  </span><br><span class="line">                &#123;   </span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,  </span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,  </span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tasks.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;g++&quot;</span>, <span class="comment">//这里注意一下，见下文</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;D:\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-ggdb3&quot;</span>,   <span class="comment">// 生成和调试有关的信息</span></span><br><span class="line">                <span class="string">&quot;-Wall&quot;</span>,    <span class="comment">// 开启额外警告</span></span><br><span class="line">                <span class="string">&quot;-static-libgcc&quot;</span>,   <span class="comment">// 静态链接</span></span><br><span class="line">                <span class="string">&quot;-std=c++17&quot;</span>,       <span class="comment">// 使用c++17标准</span></span><br><span class="line">                <span class="string">&quot;-finput-charset=UTF-8&quot;</span>,    <span class="comment">//输入编译器文本编码 默认为UTF-8</span></span><br><span class="line">                <span class="string">&quot;-fexec-charset=GB18030&quot;</span>,   <span class="comment">//输出exe文件的编码</span></span><br><span class="line">                <span class="string">&quot;-D _USE_MATH_DEFINES&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;D:\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// &quot;problemMatcher&quot;: [          //C/C++插件提供的problemMatcher，文件路径有问题，会出现找不到文件的错误</span></span><br><span class="line">            <span class="comment">//     &quot;$gcc&quot;</span></span><br><span class="line">            <span class="comment">// ]</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;fileLocation&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;relative&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;\\&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                    <span class="attr">&quot;column&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                    <span class="attr">&quot;severity&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                    <span class="attr">&quot;message&quot;</span>: <span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;echo&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span>: <span class="string">&quot;always&quot;</span>, <span class="comment">// 在“终端”中显示编译信息的策略，可以为always，silent，never</span></span><br><span class="line">                 <span class="attr">&quot;focus&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">                 <span class="attr">&quot;panel&quot;</span>: <span class="string">&quot;shared&quot;</span> <span class="comment">// 不同的文件的编译信息共享一个终端面板</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c_cpp_properties.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;MinGW64&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;gcc-x64&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;compilerPath&quot;</span>: <span class="string">&quot;D:\\x86_64-8.1.0-release-posix-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;includePath&quot;</span>: [</span><br><span class="line">               <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">           ],</span><br><span class="line">           <span class="attr">&quot;cppStandard&quot;</span>: <span class="string">&quot;c++17&quot;</span></span><br><span class="line">       &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些其他的教程可能还会有settings.json文件，非必需，而且里面往往有一些仅适用于个人的习惯设置（字体大小等），这里不再展示。<br>传送门：具体每个配置选项的含义，可参考<a href="https://www.bilibili.com/video/BV1sW411v7VZ">https://www.bilibili.com/video/BV1sW411v7VZ</a><br>json文件参考来源：<a href="https://blog.csdn.net/qq_40477151/article/details/103917156">https://blog.csdn.net/qq_40477151/article/details/103917156</a></p><h3 id="Step4-运行和调试"><a href="#Step4-运行和调试" class="headerlink" title="Step4: 运行和调试"></a>Step4: 运行和调试</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/9.png" alt="9"></p><p>launch.json文件中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;externalConsole&quot;: false, &#x2F;&#x2F; 调试时是否显示控制台窗口，true使用控制台（小黑框），false使用内置终端  </span><br></pre></td></tr></table></figure><p>若使用控制台，需要在main函数return之前暂停一下，否则小黑框会一闪而过，可以使用stdlib.h库中的system(“pause”)，也可简单地使用getchar()。<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/11.png" alt="11"><br>若使用内置终端，则会直接在内置的终端输出。<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/10.png" alt="10"></p><p>调试过程与其他IDE类似，略。</p><p>一个小小的<strong>hint</strong>: 使用freopen重定向输入输出流，可以不用每次都复制一遍输入，或者无法辨别某个数据是输入还是输出（不方便比对正确结果）。<br>Demo:<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/12.png" alt="12"></p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><p>1.Code Runner<br>安装后即可直接运行代码，使用内置终端。一些设置如下：<br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/Configuring%20Environment/vscode/13.png" alt="13"><br><strong>Warning</strong>: 一定要将“<strong>Run In Terminal</strong>”的选项勾上，否则运行之后你找不到任何地方可以输入数据！</p><p>2.Theme<br>Light: Atom one light, Night Owl Light, GitHub Light.<br>Dark: Atom one dark, One Dark Pro, Dark+.<br>传送门: - <a href="https://vscodethemes.com/light">Visual Studio Code Light Themes</a><br>        - <a href="https://vscodethemes.com/dark">Visual Studio Code Dark Themes</a> </p><p>3.Icon: Material Icon Theme.</p><p>4.filesize: 统计文件大小。</p><h2 id="Linux平台"><a href="#Linux平台" class="headerlink" title="Linux平台"></a>Linux平台</h2><p>真的是非常easy啊！毕竟，一个连虚拟机或者双系统都拥有的人难道还不会配vscode吗？</p><h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>1.2021-03-27: C++17标准不支持#include&lt;bits/stdc++.h&gt;，编译时会报一长串错误，C++14标准支持，如果想使用这个头文件，可以在json文件中将C++标准改为C++14。<br>终于解决了一个困扰已久的问题。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;Windows平台下vscode配置较为复杂，需要下载编译环境，添加环境变量，手动在json文件中输入编译环境的目录。Linux平台下配置较为简单，使用命令行(sudo apt-get install )安装gcc和g++，然后在文件夹下新建测试文件，点击运行和调试，在弹出的窗口中直接选择gcc或g++即可自动生成json文件，不需要任何改动。&lt;/p&gt;</summary>
    
    
    
    <category term="Configuring the Environment" scheme="https://tongyiheng.github.io/categories/Configuring-the-Environment/"/>
    
    
    <category term="Visual Studio Code" scheme="https://tongyiheng.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（十二）图</title>
    <link href="https://tongyiheng.github.io/2020/12/23/DSA/DSA_12/"/>
    <id>https://tongyiheng.github.io/2020/12/23/DSA/DSA_12/</id>
    <published>2020-12-23T12:13:46.000Z</published>
    <updated>2021-04-09T16:26:27.267Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;图的表示可以通过邻接矩阵，邻接链表和邻接数组。本文通过邻接链表实现无向无权图的表示，成员方法包括插入一条边，删除一条边，广度优先搜索，深度优先搜索，求连通分量个数，求两点之间的最短路径（BFS）。linkedGraph类中含有迭代器类myIterator，通过顶点创建迭代器，依次返回该顶点的所有邻接点。</p><span id="more"></span><h2 id="P1019-图论基础"><a href="#P1019-图论基础" class="headerlink" title="P1019:图论基础"></a>P1019:图论基础</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>创建无向图类，存储结构使用邻接链表，提供操作：插入一条边，删除一条边，BFS，DFS。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行四个整数n，m，s，t。n (10≤n≤100000) 代表图中点的个数，m (10≤m≤200000) 代表接下来共有m个操作，s代表起始点，t代表终点。<br>接下来m行，每行代表一次插入或删除边的操作，操作格式为：</p><ul><li>0 u v 在点u和v之间增加一条边</li><li>1 u v 删除点u和v之间的边</li></ul><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>第一行输出图中有多少个连通分量。<br>第二行输出所有连通子图中最小点的编号（升序），编号间用空格分隔。<br>第三行输出从s点开始的dfs序列长度。<br>第四行输出从s点开始的字典序最小的dfs序列。<br>第五行输出从t点开始的bfs序列的长度。<br>第六行输出从t点开始字典序最小的bfs序列。<br>第七行输出从s点到t点的最短路径，若是不存在路径则输出-1。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">20</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">9</span> <span class="number">6</span></span><br><span class="line"><span class="number">0</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">8</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">9</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> </span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">7</span> <span class="number">6</span> <span class="number">9</span> <span class="number">10</span> <span class="number">3</span> </span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">7</span> <span class="number">8</span> <span class="number">1</span> <span class="number">9</span> <span class="number">6</span> <span class="number">10</span> <span class="number">4</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 10240KiB for each test case.</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用邻接链表存储结构，封装无向图类linkedGraph。protected成员包括图的顶点数n，边数e，邻接表aList，深度优先搜索递归方法rDfs，静态成员标记数组reach，标记label，路径数组path，路径长度length。public成员包括构造函数，析构函数，返回顶点个数，返回边数，插入一条边，删除一条边，广度优先搜索，深度优先搜索，返回无向图的构件个数，通过BFS求两点之间的最短路径，对aList链表数组的每个元素进行排序。定义迭代器myIterator，提供next方法依次返回当前顶点的邻接顶点，若不存在返回0。方法iterator返回myIterator类的指针。<br>&emsp;&emsp;对chain类进行扩展，增加方法eraseElement(theVertex)删除顶点为theVertex的元素和冒泡排序方法bubbleSort。</p><ul><li>insertEdge：插入一条边i, j。首先通过aList[i].indexOf(j)判断图中是否已经存在这条边，若已经存在则不需要再次插入，若不存在，调用aList[i]和aList[j]的insert方法，将邻接顶点插入到链表头，图的边数e加一。</li><li>eraseEdge：删除一条边i, j。首先通过aList[i].eraseElement (j)判断图中是否存在这条边，若不存在则不需要进行删除，若存在，调用aList[i]和aList[j]的eraseElement方法删除邻接点，图的边数e减一。</li><li>labelComponents：返回无向图的构件个数。首先将标记构件号的数组c和标记label初始化，然后遍历每个顶点，如果顶点i未到达，对其实施BFS，进行标记。</li><li>findPath：寻找一条从顶点theSource到顶点theDestination的最短路径，返回一个数组path，从索引1开始表示路径，path[0]表示路径长度。如果路径不存在，返回NULL。首先对path，length，reach等进行初始化，定义bool型变量exists表示路径是否存在，用parent数组存储每个节点的前驱节点。利用BFS搜索路径，每次从队列中删除一个有标记的顶点，判断是否到达theDestination，若未到达，则标记所有邻接于顶点w的还未到达的顶点，使用parent数组存储前驱节点。如果到达theDestination，exists赋值为true，跳出while循环。如果找到了最短路径，根据parent逆向寻找路径中的各个顶点，通过栈结构将其放入path数组中，path[0]记录路径长度。如果不存在路径，输出-1然后返回。</li></ul><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------graphChain类---------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chainNode</span>           //节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数据成员</span></span><br><span class="line">    T element;</span><br><span class="line">    chainNode&lt;T&gt;* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">chainNode</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element,chainNode&lt;T&gt;* next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedGraph</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">graphChain</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">linkedGraph</span>;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    chainNode&lt;T&gt;* firstNode;                    <span class="comment">//指向链表第一个节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> listSize;                               <span class="comment">//线性表的元素个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">graphChain</span>();                               <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">graphChain</span>(<span class="keyword">const</span> graphChain&lt;T&gt;&amp; theList);   <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">graphChain</span>();                              <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> listSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> listSize;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">get</span><span class="params">(<span class="keyword">int</span> theIndex)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;                   <span class="comment">//返回元素theElement首次出现时的索引，若不存在返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement)</span></span>;      <span class="comment">//在索引为theIndex的位置插入元素theElement</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> theIndex)</span></span>;                           <span class="comment">//删除链表中索引为theIndex的元素</span></span><br><span class="line">    <span class="function">T* <span class="title">eraseElement</span><span class="params">(T&amp; theVertex)</span></span>;                      <span class="comment">//删除顶点为theVertex的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">()</span></span>;                                  <span class="comment">//冒泡排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        chainNode&lt;T&gt;* node;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//用C++的typedef语句实现前向迭代器</span></span><br><span class="line">        <span class="keyword">typedef</span> bidirectional_iterator_tag __iterator_category;</span><br><span class="line">        <span class="keyword">typedef</span> T value_type;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">        <span class="keyword">typedef</span> T* pointer;</span><br><span class="line">        <span class="keyword">typedef</span> T&amp; reference;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">iterator</span>(chainNode&lt;T&gt;* theNode=<span class="literal">NULL</span>) <span class="comment">//构造函数</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=theNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解引用操作符</span></span><br><span class="line">        T&amp; <span class="keyword">operator</span>* () <span class="keyword">const</span> &#123;<span class="keyword">return</span> node-&gt;element;&#125;</span><br><span class="line">        T* <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;node-&gt;element;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器加法操作</span></span><br><span class="line">        iterator&amp; <span class="keyword">operator</span>++ ()<span class="comment">//前++</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator <span class="keyword">operator</span>++ (<span class="keyword">int</span>)<span class="comment">//后++</span></span><br><span class="line">        &#123;</span><br><span class="line">            iterator old=*<span class="keyword">this</span>;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相等检验</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>!= (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node!=right.node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node==right.node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(firstNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">graphChain&lt;T&gt;::<span class="built_in">graphChain</span>()   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    firstNode=<span class="literal">NULL</span>;</span><br><span class="line">    listSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">graphChain&lt;T&gt;::<span class="built_in">graphChain</span>(<span class="keyword">const</span> graphChain&lt;T&gt;&amp; theList) <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    listSize=theList.listSize;</span><br><span class="line">    <span class="comment">//链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        firstNode=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表不为空</span></span><br><span class="line">    chainNode&lt;T&gt;* sourceNode=theList.firstNode;</span><br><span class="line">    firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);<span class="comment">//复制theList的首元素</span></span><br><span class="line">    sourceNode=sourceNode-&gt;next;</span><br><span class="line">    chainNode&lt;T&gt;* targetNode=firstNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(sourceNode!=<span class="literal">NULL</span>) <span class="comment">//复制剩余元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        targetNode-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);</span><br><span class="line">        targetNode=targetNode-&gt;next;</span><br><span class="line">        sourceNode=sourceNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    targetNode-&gt;next=<span class="literal">NULL</span>;  <span class="comment">//尾结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">graphChain&lt;T&gt;::~<span class="built_in">graphChain</span>() <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(firstNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* nextNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> firstNode;</span><br><span class="line">        firstNode=nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; graphChain&lt;T&gt;::<span class="built_in">get</span>(<span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回索引为theIndex的元素</span></span><br><span class="line">    <span class="comment">//移向需要的节点</span></span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;theIndex;i++)</span><br><span class="line">        currentNode=currentNode-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> currentNode-&gt;element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> graphChain&lt;T&gt;::<span class="built_in">indexOf</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//返回元素theElement首次出现时的索引，若不存在返回-1</span></span><br><span class="line">    <span class="comment">//搜索链表寻找theElement</span></span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=theElement)</span><br><span class="line">    &#123;</span><br><span class="line">        currentNode=currentNode-&gt;next;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(currentNode==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> graphChain&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement) <span class="comment">//插入操作</span></span><br><span class="line">&#123;<span class="comment">//在索引为theIndex的位置插入元素theElement</span></span><br><span class="line">    <span class="keyword">if</span>(theIndex==<span class="number">0</span>)<span class="comment">//在链表头插入</span></span><br><span class="line">        firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(theElement,firstNode);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">//寻找前驱</span></span><br><span class="line">        chainNode&lt;T&gt;* p=firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;theIndex<span class="number">-1</span>;i++)</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        <span class="comment">//在p之后插入</span></span><br><span class="line">        p-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(theElement,p-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    listSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> graphChain&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">int</span> theIndex)</span><br><span class="line">&#123;<span class="comment">//删除链表中索引为theIndex的元素</span></span><br><span class="line">    chainNode&lt;T&gt;* deleteNode;</span><br><span class="line">    <span class="keyword">if</span>(theIndex==<span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//删除链表的首节点</span></span><br><span class="line">        deleteNode=firstNode;</span><br><span class="line">        firstNode=firstNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* p=firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;theIndex<span class="number">-1</span>;i++)</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">        deleteNode=p-&gt;next;</span><br><span class="line">        p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    listSize--;</span><br><span class="line">    <span class="keyword">delete</span> deleteNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T* graphChain&lt;T&gt;::<span class="built_in">eraseElement</span>(T &amp;theVertex)</span><br><span class="line">&#123;<span class="comment">//删除顶点为theVertex的元素</span></span><br><span class="line">    chainNode&lt;T&gt;* deleteNode;   <span class="comment">//要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span>(firstNode-&gt;element==theVertex) <span class="comment">//删除的是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        deleteNode=firstNode;</span><br><span class="line">        firstNode=firstNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//删除的不是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* previousNode=firstNode;</span><br><span class="line">        chainNode&lt;T&gt;* currentNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=theVertex)</span><br><span class="line">        &#123;</span><br><span class="line">            currentNode=currentNode-&gt;next;</span><br><span class="line">            previousNode=previousNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentNode==<span class="literal">NULL</span>)   <span class="comment">//链表中不存在要删除的元素</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//链表中存在要删除的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            deleteNode=currentNode;</span><br><span class="line">            previousNode-&gt;next=currentNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    T* pElement=&amp;deleteNode-&gt;element;</span><br><span class="line">    listSize--;</span><br><span class="line">    <span class="keyword">delete</span> deleteNode;</span><br><span class="line">    <span class="keyword">return</span> pElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> graphChain&lt;T&gt;::<span class="built_in">bubbleSort</span>()</span><br><span class="line">&#123;<span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="keyword">for</span>(chainNode&lt;T&gt;* p=firstNode;p!=<span class="literal">NULL</span>;p=p-&gt;next)</span><br><span class="line">        <span class="keyword">for</span>(chainNode&lt;T&gt;* q=p-&gt;next;q!= <span class="literal">NULL</span>;q=q-&gt;next)</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;element &gt; q-&gt;element)</span><br><span class="line">                <span class="built_in">swap</span>(p-&gt;element,q-&gt;element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------arrayQueue类---------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> queueFront;     <span class="comment">//队列首元素的下一个位置（逆时针方向）</span></span><br><span class="line">    <span class="keyword">int</span> queueBack;      <span class="comment">//队列最后一个元素的位置</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//数组大小</span></span><br><span class="line">    T* queue;           <span class="comment">//存储队列的数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayQueue</span>() &#123;<span class="keyword">delete</span> []queue;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> queueFront==queueBack;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> (arrayLength+queueBack-queueFront)%arrayLength;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;                   <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;                    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                         <span class="comment">//删除队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;     <span class="comment">//元素插入到队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayQueue&lt;T&gt;::<span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    queue=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    queueFront=queueBack=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">front</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[(queueFront+<span class="number">1</span>)%arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">back</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[queueBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除队首元素</span></span><br><span class="line">    queueFront=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueFront].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//元素插入到队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入一个元素后队列满，需要扩充容量</span></span><br><span class="line">    <span class="keyword">if</span>((queueBack+<span class="number">1</span>)%arrayLength==queueFront)</span><br><span class="line">    &#123;</span><br><span class="line">        T* newQueue=<span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line">        <span class="keyword">int</span> start=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">        <span class="comment">//复制元素</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;<span class="number">2</span>) <span class="comment">//原队列中没有形成环</span></span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+start+arrayLength<span class="number">-1</span>,newQueue);</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//原队列中形成环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+arrayLength,newQueue);</span><br><span class="line">            <span class="built_in">copy</span>(queue,queue+queueBack+<span class="number">1</span>,newQueue+arrayLength-start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queueFront=<span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">        queueBack=arrayLength<span class="number">-2</span>;</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span> []queue;</span><br><span class="line">        queue=newQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    queueBack=(queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueBack]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------arrayStack类---------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> stackTop;       <span class="comment">//栈顶</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//栈容量</span></span><br><span class="line">    T* stack;           <span class="comment">//元素数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数、析构函数</span></span><br><span class="line">    <span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayStack</span>() &#123;<span class="keyword">delete</span> []stack;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADT方法</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop==<span class="number">-1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop+<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayStack&lt;T&gt;::<span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    stack=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    stackTop=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayStack&lt;T&gt;::<span class="built_in">top</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[stackTop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    stack[stackTop--].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stackTop==arrayLength<span class="number">-1</span>)</span><br><span class="line">    &#123;<span class="comment">//空间已满，容量加倍</span></span><br><span class="line">        T* newStack=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=stackTop;i++)</span><br><span class="line">            newStack[i]=stack[i];</span><br><span class="line">        <span class="keyword">delete</span> []stack;</span><br><span class="line">        stack=newStack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在栈顶插入</span></span><br><span class="line">    stack[++stackTop]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//---------------------linkedGraph类---------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedGraph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> n;                      <span class="comment">//顶点数</span></span><br><span class="line">    <span class="keyword">int</span> e;                      <span class="comment">//边数</span></span><br><span class="line">    graphChain&lt;<span class="keyword">int</span>&gt; *aList;     <span class="comment">//邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rDfs</span><span class="params">(<span class="keyword">int</span> v)</span></span>;           <span class="comment">//深度优先搜索递归方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rDfs_output</span><span class="params">(<span class="keyword">int</span> v)</span></span>;    <span class="comment">//深度优先搜索递归方法（输出DFS序列）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> *reach;          <span class="comment">//标记数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> label;           <span class="comment">//标记</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> *path;           <span class="comment">//路径</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> length;          <span class="comment">//路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">linkedGraph</span>(<span class="keyword">int</span> numberOfVertices=<span class="number">0</span>)</span><br><span class="line">    &#123;<span class="comment">//构造函数</span></span><br><span class="line">        n=numberOfVertices;</span><br><span class="line">        e=<span class="number">0</span>;</span><br><span class="line">        aList=<span class="keyword">new</span> graphChain&lt;<span class="keyword">int</span>&gt;[n+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">linkedGraph</span>() &#123;<span class="keyword">delete</span> []aList;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfVertices</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> n;&#125;        <span class="comment">//返回顶点数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numberOfEdges</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> e;&#125;           <span class="comment">//返回边数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertEdge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;                   <span class="comment">//插入一条边</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eraseEdge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;                    <span class="comment">//删除一条边</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span>;          <span class="comment">//广度优先搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs_output</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span>;   <span class="comment">//广度优先搜索（输出BFS序列）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span>;          <span class="comment">//深度优先搜索</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs_output</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span>;   <span class="comment">//深度优先搜索（输出DFS序列）</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">labelComponents</span><span class="params">(<span class="keyword">int</span> c[])</span></span>;                   <span class="comment">//返回无向图的构件个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>* <span class="title">findPath</span><span class="params">(<span class="keyword">int</span> theSource,<span class="keyword">int</span> theDestination)</span></span>;<span class="comment">//通过BFS求两点之间的最短路径</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortedAList</span><span class="params">()</span>                              <span class="comment">//对aList[i]进行排序</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            aList[i].<span class="built_in">bubbleSort</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">myIterator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        graphChain&lt;<span class="keyword">int</span>&gt; chain;</span><br><span class="line">        chainNode&lt;<span class="keyword">int</span>&gt;* currentVertexNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">myIterator</span>(graphChain&lt;<span class="keyword">int</span>&gt;&amp; theGraphChain)</span><br><span class="line">        &#123;</span><br><span class="line">            chain=theGraphChain;</span><br><span class="line">            currentVertexNode=chain.firstNode;</span><br><span class="line">        &#125;</span><br><span class="line">        ~<span class="built_in">myIterator</span>() &#123;chain.firstNode=<span class="literal">NULL</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;<span class="comment">//返回下一个顶点。若不存在则返回0</span></span><br><span class="line">         <span class="comment">//寻找下一个邻接的顶点</span></span><br><span class="line">            <span class="keyword">while</span>(currentVertexNode!=<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                chainNode&lt;<span class="keyword">int</span>&gt;* p=currentVertexNode;</span><br><span class="line">                currentVertexNode=currentVertexNode-&gt;next;</span><br><span class="line">                <span class="keyword">return</span> p-&gt;element;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不存在下一个邻接的顶点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">myIterator* <span class="title">iterator</span><span class="params">(<span class="keyword">int</span> theVertex)</span>             <span class="comment">//访问指定顶点的相邻顶点</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="comment">//返回顶点theVertex的迭代器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">myIterator</span>(aList[theVertex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* linkedGraph::reach=<span class="literal">NULL</span>;           <span class="comment">//标记数组</span></span><br><span class="line"><span class="keyword">int</span> linkedGraph::label=<span class="number">0</span>;               <span class="comment">//标记</span></span><br><span class="line"><span class="keyword">int</span>* linkedGraph::path=<span class="literal">NULL</span>;            <span class="comment">//路径</span></span><br><span class="line"><span class="keyword">int</span> linkedGraph::length=<span class="number">0</span>;              <span class="comment">//路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::insertEdge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//插入一条边i,j</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否是新边</span></span><br><span class="line">    <span class="keyword">if</span>(aList[i].<span class="built_in">indexOf</span>(j)==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        aList[i].<span class="built_in">insert</span>(<span class="number">0</span>,j);</span><br><span class="line">        aList[j].<span class="built_in">insert</span>(<span class="number">0</span>,i);</span><br><span class="line">        e++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::eraseEdge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//删除一条边i,j</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断边i,j是否存在</span></span><br><span class="line">    <span class="keyword">int</span> *v=aList[i].<span class="built_in">eraseElement</span>(j);</span><br><span class="line">    <span class="keyword">if</span>(v!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        aList[j].<span class="built_in">eraseElement</span>(i);</span><br><span class="line">        e--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linkedGraph::labelComponents</span><span class="params">(<span class="keyword">int</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//返回无向图的构件个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//令所有顶点是非构件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        c[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    label=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//确定构件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[i]==<span class="number">0</span>) <span class="comment">//顶点i未到达</span></span><br><span class="line">        &#123;</span><br><span class="line">            label++;</span><br><span class="line">            <span class="built_in">bfs</span>(i,c,label); <span class="comment">//给新构件做标记</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> label;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::bfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">arrayQueue&lt;<span class="keyword">int</span>&gt; <span class="title">q</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    reach[v]=label;</span><br><span class="line">    q.<span class="built_in">push</span>(v);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从队列中删除一个有标记的顶点</span></span><br><span class="line">        <span class="keyword">int</span> w=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//标记所有邻接于顶点w的还没有到达的顶点</span></span><br><span class="line">        <span class="keyword">for</span>(chainNode&lt;<span class="keyword">int</span>&gt;* u=aList[w].firstNode;u!=<span class="literal">NULL</span>;u=u-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问顶点w的一个关联的顶点</span></span><br><span class="line">            <span class="keyword">if</span>(reach[u-&gt;element]==<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="comment">//u-&gt;element是一个没有到达的顶点</span></span><br><span class="line">                q.<span class="built_in">push</span>(u-&gt;element);</span><br><span class="line">                reach[u-&gt;element]=label;    <span class="comment">//到达标记</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::bfs_output</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">arrayQueue&lt;<span class="keyword">int</span>&gt; <span class="title">q</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    reach[v]=label;</span><br><span class="line">    cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(v);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从队列中删除一个有标记的顶点</span></span><br><span class="line">        <span class="keyword">int</span> w=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//标记所有邻接于顶点w的还没有到达的顶点</span></span><br><span class="line">        <span class="keyword">for</span>(chainNode&lt;<span class="keyword">int</span>&gt;* u=aList[w].firstNode;u!=<span class="literal">NULL</span>;u=u-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问顶点w的一个关联的顶点</span></span><br><span class="line">            <span class="keyword">if</span>(reach[u-&gt;element]==<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="comment">//u-&gt;element是一个没有到达的顶点</span></span><br><span class="line">                q.<span class="built_in">push</span>(u-&gt;element);</span><br><span class="line">                reach[u-&gt;element]=label;    <span class="comment">//到达标记</span></span><br><span class="line">                cout&lt;&lt;u-&gt;element&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linkedGraph::reach=reach;</span><br><span class="line">    linkedGraph::label=label;</span><br><span class="line">    <span class="built_in">rDfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::rDfs</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//深度优先搜索递归方法</span></span><br><span class="line">    reach[v]=label;</span><br><span class="line">    myIterator* iv=<span class="built_in">iterator</span>(v);</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>((u=iv-&gt;<span class="built_in">next</span>())!=<span class="number">0</span>)    <span class="comment">//访问与v相邻的顶点</span></span><br><span class="line">        <span class="keyword">if</span>(reach[u]==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">rDfs</span>(u);    <span class="comment">//u是一个没有到达的顶点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::dfs_output</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> reach[],<span class="keyword">int</span> label)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linkedGraph::reach=reach;</span><br><span class="line">    linkedGraph::label=label;</span><br><span class="line">    <span class="built_in">rDfs_output</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkedGraph::rDfs_output</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//深度优先搜索递归方法</span></span><br><span class="line">    reach[v]=label;</span><br><span class="line">    cout&lt;&lt;v&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    myIterator* iv=<span class="built_in">iterator</span>(v);</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>((u=iv-&gt;<span class="built_in">next</span>())!=<span class="number">0</span>)    <span class="comment">//访问与v相邻的顶点</span></span><br><span class="line">        <span class="keyword">if</span>(reach[u]==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">rDfs_output</span>(u);    <span class="comment">//u是一个没有到达的顶点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">linkedGraph::findPath</span><span class="params">(<span class="keyword">int</span> theSource, <span class="keyword">int</span> theDestination)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//寻找一条从顶点theSource到顶点theDestination的最短路径</span></span><br><span class="line"> <span class="comment">//返回一个数组path，从索引1开始表示路径，path[0]表示路径长度</span></span><br><span class="line"> <span class="comment">//如果路径不存在，返回NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//为寻找路径的算法初始化</span></span><br><span class="line">    <span class="keyword">bool</span> exists=<span class="literal">false</span>;</span><br><span class="line">    path=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    path[<span class="number">1</span>]=theSource;</span><br><span class="line">    length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *parent=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];   <span class="comment">//节点的父节点</span></span><br><span class="line">    reach=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        reach[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索路径</span></span><br><span class="line">    <span class="function">arrayQueue&lt;<span class="keyword">int</span>&gt; <span class="title">q</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    reach[theSource]=<span class="number">1</span>;</span><br><span class="line">    q.<span class="built_in">push</span>(theSource);</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从队列中删除一个有标记的顶点</span></span><br><span class="line">        <span class="keyword">int</span> w=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(w==theDestination)   <span class="comment">//到达theDestination</span></span><br><span class="line">        &#123;</span><br><span class="line">            exists=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//标记所有邻接于顶点w的还没有到达的顶点</span></span><br><span class="line">        <span class="keyword">for</span>(chainNode&lt;<span class="keyword">int</span>&gt;* u=aList[w].firstNode;u!=<span class="literal">NULL</span>;u=u-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//访问顶点w的一个关联的顶点</span></span><br><span class="line">            <span class="keyword">if</span>(reach[u-&gt;element]==<span class="number">0</span>)</span><br><span class="line">            &#123;<span class="comment">//u-&gt;element是一个没有到达的顶点</span></span><br><span class="line">                q.<span class="built_in">push</span>(u-&gt;element);</span><br><span class="line">                reach[u-&gt;element]=label;    <span class="comment">//到达标记</span></span><br><span class="line">                parent[u-&gt;element]=w;       <span class="comment">//存储父节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(theSource==theDestination || exists) <span class="comment">//找到一条最短路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据parent逆向寻找路径</span></span><br><span class="line">        <span class="keyword">int</span> i=theDestination;</span><br><span class="line">        arrayStack&lt;<span class="keyword">int</span>&gt; stack;</span><br><span class="line">        stack.<span class="built_in">push</span>(theDestination);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//入栈</span></span><br><span class="line">        <span class="keyword">while</span> (parent[i]!=theSource)</span><br><span class="line">        &#123;</span><br><span class="line">            stack.<span class="built_in">push</span>(parent[i]);</span><br><span class="line">            i=parent[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        length=stack.<span class="built_in">size</span>();</span><br><span class="line">        path[<span class="number">0</span>]=length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//出栈</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">2</span>;k&lt;=length+<span class="number">1</span>;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            path[k]=stack.<span class="built_in">top</span>();</span><br><span class="line">            stack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;path[<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//不存在路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> []path;</span><br><span class="line">        path=<span class="literal">NULL</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []reach;</span><br><span class="line">    <span class="keyword">delete</span> []parent;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(T* array,<span class="keyword">int</span> size)</span> <span class="comment">//及时终止的冒泡排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> sorted=<span class="literal">false</span>;<span class="comment">//判断是否有序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>&amp;&amp;!sorted;i++)<span class="comment">//size个数最多进行(size-1)次冒泡</span></span><br><span class="line">    &#123;</span><br><span class="line">        sorted=<span class="literal">true</span>;<span class="comment">//每次初始化为有序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(array[j+<span class="number">1</span>]&lt;array[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(array[j],array[j+<span class="number">1</span>]);</span><br><span class="line">                sorted = <span class="literal">false</span>;<span class="comment">//发生了交换,仍处于无序状态</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s,t;        <span class="comment">//n个顶点，m个操作，s代表起始点，t代表终点</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> instruction,u,v;</span><br><span class="line">    <span class="function">linkedGraph <span class="title">LG</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建图</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction&gt;&gt;u&gt;&gt;v;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instruction==<span class="number">0</span>)</span><br><span class="line">            LG.<span class="built_in">insertEdge</span>(u,v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            LG.<span class="built_in">eraseEdge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *c=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];            <span class="comment">//c[i]是顶点i的构件号</span></span><br><span class="line">    <span class="keyword">int</span> *reachDFS=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];     <span class="comment">//DFS搜索时的标记数组</span></span><br><span class="line">    <span class="keyword">int</span> *reachBFS=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];     <span class="comment">//BFS搜索时的标记数组</span></span><br><span class="line">    <span class="keyword">int</span> cntDFS=<span class="number">0</span>,cntBFS=<span class="number">0</span>;          <span class="comment">//DFS和BFS序列长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)   <span class="comment">//初始化</span></span><br><span class="line">        reachDFS[i]=reachBFS[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一行输出图中有多少个连通分量</span></span><br><span class="line">    <span class="keyword">int</span> components=LG.<span class="built_in">labelComponents</span>(c);</span><br><span class="line">    cout&lt;&lt;components&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二行输出所有连通子图中最小点的编号（升序），编号间用空格分隔</span></span><br><span class="line">    <span class="keyword">int</span> *min=<span class="keyword">new</span> <span class="keyword">int</span>[components];   <span class="comment">//每个连通子图中的最小点的编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;components;i++)   <span class="comment">//初始化</span></span><br><span class="line">        min[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(min[c[i]<span class="number">-1</span>]==<span class="number">0</span>)</span><br><span class="line">            min[c[i]<span class="number">-1</span>]=i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;min[c[i]<span class="number">-1</span>])</span><br><span class="line">                min[c[i]<span class="number">-1</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对min[i]排序后输出</span></span><br><span class="line">    <span class="built_in">bubble_sort</span>(min,components);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;components;i++)</span><br><span class="line">        cout&lt;&lt;min[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三行输出从s点开始的dfs序列长度</span></span><br><span class="line">    LG.<span class="built_in">dfs</span>(s,reachDFS,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(reachDFS[i]==<span class="number">1</span>)</span><br><span class="line">            cntDFS++;</span><br><span class="line">    cout&lt;&lt;cntDFS&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四行输出从s点开始的字典序最小的dfs序列</span></span><br><span class="line">    LG.<span class="built_in">sortedAList</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        reachDFS[i]=<span class="number">0</span>;</span><br><span class="line">    LG.<span class="built_in">dfs_output</span>(s,reachDFS,<span class="number">1</span>);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第五行输出从t点开始的bfs序列的长度</span></span><br><span class="line">    LG.<span class="built_in">bfs</span>(t,reachBFS,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(reachBFS[i]==<span class="number">1</span>)</span><br><span class="line">            cntBFS++;</span><br><span class="line">    cout&lt;&lt;cntBFS&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第六行输出从t点开始字典序最小的bfs序列</span></span><br><span class="line">    LG.<span class="built_in">sortedAList</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        reachBFS[i]=<span class="number">0</span>;</span><br><span class="line">    LG.<span class="built_in">bfs_output</span>(t,reachBFS,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第七行输出从s点到t点的最短路径，若是不存在路径则输出-1</span></span><br><span class="line">    <span class="keyword">int</span> *path=LG.<span class="built_in">findPath</span>(s,t);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    <span class="keyword">delete</span> []c;</span><br><span class="line">    <span class="keyword">delete</span> []reachDFS;</span><br><span class="line">    <span class="keyword">delete</span> []reachBFS;</span><br><span class="line">    <span class="keyword">delete</span> []path;</span><br><span class="line">    <span class="keyword">delete</span> []min;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.求字典序最小的BFS和DFS序列，一种办法是在求之前对邻接表的每个链表排序，另一种办法是在插入边的时候，按照有序链表进行插入。<br>2.求所有连通子图最小点的编号，需要先求出连通子图个数，然后根据连通子图个数声明一个数组，用来保存每个连通子图的最小点编号。遍历所有顶点，根据该顶点的label值和数组中已经存储的编号，最终得到所有连通子图最小点的编号。进行排序后，即可按照升序输出。<br>3.求无权图中两个点之间的最短路径，使用BFS搜索即可，在搜索过程中保存当前节点的前驱节点，搜索结束后逆向寻找这条路径中的各个顶点。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;图的表示可以通过邻接矩阵，邻接链表和邻接数组。本文通过邻接链表实现无向无权图的表示，成员方法包括插入一条边，删除一条边，广度优先搜索，深度优先搜索，求连通分量个数，求两点之间的最短路径（BFS）。linkedGraph类中含有迭代器类myIterator，通过顶点创建迭代器，依次返回该顶点的所有邻接点。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="递归" scheme="https://tongyiheng.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="队列" scheme="https://tongyiheng.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="图" scheme="https://tongyiheng.github.io/tags/%E5%9B%BE/"/>
    
    <category term="栈" scheme="https://tongyiheng.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（十一）搜索树</title>
    <link href="https://tongyiheng.github.io/2020/12/23/DSA/DSA_11/"/>
    <id>https://tongyiheng.github.io/2020/12/23/DSA/DSA_11/</id>
    <published>2020-12-23T11:47:14.000Z</published>
    <updated>2021-04-10T01:00:45.199Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;二叉搜索树查找、删除、插入操作的平均性能为O(logn)，最坏情况下的性能为O(n)。索引二叉搜索树为每个节点增加了leftSize域，记录该节点左子树的元素个数，可以按名次进行查找和删除操作，在插入和删除后需要对一些节点的leftSize值进行更新。</p><span id="more"></span><h2 id="P1018-二叉搜索树"><a href="#P1018-二叉搜索树" class="headerlink" title="P1018:二叉搜索树"></a>P1018:二叉搜索树</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>创建带索引的二叉搜索树类。存储结构使用链表，提供操作:插入、删除、按名次删除、查找、按名次查找、升序输出所有元素。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>输入第一行一个数字m (m&lt;=1000000)，表示有m个操作。<br>接下来m行，每一行有两个数字a，b：</p><ul><li>当输入的第一个数字a为0时，输入的第二个数字b表示向搜索树中插入b。</li><li>当输入的第一个数字a为1时，输入的第二个数字b表示向搜索树中查找b。</li><li>当输入的第一个数字a为2时，输入的第二个数字b表示向搜索树中删除b。</li><li>当输入的第一个数字a为3时，输入的第二个数字b表示查找搜索树中名次为b的元素。</li><li>当输入的第一个数字a为4时，输入的第二个数字b表示删除搜索树中名次为b的元素。</li></ul><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>对于输入中的每一种操作，输出执行操作的过程中依次比较的元素值的异或值。</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>查询与删除操作中，待查询的元素也需要异或入答案中。<br>查找（删除）操作中，如果未找到，或者插入操作，已存在，输出0（不插入），不需要输出异或和。<br>查找（删除）第b大，如果不存在，输出0。<br>删除操作中，如果当前元素有两个孩子，替换的为右子树中最小的，如果只有一个孩子，直接用该孩子替换当前元素，如果没有孩子，直接删除。<br>删除操作的替换过程中所有比较操作不计入答案。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">0</span> <span class="number">43</span></span><br><span class="line"><span class="number">0</span> <span class="number">17</span></span><br><span class="line"><span class="number">0</span> <span class="number">55</span></span><br><span class="line"><span class="number">0</span> <span class="number">62</span></span><br><span class="line"><span class="number">0</span> <span class="number">57</span></span><br><span class="line"><span class="number">0</span> <span class="number">66</span></span><br><span class="line"><span class="number">0</span> <span class="number">67</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">67</span></span><br><span class="line"><span class="number">0</span> <span class="number">70</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">2</span> <span class="number">43</span></span><br></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">43</span></span><br><span class="line"><span class="number">43</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">96</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">29</span></span><br><span class="line"><span class="number">91</span></span><br><span class="line"><span class="number">58</span></span><br><span class="line"><span class="number">43</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 10240KiB for each test case.</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>查找和删除第k大的元素时，可以先把第k的元素找到，再按照该元素查找和删除。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;封装索引二叉搜索树类indexedBinarySearchTree，二叉树的存储结构使用链表，每个节点包括关键字key，左子树的元素个数leftSize，左孩子leftChild，右孩子rightChild。节点类的构造函数有四个，默认构造函数，通过theKey构造，通过theKey，theLeftChild，theRightChild构造（构造函数中计算leftSize值），通过theKey，theLeftSize，theLeftChild，theRightChild构造。索引二叉搜索树类中，非静态的私有成员包括根节点root，树的节点个数treeSize，静态的私有成员包括访问函数visit，前序遍历preOrder，中序遍历inOrder，后序遍历postOrder，删除t指向的节点dispose方法，输出该节点的关键字的output方法。公有成员包括构造函数，析构函数，empty方法，size方法，前序遍历，中序遍历，后序遍历，层次遍历，删除二叉树的erase方法，查找关键字的find方法，插入关键字的insert方法，删除关键字的erase方法，获取名次为b的节点的关键字的get方法，插入操作后更新leftSize域的updateLeftSizeAfterInsert方法，删除操作后更新leftSize域的updateLeftSizeAfterErase_1，updateLeftSizeAfterErase_2方法，两种方法针对删除操作中的两种情况进行相应更新。</p><ul><li>find：查找关键字为theKey的节点，如果找到输出查找过程中依次比较的元素值的异或和，如果未找到输出0，不需要输出异或和。指针p从根节点开始搜索，寻找关键字等于theKey的节点，直到p为空为止。循环体首先进行异或操作，然后根据theKey和p-&gt;key的大小关系判断是否找到以及进左子树还是右子树。</li><li>insert：插入关键字为theKey的节点，如果不存在关键字为theKey的节点，输出插入过程中依次比较的元素值的异或和，如果已存在关键字为theKey的节点，输出0，不需要输出异或和。指针p从根节点开始搜索，寻找插入的位置，用指针pp保存p的父节点，根据theKey和p-&gt;key的大小关系判断是否已经存在关键字为theKey的节点以及进左子树还是右子树。根据theKey建立一个新节点，根据root是否为空判断是否是插入到一颗空树中，然后通过pp将其连在搜索树上。插入后，treeSize加一，调用updateLeftSizeAfterInsert方法对从根节点到插入点的路径上的节点的leftSize值进行更新。指针x从根节点开始，如果theKey小于x-&gt;key，当前节点的leftSize需要加一，如果theKey大于x-&gt;key，当前节点的leftSize不需要更新。最后输出异或值。</li><li>erase：删除关键字为theKey的节点，输出删除过程中依次比较的元素值的异或和，替换过程中的所有比较操作不计入答案。如果当前节点有两个孩子，用右子树中关键字最小的节点进行替换。如果只有一个孩子，直接用该节点的孩子进行替换。如果没有孩子，直接删除。如果不存在，输出0。指针p从根节点开始搜索，pp为p的父节点。搜索完毕后根据p是否为空判断是否存在关键字为theKey的节点。若不存在，输出0然后返回。若存在，根据p的孩子个数分两种情况进行考虑。<br>（1）p有两个孩子：转化为第（2）中情况。在p的右子树中沿着leftChild寻找最小元素s替代被删除的节点。替代过程是根据s-&gt;key，p-&gt;leftSize，p-&gt;leftChild，p-&gt;rightChild新建一个节点，将其连在pp上，更新指针pp，删除p节点，然后让p指向s（这是为了保证（2）中对节点s的删除）。<br>（2）p至多有一个孩子：将孩子指针存在c中，将pp和c连起来，删除p，treeSize减一。最后输出异或值。<br>对leftSize的更新在（1）过程之后（如果有的话），（2）过程之前进行。使用flag标记（1）过程是否进行，如果（1）过程执行，即要删除的节点有两个孩子，调用updateLeftSizeAfterErase_2，否则调用updateLeftSizeAfterErase_1。</li><li>updateLeftSizeAfterErase_2：要删除的节点有两个孩子，对从root到p的路径上的节点的leftSize进行更新。参数为节点类的指针s。指针x从根节点开始，当x不等于s时，执行while循环，通过x-&gt;key和s-&gt;key的大小关系进行相应节点的leftSize的更新。注意等于的特殊情况，第一次遇到相等的情况，表示x为替换后的节点，因为是用右子树的最小元素进行替换，所以直接进入右子树即可，第二次遇到表示路径寻找完毕。</li><li>updateLeftSizeAfterErase_1：要删除的节点至多有一个孩子，对从root到p的路径上的节点的leftSize进行更新。参数为关键字值theKey。指针x从根节点开始，当x不为空时，执行while循环，通过theKey和x-&gt;key的大小关系进行相应节点的leftSize的更新，若相等则路径寻找完毕。</li><li>get：返回第index个元素的关键字的值（index从0开始）。指针x从根节点开始搜索，如果index等于x-&gt;leftSize，则找到该元素，如果index小于x-&gt;leftSize，则第index个元素是左子树的第index个元素，如果index大于x-&gt;leftSize，则第index个元素是右子树的第(index-(x-&gt;leftSize+1))个元素。</li></ul><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">indexedBinarySearchTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T key;                      <span class="comment">//关键字</span></span><br><span class="line">    <span class="keyword">int</span> leftSize;               <span class="comment">//左子树的元素个数</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *leftChild,*rightChild;  <span class="comment">//左孩子和右孩子</span></span><br><span class="line">    <span class="built_in">indexedBinarySearchTreeNode</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        leftChild=rightChild=<span class="literal">NULL</span>;</span><br><span class="line">        leftSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">indexedBinarySearchTreeNode</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">    &#123;</span><br><span class="line">        key=theKey;</span><br><span class="line">        leftChild=rightChild=<span class="literal">NULL</span>;</span><br><span class="line">        leftSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">indexedBinarySearchTreeNode</span>(<span class="keyword">const</span> T&amp; theKey,indexedBinarySearchTreeNode&lt;T&gt; *theLeftChild,indexedBinarySearchTreeNode&lt;T&gt; *theRightChild)</span><br><span class="line">    &#123;</span><br><span class="line">        key=theKey;</span><br><span class="line">        leftChild=theLeftChild;</span><br><span class="line">        rightChild=theRightChild;</span><br><span class="line">        leftSize=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算leftSize的值</span></span><br><span class="line">        indexedBinarySearchTreeNode&lt;T&gt; *p=theLeftChild;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)      <span class="comment">//从根沿着右子树的路径计算节点个数</span></span><br><span class="line">        &#123;</span><br><span class="line">            leftSize+=p-&gt;leftSize+<span class="number">1</span>;</span><br><span class="line">            p=p-&gt;rightChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">indexedBinarySearchTreeNode</span>(<span class="keyword">const</span> T&amp; theKey,<span class="keyword">int</span> theLeftSize,indexedBinarySearchTreeNode&lt;T&gt; *theLeftChild,indexedBinarySearchTreeNode&lt;T&gt; *theRightChild)</span><br><span class="line">    &#123;</span><br><span class="line">        key=theKey;</span><br><span class="line">        leftSize=theLeftSize;</span><br><span class="line">        leftChild=theLeftChild;</span><br><span class="line">        rightChild=theRightChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">indexedBinarySearchTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *root;                                       <span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">int</span> treeSize;                                                               <span class="comment">//树的节点数量</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*visit)</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *)</span></span>;                     <span class="comment">//访问函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *t)</span></span>;                    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *t)</span></span>;                     <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *t)</span></span>;                   <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *t)</span> </span>&#123;<span class="keyword">delete</span> t;&#125;          <span class="comment">//删除t指向的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *t)</span> </span>&#123;cout&lt;&lt;t-&gt;key&lt;&lt;<span class="string">&quot; &quot;</span>;&#125;  <span class="comment">//输出节点的关键字</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">indexedBinarySearchTree</span>() &#123;root=<span class="literal">NULL</span>; treeSize=<span class="number">0</span>;&#125;</span><br><span class="line">    ~<span class="built_in">indexedBinarySearchTree</span>() &#123;<span class="built_in">erase</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(indexedBinarySearchTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">preOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(indexedBinarySearchTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">inOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(indexedBinarySearchTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">postOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrderOutput</span><span class="params">()</span> </span>&#123;<span class="built_in">inOrder</span>(output); cout&lt;&lt;endl;&#125;     <span class="comment">//输出中序序列</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span>            <span class="comment">//删除二叉树</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(dispose);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        treeSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T* <span class="title">find</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span> <span class="keyword">const</span></span>;                     <span class="comment">//查找关键字为theKey的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;                       <span class="comment">//插入关键字为theKey的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;                        <span class="comment">//删除关键字为theKey的节点</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;                                   <span class="comment">//获得名次为b的节点的关键字</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateLeftSizeAfterInsert</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;    <span class="comment">//插入操作后对leftSize域的更新</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateLeftSizeAfterErase_1</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;   <span class="comment">//要删除的节点p最多有一个孩子，删除操作后对root到p的路径上节点的leftSize域进行更新</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateLeftSizeAfterErase_2</span><span class="params">(indexedBinarySearchTreeNode&lt;T&gt; *s)</span></span>;  <span class="comment">//要删除的节点p有两个孩子，删除操作后对root到p的路径上节点的leftSize域进行更新</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*indexedBinarySearchTree&lt;T&gt;::visit)(indexedBinarySearchTreeNode&lt;T&gt;*)=<span class="literal">NULL</span>;    <span class="comment">//类的静态成员的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">preOrder</span>(indexedBinarySearchTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        indexedBinarySearchTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">inOrder</span>(indexedBinarySearchTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;leftChild);</span><br><span class="line">        indexedBinarySearchTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">postOrder</span>(indexedBinarySearchTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;rightChild);</span><br><span class="line">        indexedBinarySearchTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T* indexedBinarySearchTree&lt;T&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> T &amp;theKey) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//查找关键字为theKey的节点</span></span><br><span class="line"> <span class="comment">//如果找到输出查找过程中依次比较的元素值的异或和</span></span><br><span class="line"> <span class="comment">//如果未找到输出0，不需要输出异或和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value=<span class="number">0</span>;    <span class="comment">//异或和</span></span><br><span class="line">    <span class="comment">//指针p从根开始搜索，寻找关键字等于theKey的节点</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *p=root;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        value^=p-&gt;key;          <span class="comment">//异或</span></span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;p-&gt;key)</span><br><span class="line">            p=p-&gt;leftChild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(theKey&gt;p-&gt;key)</span><br><span class="line">            p=p-&gt;rightChild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> &amp;p-&gt;key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//未找到关键字为theKey的节点</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> T &amp;theKey)</span><br><span class="line">&#123;<span class="comment">//插入关键字为theKey的节点</span></span><br><span class="line"> <span class="comment">//如果不存在关键字为theKey的节点，输出插入过程中依次比较的元素值的异或和</span></span><br><span class="line"> <span class="comment">//如果已存在关键字为theKey的节点，输出0，不需要输出异或和</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value=<span class="number">0</span>;    <span class="comment">//异或和</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *p=root,*pp=<span class="literal">NULL</span>;    <span class="comment">//p从根节点开始，pp为p的父节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找插入点</span></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        value^=p-&gt;key;  <span class="comment">//异或</span></span><br><span class="line">        pp=p;</span><br><span class="line">        <span class="comment">//将p移向孩子节点</span></span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;p-&gt;key)</span><br><span class="line">            p=p-&gt;leftChild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(theKey&gt;p-&gt;key)</span><br><span class="line">            p=p-&gt;rightChild;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//已存在关键字为theKey的节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为theKey建立一个新节点，并将该节点连接到pp</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *newNode=<span class="keyword">new</span> indexedBinarySearchTreeNode&lt;T&gt;(theKey);</span><br><span class="line">    <span class="keyword">if</span>(root!=<span class="literal">NULL</span>)  <span class="comment">//树非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;pp-&gt;key)</span><br><span class="line">            pp-&gt;leftChild=newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp-&gt;rightChild=newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//插入到空树中</span></span><br><span class="line">        root=newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新treeSize和路径上节点的leftSize</span></span><br><span class="line">    treeSize++;</span><br><span class="line">    <span class="built_in">updateLeftSizeAfterInsert</span>(theKey);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">&#123;<span class="comment">//删除关键字为theKey的节点，输出删除过程中依次比较的元素值的异或和，替换过程中的所有比较操作不计入答案</span></span><br><span class="line"> <span class="comment">//如果当前节点有两个孩子，用右子树中关键字最小的节点进行替换</span></span><br><span class="line"> <span class="comment">//如果只有一个孩子，直接用该节点的孩子进行替换</span></span><br><span class="line"> <span class="comment">//如果没有孩子，直接删除</span></span><br><span class="line"> <span class="comment">//如果不存在，输出0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value=<span class="number">0</span>,flag=<span class="number">0</span>;     <span class="comment">//异或值和标记</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *p=root,*pp=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;key!=theKey)</span><br><span class="line">    &#123;<span class="comment">//p移动到它的孩子节点</span></span><br><span class="line">        value^=p-&gt;key;</span><br><span class="line">        pp=p;</span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;p-&gt;key)</span><br><span class="line">            p=p-&gt;leftChild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p=p-&gt;rightChild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="comment">//不存在关键字theKey的节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新组织树结构</span></span><br><span class="line">    <span class="comment">//当p有两个孩子时的处理</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftChild!=<span class="literal">NULL</span> &amp;&amp; p-&gt;rightChild!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;<span class="comment">//两个孩子</span></span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//转化为空或只有一个孩子</span></span><br><span class="line">        <span class="comment">//在p的右子树中寻找最小元素</span></span><br><span class="line">        indexedBinarySearchTreeNode&lt;T&gt; *s=p-&gt;rightChild,*ps=p;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;leftChild!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;<span class="comment">//移动到最小元素</span></span><br><span class="line">            ps=s;</span><br><span class="line">            s=s-&gt;leftChild;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将最小元素s移动到p</span></span><br><span class="line">        indexedBinarySearchTreeNode&lt;T&gt; *q=<span class="keyword">new</span> indexedBinarySearchTreeNode&lt;T&gt;(s-&gt;key,p-&gt;leftSize,p-&gt;leftChild,p-&gt;rightChild);</span><br><span class="line">        <span class="keyword">if</span>(pp==<span class="literal">NULL</span>)    <span class="comment">//p为根节点</span></span><br><span class="line">            root=q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(p==pp-&gt;leftChild)</span><br><span class="line">                pp-&gt;leftChild=q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pp-&gt;rightChild=q;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新p和p的父节点</span></span><br><span class="line">        <span class="keyword">if</span>(ps==p)</span><br><span class="line">            pp=q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp=ps;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        p=s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//在进行删除前更新leftSize</span></span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">1</span>) <span class="comment">//删除的节点有两个孩子</span></span><br><span class="line">        <span class="built_in">updateLeftSizeAfterErase_2</span>(p);</span><br><span class="line">    <span class="keyword">else</span>        <span class="comment">//删除的节点最多有一个孩子</span></span><br><span class="line">        <span class="built_in">updateLeftSizeAfterErase_1</span>(theKey);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//p最多有一个孩子</span></span><br><span class="line">    <span class="comment">//把孩子指针存放在c</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *c;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftChild!=<span class="literal">NULL</span>)</span><br><span class="line">        c=p-&gt;leftChild;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        c=p-&gt;rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除p</span></span><br><span class="line">    <span class="keyword">if</span>(p==root)</span><br><span class="line">        root=c;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//p是pp的左孩子还是右孩子</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p==pp-&gt;leftChild)</span><br><span class="line">            pp-&gt;leftChild=c;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pp-&gt;rightChild=c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    treeSize--;</span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line">    value^=theKey;</span><br><span class="line">    cout&lt;&lt;value&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T indexedBinarySearchTree&lt;T&gt;::<span class="built_in">get</span>(<span class="keyword">int</span> index)</span><br><span class="line">&#123;<span class="comment">//返回第index个元素的关键字的值</span></span><br><span class="line"> <span class="comment">//index从0开始</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *x=root;</span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(index==x-&gt;leftSize)      <span class="comment">//第index个元素是x-&gt;key</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(index&lt;x-&gt;leftSize)  <span class="comment">//第index个元素是左子树的第index个元素</span></span><br><span class="line">            x=x-&gt;leftChild;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//第index个元素是右子树的第(index-(x-&gt;leftSize+1))个元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            index=index-(x-&gt;leftSize+<span class="number">1</span>);</span><br><span class="line">            x=x-&gt;rightChild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x-&gt;key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">updateLeftSizeAfterInsert</span>(<span class="keyword">const</span> T &amp;theKey)</span><br><span class="line">&#123;<span class="comment">//插入操作后对leftSize域的更新</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *x=root;</span><br><span class="line">    <span class="comment">//寻找从根开始到关键字为theKey的节点的路径</span></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;x-&gt;key)   <span class="comment">//插入节点在x的左子树中，leftSize++</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-&gt;leftSize++;</span><br><span class="line">            x=x-&gt;leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(theKey&gt;x-&gt;key)  <span class="comment">//插入节点在x的右子树中</span></span><br><span class="line">            x=x-&gt;rightChild;</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//路径寻找完毕</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">updateLeftSizeAfterErase_1</span>(<span class="keyword">const</span> T &amp;theKey)</span><br><span class="line">&#123;<span class="comment">//要删除的节点p最多有一个孩子，删除操作后对root到p的路径上节点的leftSize域</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *x=root;</span><br><span class="line">    <span class="comment">//寻找从根开始到关键字为theKey的节点的路径</span></span><br><span class="line">    <span class="keyword">while</span>(x!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(theKey&lt;x-&gt;key)       <span class="comment">//删除节点在x的左子树中，leftSize--</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-&gt;leftSize--;</span><br><span class="line">            x=x-&gt;leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(theKey&gt;x-&gt;key)  <span class="comment">//删除节点在x的右子树中</span></span><br><span class="line">            x=x-&gt;rightChild;</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//路径寻找完毕</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> indexedBinarySearchTree&lt;T&gt;::<span class="built_in">updateLeftSizeAfterErase_2</span>(indexedBinarySearchTreeNode&lt;T&gt; *s)</span><br><span class="line">&#123;<span class="comment">//要删除的节点p有两个孩子，删除操作后对root到p的路径上节点的leftSize域进行更新</span></span><br><span class="line">    indexedBinarySearchTreeNode&lt;T&gt; *x=root;</span><br><span class="line">    <span class="keyword">bool</span> meet=<span class="literal">false</span>;    <span class="comment">//标记是否是第一次遇到关键字为s-&gt;key的节点</span></span><br><span class="line">    <span class="comment">//寻找从根开始到s的路径</span></span><br><span class="line">    <span class="keyword">while</span>(x!=s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;key&lt;x-&gt;key)   <span class="comment">//删除节点在x的左子树中，leftSize--</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-&gt;leftSize--;</span><br><span class="line">            x=x-&gt;leftChild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s-&gt;key&gt;x-&gt;key)  <span class="comment">//删除节点在x的右子树中</span></span><br><span class="line">            x=x-&gt;rightChild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!meet)               <span class="comment">//第一次遇到相同关键字的节点</span></span><br><span class="line">            &#123;</span><br><span class="line">                meet=<span class="literal">true</span>;          <span class="comment">//这个节点的关键字已经被右子树的最小元素替换</span></span><br><span class="line">                x=x-&gt;rightChild;    <span class="comment">//要删除的节点位于右子树，所以将指针指向右孩子</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>        <span class="comment">//第二次遇到，路径寻找完毕</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    indexedBinarySearchTree&lt;<span class="keyword">int</span>&gt; IBST;</span><br><span class="line">    <span class="keyword">int</span> m,instruction,b;</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                IBST.<span class="built_in">insert</span>(b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                IBST.<span class="built_in">find</span>(b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                IBST.<span class="built_in">erase</span>(b);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                IBST.<span class="built_in">find</span>(IBST.<span class="built_in">get</span>(b<span class="number">-1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cin&gt;&gt;b;</span><br><span class="line">                IBST.<span class="built_in">erase</span>(IBST.<span class="built_in">get</span>(b<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.updateLeftSizeAfterErase_1和updateLeftSizeAfterErase_2可以合并成updateLeftSize AfterErase，参数为索引二叉搜索树节点类的指针。while循环条件是x!=s，如果s-&gt;key小于x-&gt;key，x-&gt;leftSize减一，x=x-&gt;leftChild，否则x=x-&gt;rightChild。<br>2.插入节点时，对leftSize更新不能边寻找边更新，因为有可能该节点已经存在，不需要再插入，所以需要在插入操作完成后再根据theKey更新。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;二叉搜索树查找、删除、插入操作的平均性能为O(logn)，最坏情况下的性能为O(n)。索引二叉搜索树为每个节点增加了leftSize域，记录该节点左子树的元素个数，可以按名次进行查找和删除操作，在插入和删除后需要对一些节点的leftSize值进行更新。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="树型结构" scheme="https://tongyiheng.github.io/tags/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84/"/>
    
    <category term="索引二叉搜索树" scheme="https://tongyiheng.github.io/tags/%E7%B4%A2%E5%BC%95%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（十）堆及其应用</title>
    <link href="https://tongyiheng.github.io/2020/12/23/DSA/DSA_10/"/>
    <id>https://tongyiheng.github.io/2020/12/23/DSA/DSA_10/</id>
    <published>2020-12-23T11:27:39.000Z</published>
    <updated>2021-04-10T01:00:52.088Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;优先级队列中，每个元素都有一个优先级。在最小优先级队列中，查找和删除的元素都是优先级最小的元素。在最大优先级队列中，查找和删除的元素都是优先级最大的元素。优先级队列性能较好的是堆结构，一个大根堆（小根堆）既是大根树（小根树），也是完全二叉树。删除和插入的时间复杂度均为O(logn)，初始化的时间复杂度为O(n)。利用堆结构实现堆排序，时间复杂度为O(nlogn)。利用堆和二叉树，实现Huffman编码，保证没有一个编码是另一个编码的前缀，并且WEP最小。</p><span id="more"></span><h2 id="P1016-堆的操作"><a href="#P1016-堆的操作" class="headerlink" title="P1016:堆的操作"></a>P1016:堆的操作</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>创建<strong>最小堆类</strong>，最小堆的存储结构使用<strong>数组</strong>。提供操作:插入、删除、初始化。题目第一个操作是建堆操作，接下来是对堆的插入和删除操作，插入和删除都在建好的堆上操作。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行一个数n（n&lt;=5000)，代表堆的大小。第二行n个数，代表堆的各个元素。<br>第三行一个数m (m&lt;=1000)，代表接下来共m个操作。接下来m行，分别代表各个操作。下面是各个操作的格式：</p><ul><li>插入操作：1 num</li><li>删除操作：2</li><li>排序操作：第一行两个数3和n，3代表是排序操作，n代表待排序的数的数目，接下来一行n个数是待排序数。<br>保证排序操作只出现一次且一定是最后一个操作。</li></ul><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>第一行建堆操作输出建好堆后堆顶的元素。<br>接下来m个操作，若是插入和删除操作，每行输出执行操作后堆顶的元素的值；若是排序操作，输出一行按升序排序好的结果，每个元素间用空格分隔。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">-225580</span> <span class="number">113195</span> <span class="number">-257251</span> <span class="number">384948</span> <span class="number">-83524</span> <span class="number">331745</span> <span class="number">179545</span> <span class="number">293165</span> <span class="number">125998</span> <span class="number">376875</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">-232502</span></span><br><span class="line"><span class="number">1</span> <span class="number">-359833</span></span><br><span class="line"><span class="number">1</span> <span class="number">95123</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">223971</span></span><br><span class="line"><span class="number">1</span> <span class="number">-118735</span></span><br><span class="line"><span class="number">1</span> <span class="number">-278843</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">-96567</span> <span class="number">37188</span> <span class="number">-142422</span> <span class="number">166589</span> <span class="number">-169599</span> <span class="number">245575</span> <span class="number">-369710</span> <span class="number">423015</span> <span class="number">-243107</span> <span class="number">-108789</span></span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-257251</span></span><br><span class="line"><span class="number">-257251</span></span><br><span class="line"><span class="number">-359833</span></span><br><span class="line"><span class="number">-359833</span></span><br><span class="line"><span class="number">-257251</span></span><br><span class="line"><span class="number">-232502</span></span><br><span class="line"><span class="number">-225580</span></span><br><span class="line"><span class="number">-225580</span></span><br><span class="line"><span class="number">-225580</span></span><br><span class="line"><span class="number">-278843</span></span><br><span class="line"><span class="number">-369710</span> <span class="number">-243107</span> <span class="number">-169599</span> <span class="number">-142422</span> <span class="number">-108789</span> <span class="number">-96567</span> <span class="number">37188</span> <span class="number">166589</span> <span class="number">245575</span> <span class="number">423015</span> </span><br></pre></td></tr></table></figure><h3 id="Limitation"><a href="#Limitation" class="headerlink" title="Limitation"></a>Limitation</h3><p>1s, 64MB for each test case.</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用数组存储结构，封装小根堆类minHeap，私有成员包括存储堆的数组heap，数组大小arrayLength，小根堆的大小heapSize，公有成员包括构造函数，析构函数，empty方法，size方法，返回堆顶元素的top方法，向堆中插入一个元素的push方法，删除堆顶元素的pop方法，初始化一个小根堆的initialize方法，从堆的析构函数中保存数组的deactiveArray方法。定义模板函数heapSort，利用堆排序对数组进行排序。</p><ul><li>top：返回堆顶元素。直接返回heap[1]即可。</li><li>pop：删除堆顶元素。首先将堆顶元素heap[1]删除，然后将堆的最后一个元素放在根的位置，依次和左右孩子中较小的进行比较，寻找合适的位置放入。</li><li>push：向堆中插入一个元素。首先判断数组容量是否足够，若数组已满，需要进行扩容。为插入的元素寻找插入位置，判断条件是是否到达根节点和theElement值是否小于当前位置的元素值（保证小根堆的结构）。</li><li>initialize：初始化一个小根堆。令heap指向数组theHeap，heapSize=theSize。然后从最后一个具有孩子的节点开始扫描，用root表示正在处理的节点，对于每一个root值，利用while循环将以root为根的子树调整为小根堆。</li><li>deactiveArray：从堆的析构函数中保存数组。将类的heap指针置空。</li><li>heapSort：利用堆排序对数组a[1:n]排序。首先声明一个minHeap类的对象heap，调用initialize方法初始化小根堆，然后每次删除堆顶元素，将其放在数组的最后，最后调用deactivateArray方法，将heap的指针置空，保存数组a。</li></ul><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minHeap</span>                               //小根堆</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *heap;                                <span class="comment">//保存堆的数组</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;                        <span class="comment">//数组大小</span></span><br><span class="line">    <span class="keyword">int</span> heapSize;                           <span class="comment">//堆的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">minHeap</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">minHeap</span>() &#123;<span class="keyword">delete</span> []heap;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heapSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heapSize;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heap[<span class="number">1</span>];&#125;        <span class="comment">//返回堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                             <span class="comment">//删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;         <span class="comment">//向堆中插入一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(T* theHeap,<span class="keyword">int</span> theSize)</span></span>;<span class="comment">//初始化一个小根堆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deactivateArray</span><span class="params">()</span> </span>&#123;heap=<span class="literal">NULL</span>;&#125;     <span class="comment">//从堆的析构函数中保存数组a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">minHeap&lt;T&gt;::<span class="built_in">minHeap</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    heap=<span class="keyword">new</span> T[initialCapacity+<span class="number">1</span>];</span><br><span class="line">    arrayLength=initialCapacity+<span class="number">1</span>;</span><br><span class="line">    heapSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除堆顶元素</span></span><br><span class="line">    heap[<span class="number">1</span>].~<span class="built_in">T</span>();   <span class="comment">//删除最小元素</span></span><br><span class="line">    <span class="comment">//重新构造堆</span></span><br><span class="line">    T lastElement=heap[heapSize--];</span><br><span class="line">    <span class="comment">//从根开始，为lastElement寻找合适的位置</span></span><br><span class="line">    <span class="keyword">int</span> currentNode=<span class="number">1</span>,child=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(child&lt;=heapSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&gt;heap[child+<span class="number">1</span>])</span><br><span class="line">            child++;</span><br><span class="line">        <span class="keyword">if</span>(lastElement&lt;=heap[child])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        heap[currentNode]=heap[child];</span><br><span class="line">        currentNode=child;</span><br><span class="line">        child*=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode]=lastElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T &amp;theElement)</span><br><span class="line">&#123;<span class="comment">//向堆中插入一个元素</span></span><br><span class="line">    <span class="keyword">if</span>(heapSize==arrayLength<span class="number">-1</span>)     <span class="comment">//数组已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        T* newHeap=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">copy</span>(heap+<span class="number">1</span>,heap+arrayLength,newHeap+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">delete</span> []heap;</span><br><span class="line">        heap=newHeap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为theElement寻找插入位置</span></span><br><span class="line">    <span class="keyword">int</span> currentNode=++heapSize;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="number">1</span> &amp;&amp; theElement&lt;heap[currentNode/<span class="number">2</span>])</span><br><span class="line">    &#123;<span class="comment">//不能把theElement放入heap[currentNode]</span></span><br><span class="line">        heap[currentNode]=heap[currentNode/<span class="number">2</span>];</span><br><span class="line">        currentNode/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">initialize</span>(T *theHeap, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;<span class="comment">//初始化一个小根堆</span></span><br><span class="line">    <span class="keyword">delete</span> []heap;</span><br><span class="line">    heap=theHeap;</span><br><span class="line">    heapSize=theSize;</span><br><span class="line">    arrayLength=theSize+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> root=heapSize/<span class="number">2</span>;root&gt;=<span class="number">1</span>;root--)</span><br><span class="line">    &#123;</span><br><span class="line">        T rootElement=heap[root];   <span class="comment">//子树的根</span></span><br><span class="line">        <span class="comment">//寻找放置rootElement的位置</span></span><br><span class="line">        <span class="keyword">int</span> child=<span class="number">2</span>*root;</span><br><span class="line">        <span class="keyword">while</span>(child&lt;=heapSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&gt;heap[child+<span class="number">1</span>])</span><br><span class="line">                child++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rootElement&lt;=heap[child])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            heap[child/<span class="number">2</span>]=heap[child];</span><br><span class="line">            child*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        heap[child/<span class="number">2</span>]=rootElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(T *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//利用堆排序对数组a[1:n]进行排序</span></span><br><span class="line">    <span class="function">minHeap&lt;T&gt; <span class="title">heap</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    heap.<span class="built_in">initialize</span>(a,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        T x=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        a[i+<span class="number">1</span>]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    heap.<span class="built_in">deactivateArray</span>();  <span class="comment">//从堆的析构函数中保存数组a</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="comment">//堆的大小</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *heapElement=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//第二行n个数，代表堆的各个元素</span></span><br><span class="line">        cin&gt;&gt;heapElement[i];</span><br><span class="line"></span><br><span class="line">    <span class="function">minHeap&lt;<span class="keyword">int</span>&gt; <span class="title">H</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    H.<span class="built_in">initialize</span>(heapElement,n);</span><br><span class="line">    cout&lt;&lt;H.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m,instruction,num;  <span class="comment">//m个操作和当前的操作</span></span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin&gt;&gt;num;</span><br><span class="line">                H.<span class="built_in">push</span>(num);</span><br><span class="line">                cout&lt;&lt;H.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                H.<span class="built_in">pop</span>();</span><br><span class="line">                cout&lt;&lt;H.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cin&gt;&gt;num;</span><br><span class="line">                <span class="keyword">int</span> *unsorted=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=num;k++)</span><br><span class="line">                    cin&gt;&gt;unsorted[k];</span><br><span class="line">                <span class="built_in">heapSort</span>(unsorted,num);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=num;k&gt;=<span class="number">1</span>;k--)</span><br><span class="line">                    cout&lt;&lt;unsorted[k]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                cout&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">delete</span> []unsorted;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1017-霍夫曼编码"><a href="#P1017-霍夫曼编码" class="headerlink" title="P1017:霍夫曼编码"></a>P1017:霍夫曼编码</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>一串小写字母组成的字符串（不超过1000000)。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>输出这个字符串通过Huffman编码后的长度。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdabcaba</span><br></pre></td></tr></table></figure><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 1024KiB for each test case.</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>样例中，’a’ 出现了4次，’b’ 出现了3次，’c’ 出现了2次，’d’ 出现了1次<br>编码为: ‘a’ : 0 ‘b’ : 10 ‘c’ : 110 ‘d’ : 111</p><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;扩充链表存储的二叉树类，增加私有成员WEP，表示Huffman树的WEP值，增加方法computeWEP，计算Huffman树的WEP值，增加方法makeTree，将left，right，element合并成一颗新树。<br>&emsp;&emsp;定义huffmanNode类，表示Huffman树的每个节点。私有成员包括linkedBinaryTree类的指针tree和权值weight。公有成员是对括号的运算符重载，返回weight值。声明类的友元函数HuffmanTree。</p><ul><li>HuffmanTree：用权值weight[1:n]构造Huffman树。首先创建一组hNode数组，对于每个hNode[i]，weight值由参数可以得到，tree通过new得到，调用makTree构造出一颗树。创建小根堆heap，heap的每一个元素都是huffmanNode类型，通过小根堆的initialize方法将一组单节点树hNode变成一个小根堆。然后不断从小根堆中取出两棵权值最小的树，将其合并成一个后放入小根堆。函数返回heap.top().tree。</li><li>computeWEP：计算Huffman树的WEP值。利用层次遍历，对于遍历到的每个节点，如果其标识为0，则其为内部节点，如果标识不为0，则其为外部节点，根据weight值和当前节点到根节点的路径长度（即层数-1）计算WEP。</li></ul><h3 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------小根堆----------------------</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minHeap</span>                               //小根堆</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *heap;                                <span class="comment">//保存堆的数组</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;                        <span class="comment">//数组长度</span></span><br><span class="line">    <span class="keyword">int</span> heapSize;                           <span class="comment">//堆的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">minHeap</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">minHeap</span>() &#123;<span class="keyword">delete</span> []heap;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heapSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heapSize;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> heap[<span class="number">1</span>];&#125;        <span class="comment">//返回堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                             <span class="comment">//删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;         <span class="comment">//向堆中插入一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(T* theHeap,<span class="keyword">int</span> theSize)</span></span>;<span class="comment">//初始化一个小根堆</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(T* a,<span class="keyword">int</span> n)</span></span>;              <span class="comment">//利用堆排序对数组a[1:n]进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deactivateArray</span><span class="params">()</span> </span>&#123;heap=<span class="literal">NULL</span>;&#125;     <span class="comment">//从堆的析构函数中保存数组a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">minHeap&lt;T&gt;::<span class="built_in">minHeap</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    heap=<span class="keyword">new</span> T[initialCapacity+<span class="number">1</span>];</span><br><span class="line">    arrayLength=initialCapacity+<span class="number">1</span>;</span><br><span class="line">    heapSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除堆顶元素</span></span><br><span class="line">    heap[<span class="number">1</span>].~<span class="built_in">T</span>();   <span class="comment">//删除最大元素</span></span><br><span class="line">    <span class="comment">//重新构造堆</span></span><br><span class="line">    T lastElement=heap[heapSize--];</span><br><span class="line">    <span class="comment">//从根开始，为lastElement寻找合适的位置</span></span><br><span class="line">    <span class="keyword">int</span> currentNode=<span class="number">1</span>,child=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(child&lt;=heapSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&gt;heap[child+<span class="number">1</span>])</span><br><span class="line">            child++;</span><br><span class="line">        <span class="keyword">if</span>(lastElement&lt;=heap[child])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        heap[currentNode]=heap[child];</span><br><span class="line">        currentNode=child;</span><br><span class="line">        child*=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode]=lastElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T &amp;theElement)</span><br><span class="line">&#123;<span class="comment">//向堆中插入一个元素</span></span><br><span class="line">    <span class="keyword">if</span>(heapSize==arrayLength<span class="number">-1</span>)     <span class="comment">//数组已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        T* newHeap=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">copy</span>(heap+<span class="number">1</span>,heap+arrayLength,newHeap+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">delete</span> []heap;</span><br><span class="line">        heap=newHeap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为theElement寻找插入位置</span></span><br><span class="line">    <span class="keyword">int</span> currentNode=++heapSize;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="number">1</span> &amp;&amp; theElement&lt;heap[currentNode/<span class="number">2</span>])</span><br><span class="line">    &#123;<span class="comment">//不能把theElement放入heap[currentNode]</span></span><br><span class="line">        heap[currentNode]=heap[currentNode/<span class="number">2</span>];</span><br><span class="line">        currentNode/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    heap[currentNode]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> minHeap&lt;T&gt;::<span class="built_in">initialize</span>(T *theHeap, <span class="keyword">int</span> theSize)</span><br><span class="line">&#123;<span class="comment">//初始化一个小根堆</span></span><br><span class="line">    <span class="keyword">delete</span> []heap;</span><br><span class="line">    heap=theHeap;</span><br><span class="line">    heapSize=theSize;</span><br><span class="line">    arrayLength=theSize+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> root=heapSize/<span class="number">2</span>;root&gt;=<span class="number">1</span>;root--)</span><br><span class="line">    &#123;</span><br><span class="line">        T rootElement=heap[root];   <span class="comment">//子树的根</span></span><br><span class="line">        <span class="comment">//寻找放置rootElement的位置</span></span><br><span class="line">        <span class="keyword">int</span> child=<span class="number">2</span>*root;</span><br><span class="line">        <span class="keyword">while</span>(child&lt;=heapSize)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(child&lt;heapSize &amp;&amp; heap[child]&gt;heap[child+<span class="number">1</span>])</span><br><span class="line">                child++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(rootElement&lt;=heap[child])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            heap[child/<span class="number">2</span>]=heap[child];</span><br><span class="line">            child*=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        heap[child/<span class="number">2</span>]=rootElement;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------队列----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> queueFront;     <span class="comment">//队列首元素的下一个位置（逆时针方向）</span></span><br><span class="line">    <span class="keyword">int</span> queueBack;      <span class="comment">//队列最后一个元素的位置</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//数组大小</span></span><br><span class="line">    T* queue;           <span class="comment">//存储队列的数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayQueue</span>() &#123;<span class="keyword">delete</span> []queue;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> queueFront==queueBack;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> (arrayLength+queueBack-queueFront)%arrayLength;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;                   <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;                    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                         <span class="comment">//删除队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;     <span class="comment">//元素插入到队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayQueue&lt;T&gt;::<span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    queue=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    queueFront=queueBack=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">front</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[(queueFront+<span class="number">1</span>)%arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">back</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[queueBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除队首元素</span></span><br><span class="line">    queueFront=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueFront].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//元素插入到队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入一个元素后队列满，需要扩充容量</span></span><br><span class="line">    <span class="keyword">if</span>((queueBack+<span class="number">1</span>)%arrayLength==queueFront)</span><br><span class="line">    &#123;</span><br><span class="line">        T* newQueue=<span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line">        <span class="keyword">int</span> start=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">        <span class="comment">//复制元素</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;<span class="number">2</span>) <span class="comment">//原队列中没有形成环</span></span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+start+arrayLength<span class="number">-1</span>,newQueue);</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//原队列中形成环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+arrayLength,newQueue);</span><br><span class="line">            <span class="built_in">copy</span>(queue,queue+queueBack+<span class="number">1</span>,newQueue+arrayLength-start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queueFront=<span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">        queueBack=arrayLength<span class="number">-2</span>;</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span> []queue;</span><br><span class="line">        queue=newQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    queueBack=(queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueBack]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------二叉树----------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span>           //二叉树节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T element;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *leftChild, *rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//三个构造函数</span></span><br><span class="line">    <span class="built_in">binaryTreeNode</span>() &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement):<span class="built_in">element</span>(theElement) &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement,binaryTreeNode&lt;T&gt;* theLeftChild,binaryTreeNode&lt;T&gt;* theRightChild):<span class="built_in">element</span>(theElement)</span><br><span class="line">    &#123;</span><br><span class="line">        leftChild=theLeftChild;</span><br><span class="line">        rightChild=theRightChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedBinaryTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    binaryTreeNode&lt;T&gt; *root;                                <span class="comment">//根节点指针</span></span><br><span class="line">    <span class="keyword">int</span> treeSize;                                           <span class="comment">//树的节点个数</span></span><br><span class="line">    <span class="keyword">int</span> WEP;                                                <span class="comment">//Huffman树的WEP值</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*visit)</span><span class="params">(binaryTreeNode&lt;T&gt; *)</span></span>;              <span class="comment">//访问函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;             <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;              <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;            <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> </span>&#123;<span class="keyword">delete</span> t;&#125;   <span class="comment">//删除t指向的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> </span>&#123;cout&lt;&lt;t-&gt;element&lt;&lt;<span class="string">&quot; &quot;</span>;&#125;   <span class="comment">//输出节点t的element值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;                 <span class="comment">//计算以t为根节点的子树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nodeNumber</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;             <span class="comment">//计算以t为根节点的子树的节点个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">linkedBinaryTree</span>() &#123;root=<span class="literal">NULL</span>; treeSize=<span class="number">0</span>; WEP=<span class="number">0</span>;&#125;</span><br><span class="line">    ~<span class="built_in">linkedBinaryTree</span>() &#123;<span class="built_in">erase</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">preOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">inOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">postOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrderOutput</span><span class="params">()</span>  <span class="comment">//后序输出序列</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">postOrder</span>(output);cout&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(<span class="keyword">void</span>(*)(binaryTreeNode&lt;T&gt;*))</span></span>;   <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span>        <span class="comment">//删除二叉树</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(dispose);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        treeSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">height</span>(root);&#125;           <span class="comment">//计算二叉树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NodeNumber</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">nodeNumber</span>(root);&#125;   <span class="comment">//计算二叉树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> num)</span></span>;                           <span class="comment">//二叉树的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeNodeNumber</span><span class="params">()</span> <span class="keyword">const</span></span>;                     <span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeHeight</span><span class="params">()</span> <span class="keyword">const</span></span>;                         <span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">    <span class="function">binaryTreeNode&lt;T&gt;* <span class="title">buildTree</span><span class="params">(T* pre,T* in,<span class="keyword">int</span> len)</span></span>; <span class="comment">//通过前序序列pre和中序序列in构造一颗二叉树,len表示序列长度</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(T* pre,T* in,<span class="keyword">int</span> len)</span></span>;                  <span class="comment">//将构造的二叉树放到对象中，即更新root和treeSize</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">makeTree</span><span class="params">(<span class="keyword">const</span> T&amp; element,linkedBinaryTree&lt;T&gt;&amp; left,linkedBinaryTree&lt;T&gt;&amp; right)</span></span>;   <span class="comment">//创建一个二叉树，element为根节点元素，left左子树，right为右子树</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">computeWEP</span><span class="params">(<span class="keyword">int</span> weight[])</span></span>;                       <span class="comment">//计算Huffman树的WEP值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*linkedBinaryTree&lt;T&gt;::visit)(binaryTreeNode&lt;T&gt; *)=<span class="literal">NULL</span>;   <span class="comment">//类的静态成员的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">preOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">inOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;leftChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">postOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;rightChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">height</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl=<span class="built_in">height</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr=<span class="built_in">height</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl&gt;hr) <span class="keyword">return</span> ++hl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++hr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">nodeNumber</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nl=<span class="built_in">nodeNumber</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> nr=<span class="built_in">nodeNumber</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">return</span> nl+nr+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">levelOrder</span>(<span class="built_in"><span class="keyword">void</span></span> (*theVisit)(binaryTreeNode&lt;T&gt; *))</span><br><span class="line">&#123;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">theVisit</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">initialize</span>(<span class="keyword">int</span> num)</span><br><span class="line">&#123;<span class="comment">//二叉树的初始化</span></span><br><span class="line"> <span class="comment">//这棵树有num个节点，编号为1~num，根节点为1</span></span><br><span class="line"> <span class="comment">//读入编号为i的节点的左孩子a，右孩子b，-1表示该位置没有节点</span></span><br><span class="line"></span><br><span class="line">    root=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(<span class="number">1</span>);</span><br><span class="line">    treeSize=num;</span><br><span class="line">    <span class="keyword">int</span> *left=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];   <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">int</span> *right=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];  <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        cin&gt;&gt;left[i]&gt;&gt;right[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur=t-&gt;element;     <span class="comment">//当前节点的element值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用层次遍历进行初始化</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;leftChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(left[cur]);</span><br><span class="line">        <span class="keyword">if</span>(right[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;rightChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(right[cur]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//初始化完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> []left;</span><br><span class="line">            <span class="keyword">delete</span> []right;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeNodeNumber</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的节点个数</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">nodeNumber</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeHeight</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的高度</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">height</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">binaryTreeNode&lt;T&gt;* linkedBinaryTree&lt;T&gt;::<span class="built_in">buildTree</span>(T *pre, T *in, <span class="keyword">int</span> len)</span><br><span class="line">&#123;<span class="comment">//根据前序序列pre和中序序列in构建二叉树</span></span><br><span class="line"> <span class="comment">//len表示序列长度</span></span><br><span class="line"> <span class="comment">//返回二叉树的根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列长度小于等于0，不需要继续构造</span></span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    binaryTreeNode&lt;T&gt;* subRoot=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(pre[<span class="number">0</span>]);   <span class="comment">//pre[0]为根节点</span></span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//在中序序列中查找pre[0]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="keyword">if</span>(in[i]==pre[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            index=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//递归构造左子树和右子树</span></span><br><span class="line">    subRoot-&gt;leftChild=<span class="built_in">buildTree</span>(pre+<span class="number">1</span>,in,index);</span><br><span class="line">    subRoot-&gt;rightChild=<span class="built_in">buildTree</span>(pre+index+<span class="number">1</span>,in+index+<span class="number">1</span>,len-index<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> subRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">update</span>(T* pre,T* in,<span class="keyword">int</span> len)</span><br><span class="line">&#123;<span class="comment">//将构造的二叉树放到对象中，即更新root和treeSize</span></span><br><span class="line">    root=<span class="built_in">buildTree</span>(pre, in, len);</span><br><span class="line">    treeSize=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">makeTree</span>(<span class="keyword">const</span> T &amp;element, linkedBinaryTree&lt;T&gt; &amp;left, linkedBinaryTree&lt;T&gt; &amp;right)</span><br><span class="line">&#123;<span class="comment">//将left,right和element合并成一颗新树</span></span><br><span class="line">    root=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(element,left.root,right.root);</span><br><span class="line">    treeSize=left.treeSize+right.treeSize+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    left.root=right.root=<span class="literal">NULL</span>;</span><br><span class="line">    left.treeSize=right.treeSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">computeWEP</span>(<span class="keyword">int</span> weight[])</span><br><span class="line">&#123;<span class="comment">//计算Huffman树的WEP值</span></span><br><span class="line">    <span class="keyword">int</span> road=<span class="number">0</span>;     <span class="comment">//当前节点到根节点的路径长度</span></span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> length=q.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(length&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            binaryTreeNode&lt;T&gt;* cur;</span><br><span class="line">            cur=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            length--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;element!=<span class="number">0</span>)</span><br><span class="line">                WEP+=weight[cur-&gt;element]*road;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;leftChild!=<span class="literal">NULL</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(cur-&gt;leftChild);</span><br><span class="line">            <span class="keyword">if</span>(cur-&gt;rightChild!=<span class="literal">NULL</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(cur-&gt;rightChild);</span><br><span class="line">        &#125;</span><br><span class="line">        road++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(WEP==<span class="number">0</span>)  <span class="comment">//Huffman树只有根节点</span></span><br><span class="line">        <span class="keyword">return</span> weight[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> WEP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* <span class="title">HuffmanTree</span><span class="params">(T weight[],<span class="keyword">int</span> n)</span></span>;       <span class="comment">//用权值weight[1:n]构造霍夫曼树,n&gt;=1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">huffmanNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* HuffmanTree&lt;T&gt;(T weight[],<span class="keyword">int</span> n); <span class="comment">//友元函数的声明</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">T</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> weight;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; *tree;</span><br><span class="line">    T weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* <span class="title">HuffmanTree</span><span class="params">(T weight[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//用权值weight[1:n]构造霍夫曼树,n&gt;=1</span></span><br><span class="line">    <span class="comment">//创建一组单节点树hNode数组</span></span><br><span class="line">    huffmanNode&lt;T&gt;* hNode=<span class="keyword">new</span> huffmanNode&lt;T&gt;[n+<span class="number">1</span>];</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; emptyTree;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hNode[i].weight=weight[i];</span><br><span class="line">        hNode[i].tree=<span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">        hNode[i].tree-&gt;<span class="built_in">makeTree</span>(i,emptyTree,emptyTree);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一组单节点树hNode[1:n]变成一个小根堆</span></span><br><span class="line">    minHeap&lt;huffmanNode&lt;T&gt;&gt; <span class="built_in">heap</span>(<span class="number">1</span>);</span><br><span class="line">    heap.<span class="built_in">initialize</span>(hNode,n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断从最小堆中取出两颗树合并成一个放入，直到剩下一颗</span></span><br><span class="line">    huffmanNode&lt;T&gt; w,x,y;</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; *z;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//从最小堆中选出两颗权值最小的树</span></span><br><span class="line">        x=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        y=heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并成一颗树w，放入堆</span></span><br><span class="line">        z=<span class="keyword">new</span> linkedBinaryTree&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line">        z-&gt;<span class="built_in">makeTree</span>(<span class="number">0</span>,*x.tree,*y.tree);</span><br><span class="line">        w.weight=x.weight+y.weight;</span><br><span class="line">        w.tree=z;</span><br><span class="line">        heap.<span class="built_in">push</span>(w);</span><br><span class="line">        <span class="keyword">delete</span> x.tree;</span><br><span class="line">        <span class="keyword">delete</span> y.tree;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> heap.<span class="built_in">top</span>().tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str;</span><br><span class="line">    cin&gt;&gt;str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> weight[<span class="number">27</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">size</span>();i++)</span><br><span class="line">        t[str.<span class="built_in">at</span>(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(t[i]!=<span class="number">0</span>)</span><br><span class="line">            weight[++size]=t[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt;* p=<span class="built_in">HuffmanTree</span>(weight,size);</span><br><span class="line">    cout&lt;&lt;p-&gt;<span class="built_in">computeWEP</span>(weight)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.模板类声明友元的函数如果是模板函数，声明时需要在友元函数的函数名之后参数之前加上<T>。<br>2.堆排序是不稳定的。<br>3.根据Huffman树求Huffman编码，可以对Huffman树进行后序遍历，利用栈记录走过的分支，如果是左分支，栈内进0，如果是右分支，栈内进1，直到到达一个外部节点，此时栈内记录的就是该节点对应的Huffman编码，然后继续后序遍历，直到遍历结束。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;优先级队列中，每个元素都有一个优先级。在最小优先级队列中，查找和删除的元素都是优先级最小的元素。在最大优先级队列中，查找和删除的元素都是优先级最大的元素。优先级队列性能较好的是堆结构，一个大根堆（小根堆）既是大根树（小根树），也是完全二叉树。删除和插入的时间复杂度均为O(logn)，初始化的时间复杂度为O(n)。利用堆结构实现堆排序，时间复杂度为O(nlogn)。利用堆和二叉树，实现Huffman编码，保证没有一个编码是另一个编码的前缀，并且WEP最小。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="队列" scheme="https://tongyiheng.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="树型结构" scheme="https://tongyiheng.github.io/tags/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84/"/>
    
    <category term="堆" scheme="https://tongyiheng.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（九）二叉树操作</title>
    <link href="https://tongyiheng.github.io/2020/12/23/DSA/DSA_9/"/>
    <id>https://tongyiheng.github.io/2020/12/23/DSA/DSA_9/</id>
    <published>2020-12-23T11:01:24.000Z</published>
    <updated>2021-04-10T01:00:56.633Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;树型结构适合表示层次关系。本文通过链表实现二叉树的操作，包括前序遍历、中序遍历、后序遍历、层次遍历、计算节点数目和高度，以及通过前序序列和中序序列构造出二叉树。</p><span id="more"></span><h2 id="P1014-二叉树基础"><a href="#P1014-二叉树基础" class="headerlink" title="P1014:二叉树基础"></a>P1014:二叉树基础</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>创建二叉树类。二叉树的存储结构使用链表。提供操作:前序遍历、中序遍历、后序遍历、层次遍历、计算二叉树结点数目、计算二叉树高度。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行为一个数字n(10&lt;=n&lt;=100000)，表示这棵树有n个节点，编号为1 ~ n。<br>之后n行每行两个数字，第i行的两个数字a、b表示编号为i的节点的左孩子节点为a，右孩子节点为b，-1表示该位置没有节点。<br>保证数据有效，根节点为1。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>第一行，n个数字，表示该树的层次遍历。<br>第二行，n个数字，第i个数字表示以i节点为根的子树的节点数目。<br>第三行，n个数字，第i个数字表示以i节点为根的子树的高度。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例3"><a href="#样例3" class="headerlink" title="样例3"></a>样例3</h4><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">-1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">9</span> <span class="number">7</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">10</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">6</span> <span class="number">9</span> <span class="number">7</span> <span class="number">10</span> </span><br><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br></pre></td></tr></table></figure><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>请仔细读题，注意建树过程。</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;封装二叉树类linkedBinaryTree，二叉树的存储结构使用链表，每个节点包括元素值element，左孩子leftChild，右孩子rightChild。节点类的构造函数有三个，默认构造函数，通过theElement构造，通过theElement，theLeftChild，theRightChild构造。二叉树类中，非静态的私有成员包括根节点root，树的节点个数treeSize，求以t为根节点的子树的高度height方法，求以t为根节点的子树的节点个数nodeNumber方法，静态的私有成员包括访问函数visit，前序遍历preOrder，中序遍历inOrder，后序遍历postOrder，删除t指向的节点dispose方法。公有成员包括构造函数，析构函数，empty方法，size方法，前序遍历，中序遍历，后序遍历，层次遍历，删除二叉树的erase方法，求二叉树的节点个数和高度，初始化二叉树initialize方法，输出以二叉树所有节点为根节点的子树的高度和节点个数。<br>前序遍历按照根、左、右的顺序访问二叉树的节点，中序遍历按照左、根、右的顺序访问二叉树的节点，后序遍历按照左、右、跟的顺序访问二叉树的节点。三种遍历方法都用递归实现。层次遍历利用队列的“先进先出”实现。<br>erase：删除整颗二叉树。通过后序遍历，对访问到的每一个节点调用dispose方法执行删除操作，最后将root置空，treeSize置零。<br>已知根节点求树的节点个数和高度，都用递归实现。求节点个数时，先求出左右子树的节点个数，相加再加一得到树的节点个数。求高度时，先求出左右子树的高度，二者的较大值加一得到树的高度。<br>初始化二叉树，首先将每个节点的左孩子和右孩子分别存入两个数组，然后利用层次遍历，对遍历到的当前的元素，根据左孩子和右孩子，构造相应的节点。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> queueFront;     <span class="comment">//队列首元素的下一个位置（逆时针方向）</span></span><br><span class="line">    <span class="keyword">int</span> queueBack;      <span class="comment">//队列最后一个元素的位置</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//数组大小</span></span><br><span class="line">    T* queue;           <span class="comment">//存储队列的数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayQueue</span>() &#123;<span class="keyword">delete</span> []queue;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> queueFront==queueBack;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> (arrayLength+queueBack-queueFront)%arrayLength;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;                   <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;                    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                         <span class="comment">//删除队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;     <span class="comment">//元素插入到队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayQueue&lt;T&gt;::<span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    queue=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    queueFront=queueBack=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">front</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[(queueFront+<span class="number">1</span>)%arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">back</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[queueBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除队首元素</span></span><br><span class="line">    queueFront=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueFront].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//元素插入到队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入一个元素后队列满，需要扩充容量</span></span><br><span class="line">    <span class="keyword">if</span>((queueBack+<span class="number">1</span>)%arrayLength==queueFront)</span><br><span class="line">    &#123;</span><br><span class="line">        T* newQueue=<span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line">        <span class="keyword">int</span> start=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">        <span class="comment">//复制元素</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;<span class="number">2</span>) <span class="comment">//原队列中没有形成环</span></span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+start+arrayLength<span class="number">-1</span>,newQueue);</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//原队列中形成环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+arrayLength,newQueue);</span><br><span class="line">            <span class="built_in">copy</span>(queue,queue+queueBack+<span class="number">1</span>,newQueue+arrayLength-start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queueFront=<span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">        queueBack=arrayLength<span class="number">-2</span>;</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span> []queue;</span><br><span class="line">        queue=newQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    queueBack=(queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueBack]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span>           //二叉树节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T element;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *leftChild, *rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//三个构造函数</span></span><br><span class="line">    <span class="built_in">binaryTreeNode</span>() &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement):<span class="built_in">element</span>(theElement) &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement,binaryTreeNode&lt;T&gt;* theLeftChild,binaryTreeNode&lt;T&gt;* theRightChild):<span class="built_in">element</span>(theElement)</span><br><span class="line">    &#123;</span><br><span class="line">        leftChild=theLeftChild;</span><br><span class="line">        rightChild=theRightChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedBinaryTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    binaryTreeNode&lt;T&gt; *root;                                <span class="comment">//根节点指针</span></span><br><span class="line">    <span class="keyword">int</span> treeSize;                                           <span class="comment">//树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*visit)</span><span class="params">(binaryTreeNode&lt;T&gt; *)</span></span>;              <span class="comment">//访问函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;             <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;              <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;            <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> </span>&#123;<span class="keyword">delete</span> t;&#125;   <span class="comment">//删除t指向的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;                 <span class="comment">//计算以t为根节点的子树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nodeNumber</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;             <span class="comment">//计算以t为根节点的子树的节点个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">linkedBinaryTree</span>() &#123;root=<span class="literal">NULL</span>; treeSize=<span class="number">0</span>;&#125;</span><br><span class="line">    ~<span class="built_in">linkedBinaryTree</span>() &#123;<span class="built_in">erase</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">preOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">inOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">postOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(<span class="keyword">void</span>(*)(binaryTreeNode&lt;T&gt;*))</span></span>;       <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span>    <span class="comment">//删除二叉树</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(dispose);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        treeSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">height</span>(root);&#125;           <span class="comment">//计算二叉树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NodeNumber</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">nodeNumber</span>(root);&#125;   <span class="comment">//计算二叉树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> num)</span></span>;                           <span class="comment">//二叉树的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeNodeNumber</span><span class="params">()</span> <span class="keyword">const</span></span>;                     <span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeHeight</span><span class="params">()</span> <span class="keyword">const</span></span>;                         <span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*linkedBinaryTree&lt;T&gt;::visit)(binaryTreeNode&lt;T&gt;*)=<span class="literal">NULL</span>;    <span class="comment">//类的静态成员的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">preOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">inOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;leftChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">postOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;rightChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">height</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl=<span class="built_in">height</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr=<span class="built_in">height</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl&gt;hr) <span class="keyword">return</span> ++hl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++hr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">nodeNumber</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nl=<span class="built_in">nodeNumber</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> nr=<span class="built_in">nodeNumber</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">return</span> nl+nr+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">levelOrder</span>(<span class="built_in"><span class="keyword">void</span></span> (*theVisit)(binaryTreeNode&lt;T&gt; *))</span><br><span class="line">&#123;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">theVisit</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">initialize</span>(<span class="keyword">int</span> num)</span><br><span class="line">&#123;<span class="comment">//二叉树的初始化</span></span><br><span class="line"> <span class="comment">//这棵树有num个节点，编号为1~num，根节点为1</span></span><br><span class="line"> <span class="comment">//读入编号为i的节点的左孩子a，右孩子b，-1表示该位置没有节点</span></span><br><span class="line"></span><br><span class="line">    root=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(<span class="number">1</span>);</span><br><span class="line">    treeSize=num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *left=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];   <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">int</span> *right=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];  <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        cin&gt;&gt;left[i]&gt;&gt;right[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur=t-&gt;element;     <span class="comment">//当前节点的element值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用层次遍历进行初始化</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;leftChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(left[cur]);</span><br><span class="line">        <span class="keyword">if</span>(right[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;rightChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(right[cur]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//初始化完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> []left;</span><br><span class="line">            <span class="keyword">delete</span> []right;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeNodeNumber</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的节点个数</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">nodeNumber</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeHeight</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的高度</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">height</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(binaryTreeNode&lt;T&gt;* t)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//输出节点的element值</span></span><br><span class="line">    cout&lt;&lt;t-&gt;element&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; BT;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    BT.<span class="built_in">initialize</span>(n);</span><br><span class="line"></span><br><span class="line">    BT.<span class="built_in">levelOrder</span>(output);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    BT.<span class="built_in">subtreeNodeNumber</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    BT.<span class="built_in">subtreeHeight</span>();</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1015-二叉树遍历"><a href="#P1015-二叉树遍历" class="headerlink" title="P1015:二叉树遍历"></a>P1015:二叉树遍历</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>接收二叉树前序序列和中序序列(各元素各不相同)，输出该二叉树的后序序列。</p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>输入有三行：<br>第一行为数字n。<br>第二行有n个数字，表示二叉树的前序遍历。<br>第三行有n个数字，表示二叉树的中序遍历。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>输出一行，表示该二叉树的后序遍历序列。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;在二叉树类linkedBinaryTree的基础上增加方法buildTree和update。buildTree的参数为前序序列pre，中序序列in，序列长度len，返回构造出的二叉树的根节点。buildTree通过递归实现，根据前序序列中的pre[0]，在中序序列中查找pre[0]的位置，根据pre[0]将中序序列分为左、根、右三部分，对于每一个部分，按照相同的方法进行构造，根据递归调用即可。update根据buildTree的返回值和序列长度，更新私有成员root和treeSize。</p><h3 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> queueFront;     <span class="comment">//队列首元素的下一个位置（逆时针方向）</span></span><br><span class="line">    <span class="keyword">int</span> queueBack;      <span class="comment">//队列最后一个元素的位置</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//数组大小</span></span><br><span class="line">    T* queue;           <span class="comment">//存储队列的数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayQueue</span>() &#123;<span class="keyword">delete</span> []queue;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> queueFront==queueBack;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> (arrayLength+queueBack-queueFront)%arrayLength;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;                   <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;                    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                         <span class="comment">//删除队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;     <span class="comment">//元素插入到队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayQueue&lt;T&gt;::<span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    queue=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    queueFront=queueBack=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">front</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[(queueFront+<span class="number">1</span>)%arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">back</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[queueBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除队首元素</span></span><br><span class="line">    queueFront=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueFront].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//元素插入到队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入一个元素后队列满，需要扩充容量</span></span><br><span class="line">    <span class="keyword">if</span>((queueBack+<span class="number">1</span>)%arrayLength==queueFront)</span><br><span class="line">    &#123;</span><br><span class="line">        T* newQueue=<span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line">        <span class="keyword">int</span> start=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">        <span class="comment">//复制元素</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;<span class="number">2</span>) <span class="comment">//原队列中没有形成环</span></span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+start+arrayLength<span class="number">-1</span>,newQueue);</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//原队列中形成环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+arrayLength,newQueue);</span><br><span class="line">            <span class="built_in">copy</span>(queue,queue+queueBack+<span class="number">1</span>,newQueue+arrayLength-start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queueFront=<span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">        queueBack=arrayLength<span class="number">-2</span>;</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span> []queue;</span><br><span class="line">        queue=newQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    queueBack=(queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueBack]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binaryTreeNode</span>           //二叉树节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T element;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *leftChild, *rightChild;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//三个构造函数</span></span><br><span class="line">    <span class="built_in">binaryTreeNode</span>() &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement):<span class="built_in">element</span>(theElement) &#123;leftChild=rightChild=<span class="literal">NULL</span>;&#125;</span><br><span class="line">    <span class="built_in">binaryTreeNode</span>(<span class="keyword">const</span> T&amp; theElement,binaryTreeNode&lt;T&gt;* theLeftChild,binaryTreeNode&lt;T&gt;* theRightChild):<span class="built_in">element</span>(theElement)</span><br><span class="line">    &#123;</span><br><span class="line">        leftChild=theLeftChild;</span><br><span class="line">        rightChild=theRightChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedBinaryTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    binaryTreeNode&lt;T&gt; *root;                                <span class="comment">//根节点指针</span></span><br><span class="line">    <span class="keyword">int</span> treeSize;                                           <span class="comment">//树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">void</span> <span class="params">(*visit)</span><span class="params">(binaryTreeNode&lt;T&gt; *)</span></span>;              <span class="comment">//访问函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;             <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;              <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span></span>;            <span class="comment">//后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> </span>&#123;<span class="keyword">delete</span> t;&#125;   <span class="comment">//删除t指向的节点</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> </span>&#123;cout&lt;&lt;t-&gt;element&lt;&lt;<span class="string">&quot; &quot;</span>;&#125;   <span class="comment">//输出节点t的element值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;                 <span class="comment">//计算以t为根节点的子树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nodeNumber</span><span class="params">(binaryTreeNode&lt;T&gt; *t)</span> <span class="keyword">const</span></span>;             <span class="comment">//计算以t为根节点的子树的节点个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">linkedBinaryTree</span>() &#123;root=<span class="literal">NULL</span>; treeSize=<span class="number">0</span>;&#125;</span><br><span class="line">    ~<span class="built_in">linkedBinaryTree</span>() &#123;<span class="built_in">erase</span>();&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> treeSize;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">preOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">inOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(<span class="keyword">void</span>(*theVisit)(binaryTreeNode&lt;T&gt;*))</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        visit=theVisit;</span><br><span class="line">        <span class="built_in">postOrder</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrderOutput</span><span class="params">()</span>  <span class="comment">//后序输出序列</span></span></span><br><span class="line"><span class="function">    </span>&#123;<span class="built_in">postOrder</span>(output);cout&lt;&lt;endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(<span class="keyword">void</span>(*)(binaryTreeNode&lt;T&gt;*))</span></span>;   <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span>        <span class="comment">//删除二叉树</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(dispose);</span><br><span class="line">        root=<span class="literal">NULL</span>;</span><br><span class="line">        treeSize=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">height</span>(root);&#125;           <span class="comment">//计算二叉树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">NodeNumber</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">nodeNumber</span>(root);&#125;   <span class="comment">//计算二叉树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> num)</span></span>;                           <span class="comment">//二叉树的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeNodeNumber</span><span class="params">()</span> <span class="keyword">const</span></span>;                     <span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">subtreeHeight</span><span class="params">()</span> <span class="keyword">const</span></span>;                         <span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">    <span class="function">binaryTreeNode&lt;T&gt;* <span class="title">buildTree</span><span class="params">(T* pre,T* in,<span class="keyword">int</span> len)</span></span>; <span class="comment">//通过前序序列pre和中序序列in构造一颗二叉树,len表示序列长度</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(T* pre,T* in,<span class="keyword">int</span> len)</span></span>;                  <span class="comment">//将构造的二叉树放到对象中，即更新root和treeSize</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*linkedBinaryTree&lt;T&gt;::visit)(binaryTreeNode&lt;T&gt; *)=<span class="literal">NULL</span>;   <span class="comment">//类的静态成员的初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">preOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">preOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">inOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;leftChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">        <span class="built_in">inOrder</span>(t-&gt;rightChild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">postOrder</span>(binaryTreeNode&lt;T&gt; *t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="built_in">postOrder</span>(t-&gt;rightChild);</span><br><span class="line">        linkedBinaryTree&lt;T&gt;::<span class="built_in">visit</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">height</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> hl=<span class="built_in">height</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> hr=<span class="built_in">height</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">if</span>(hl&gt;hr) <span class="keyword">return</span> ++hl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ++hr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">nodeNumber</span>(binaryTreeNode&lt;T&gt; *t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nl=<span class="built_in">nodeNumber</span>(t-&gt;leftChild);</span><br><span class="line">    <span class="keyword">int</span> nr=<span class="built_in">nodeNumber</span>(t-&gt;rightChild);</span><br><span class="line">    <span class="keyword">return</span> nl+nr+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">levelOrder</span>(<span class="built_in"><span class="keyword">void</span></span> (*theVisit)(binaryTreeNode&lt;T&gt; *))</span><br><span class="line">&#123;</span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">theVisit</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">initialize</span>(<span class="keyword">int</span> num)</span><br><span class="line">&#123;<span class="comment">//二叉树的初始化</span></span><br><span class="line"> <span class="comment">//这棵树有num个节点，编号为1~num，根节点为1</span></span><br><span class="line"> <span class="comment">//读入编号为i的节点的左孩子a，右孩子b，-1表示该位置没有节点</span></span><br><span class="line"></span><br><span class="line">    root=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(<span class="number">1</span>);</span><br><span class="line">    treeSize=num;</span><br><span class="line">    <span class="keyword">int</span> *left=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];   <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">int</span> *right=<span class="keyword">new</span> <span class="keyword">int</span>[num+<span class="number">1</span>];  <span class="comment">//右孩子</span></span><br><span class="line"></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        cin&gt;&gt;left[i]&gt;&gt;right[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur=t-&gt;element;     <span class="comment">//当前节点的element值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用层次遍历进行初始化</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(left[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;leftChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(left[cur]);</span><br><span class="line">        <span class="keyword">if</span>(right[cur]!=<span class="number">-1</span>)</span><br><span class="line">            t-&gt;rightChild=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(right[cur]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//初始化完成</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">delete</span> []left;</span><br><span class="line">            <span class="keyword">delete</span> []right;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeNodeNumber</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的节点个数</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的节点个数</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">nodeNumber</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">subtreeHeight</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//输出二叉树中所有节点为根的子树的高度</span></span><br><span class="line">    <span class="keyword">int</span> *result=<span class="keyword">new</span> <span class="keyword">int</span>[treeSize+<span class="number">1</span>];    <span class="comment">//result[i]表示以节点i为根的子树的高度</span></span><br><span class="line">    binaryTreeNode&lt;T&gt; *t=root;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">    arrayQueue&lt;binaryTreeNode&lt;T&gt;*&gt; q;</span><br><span class="line">    <span class="comment">//层次遍历</span></span><br><span class="line">    <span class="keyword">while</span> (t!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=t-&gt;element;</span><br><span class="line">        result[cur]=<span class="built_in">height</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t-&gt;leftChild) q.<span class="built_in">push</span>(t-&gt;leftChild);</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;rightChild) q.<span class="built_in">push</span>(t-&gt;rightChild);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">            t=q.<span class="built_in">front</span>();</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//遍历结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=treeSize;i++)</span><br><span class="line">                cout&lt;&lt;result[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="keyword">delete</span> []result;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">binaryTreeNode&lt;T&gt;* linkedBinaryTree&lt;T&gt;::<span class="built_in">buildTree</span>(T *pre, T *in, <span class="keyword">int</span> len)</span><br><span class="line">&#123;<span class="comment">//根据前序序列pre和中序序列in构建二叉树</span></span><br><span class="line"> <span class="comment">//len表示序列长度</span></span><br><span class="line"> <span class="comment">//返回二叉树的根节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列长度小于等于0，不需要继续构造</span></span><br><span class="line">    <span class="keyword">if</span>(len&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    binaryTreeNode&lt;T&gt;* subRoot=<span class="keyword">new</span> binaryTreeNode&lt;T&gt;(pre[<span class="number">0</span>]);   <span class="comment">//pre[0]为根节点</span></span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//在中序序列中查找pre[0]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        <span class="keyword">if</span>(in[i]==pre[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            index=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//递归构造左子树和右子树</span></span><br><span class="line">    subRoot-&gt;leftChild=<span class="built_in">buildTree</span>(pre+<span class="number">1</span>,in,index);</span><br><span class="line">    subRoot-&gt;rightChild=<span class="built_in">buildTree</span>(pre+index+<span class="number">1</span>,in+index+<span class="number">1</span>,len-index<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> subRoot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> linkedBinaryTree&lt;T&gt;::<span class="built_in">update</span>(T* pre,T* in,<span class="keyword">int</span> len)</span><br><span class="line">&#123;<span class="comment">//将构造的二叉树放到对象中，即更新root和treeSize</span></span><br><span class="line">    root=<span class="built_in">buildTree</span>(pre, in, len);</span><br><span class="line">    treeSize=len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    linkedBinaryTree&lt;<span class="keyword">int</span>&gt; BT;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> *pre=<span class="keyword">new</span> <span class="keyword">int</span>[n],*in=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;pre[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;in[i];</span><br><span class="line"></span><br><span class="line">    BT.<span class="built_in">update</span>(pre,in,n);</span><br><span class="line">    BT.<span class="built_in">postOrderOutput</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []pre;</span><br><span class="line">    <span class="keyword">delete</span> []in;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.初始化时需要注意第i行的两个数字a、b表示的是编号为i的节点的左孩子和右孩子，不是位置为i的节点，因此在利用层次遍历进行初始化时，首先将每个节点的左孩子和右孩子分别存入两个数组，然后根据当前节点的element值在数组中找到左孩子和右孩子。<br>2.类的静态数据成员需要在类内定义，在类外进行初始化，如果没有初始化，也就意味着没有对其分配内存，在连接时会因为找不到对应的内存单元导致连接报错。<br>函数指针的初始化的语法格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*linkedBinaryTree&lt;T&gt;::visit)(binaryTreeNode&lt;T&gt; *)=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;树型结构适合表示层次关系。本文通过链表实现二叉树的操作，包括前序遍历、中序遍历、后序遍历、层次遍历、计算节点数目和高度，以及通过前序序列和中序序列构造出二叉树。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="递归" scheme="https://tongyiheng.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="队列" scheme="https://tongyiheng.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="树型结构" scheme="https://tongyiheng.github.io/tags/%E6%A0%91%E5%9E%8B%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://tongyiheng.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（八）散列表</title>
    <link href="https://tongyiheng.github.io/2020/11/22/DSA/DSA_8/"/>
    <id>https://tongyiheng.github.io/2020/11/22/DSA/DSA_8/</id>
    <published>2020-11-22T10:47:34.000Z</published>
    <updated>2021-04-10T01:01:00.087Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;散列表（哈希表）有两种实现方法，一种是线性探查，一种是链表散列。散列常作为字典的表示方法，通过哈希函数把字典的数对映射到散列表的具体位置，散列表的每一个位置叫做一个桶。散列表的最坏性能与线性表相同，因此性能很好，但是缺点是溢出后无法对散列表进行扩容（只能重新建立一个新的散列表）。所以在实际应用过程中散列表一般会开的比较大，保证不会溢出，同时需要选择一个好的除数减少冲突。本文的两个问题在实现过程中通过关键字模拟散列表的操作，即散列表每个位置的元素是关键字而不是数对。</p><span id="more"></span><h2 id="P1012-线性开型寻址"><a href="#P1012-线性开型寻址" class="headerlink" title="P1012:线性开型寻址"></a>P1012:线性开型寻址</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>给定散列函数的除数D和操作数m，输出每次操作后的状态。<br>有以下三种操作：<br>1.插入x，若散列表已存在x，输出“Existed”，否则插入x到散列表中，输出所在的下标。<br>2.查询x，若散列表不含有x，输出“-1”，否则输出x对应下标。<br>3.删除x，若散列表不含有x，输出“Not Found”，否则输出删除x过程中移动元素的个数。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p><strong>使用线性开型寻址实现</strong></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行两个整数D，m。分别代表散列函数的除数D和操作数m。<br>接下来m行，每行两个整数opt和x，分别代表操作类型和操作数。<br>若opt为0，代表插入x。<br>若opt为1，代表查询x。<br>若opt为2，代表删除x。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>按要求输出。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">12</span></span><br><span class="line"><span class="number">1</span> <span class="number">21</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">23</span></span><br><span class="line"><span class="number">0</span> <span class="number">26</span></span><br><span class="line"><span class="number">0</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="number">30</span></span><br><span class="line"><span class="number">0</span> <span class="number">84</span></span><br><span class="line"><span class="number">0</span> <span class="number">15</span></span><br><span class="line"><span class="number">0</span> <span class="number">54</span></span><br><span class="line"><span class="number">2</span> <span class="number">15</span></span><br><span class="line"><span class="number">2</span> <span class="number">84</span></span><br><span class="line"><span class="number">1</span> <span class="number">54</span></span><br><span class="line"><span class="number">2</span> <span class="number">54</span></span><br><span class="line"><span class="number">0</span> <span class="number">89</span></span><br><span class="line"><span class="number">1</span> <span class="number">89</span></span><br><span class="line"><span class="number">0</span> <span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">48</span></span><br><span class="line"><span class="number">2</span> <span class="number">89</span></span><br><span class="line"><span class="number">0</span> <span class="number">60</span></span><br><span class="line"><span class="number">0</span> <span class="number">24</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">24</span></span><br><span class="line"><span class="number">0</span> <span class="number">31</span></span><br><span class="line"><span class="number">2</span> <span class="number">60</span></span><br><span class="line"><span class="number">2</span> <span class="number">48</span></span><br><span class="line"><span class="number">0</span> <span class="number">49</span></span><br><span class="line"><span class="number">0</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">33</span></span><br><span class="line"><span class="number">2</span> <span class="number">49</span></span><br><span class="line"><span class="number">0</span> <span class="number">60</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 64MB for each test case.</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用数组存储结构，封装散列表类hashTable，protected成员包括存储散列表的数组table，除数divisor，散列表的大小dSize，查询关键字的search方法，public成员包括构造函数，析构函数，empty方法，size方法，寻找关键字的find方法，插入关键字的insert方法，删除关键字的erase方法。</p><ul><li>search：搜索散列表，查询关键字theKey，如果存在关键字返回其位置，否则返回该关键字可以插入的位置。从起始桶开始，判断table[i]是否为空或者指向的元素是否为theKey。</li><li>find：调用search方法搜索散列表得到位置b，通过table[b]是否为空或者指向的元素是否为theKey判断是否匹配，若不匹配输出-1，返回NULL，若匹配输出关键字在散列表的位置b，返回table[b]。</li><li>insert：调用search方法搜索散列表得到位置b，如果table[b]为NULL，插入该关键字，输出插入位置b，否则存在匹配的关键字（因为题目保证散列表不会溢出），输出“Existed”。</li><li>erase：调用search方法搜索散列表得到位置b，起始桶homeBucket保存b的位置，如果table[b]=NULL，则不存在该关键字，输出“Not Found”然后返回。否则存在该关键字，首先释放内存，将散列表的长度-1，moveTimes记录元素移动次数，然后进入外层循环，将位置b置空，使用gap记录删除的关键字的位置。进入内层循环，b移向下一个位置，如果table[b]为空或者b=homeBucket(即已经遍历散列表)，则不需要再判断元素是否需要移动，输出移动次数然后返回。否则需要判断元素是否需要移动，通过pos记录散列表当前位置的关键字的起始桶位置，不需要移动的条件是pos在gap和b之间，考虑有环和没有环的情况，通过三个条件给出限制，否则需要进行移动，跳出内层循环，用b填充gap，移动次数+1，然后继续进行下去，直到满足返回的条件。</li></ul><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashTable</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span> <span class="keyword">const</span></span>;  <span class="comment">//搜索散列表，查询关键字theKey，如果有存在该关键字，返回其位置，否则返回该关键字可以插入的位置</span></span><br><span class="line">    T** table;                          <span class="comment">//散列表</span></span><br><span class="line">    <span class="keyword">int</span> divisor;                        <span class="comment">//散列函数的除数</span></span><br><span class="line">    <span class="keyword">int</span> dSize;                          <span class="comment">//散列表的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hashTable</span>(<span class="keyword">int</span> theDivisor=<span class="number">11</span>);       <span class="comment">//构造函数</span></span><br><span class="line">    ~<span class="built_in">hashTable</span>() &#123;<span class="keyword">delete</span> []table;&#125;      <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize;&#125;</span><br><span class="line">    <span class="function">T* <span class="title">find</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span> <span class="keyword">const</span></span>;     <span class="comment">//返回关键字theKey的指针，若不存在该关键字，则返回NULL</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;       <span class="comment">//在散列表中插入关键字theKey，若存在相同的关键字则覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;        <span class="comment">//在散列表中删除关键字theKey，若不存在输出错误信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">hashTable&lt;T&gt;::<span class="built_in">hashTable</span>(<span class="keyword">int</span> theDivisor)</span><br><span class="line">&#123;</span><br><span class="line">    divisor=theDivisor;</span><br><span class="line">    dSize=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//分配和初始化散列表数组</span></span><br><span class="line">    table=<span class="keyword">new</span> T*[divisor];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;divisor;i++)  <span class="comment">//将所有桶置空</span></span><br><span class="line">        table[i]=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> hashTable&lt;T&gt;::<span class="built_in">search</span>(<span class="keyword">const</span> T&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//搜索散列表，查询关键字theKey</span></span><br><span class="line"> <span class="comment">//如果有存在该关键字，返回其位置，否则返回该关键字可以插入的位置</span></span><br><span class="line">    <span class="keyword">int</span> i=theKey % divisor; <span class="comment">//起始桶</span></span><br><span class="line">    <span class="keyword">int</span> j=i;    <span class="comment">//从起始桶开始</span></span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(table[j]==<span class="literal">NULL</span> || *table[j]==theKey)</span><br><span class="line">            <span class="keyword">return</span> j;</span><br><span class="line">        j=(j+<span class="number">1</span>)%divisor;    <span class="comment">//下一个桶</span></span><br><span class="line">    &#125;<span class="keyword">while</span>(j!=i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> j;<span class="comment">//表已经满</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T* hashTable&lt;T&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> T&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回关键字theKey的指针，若不存在该关键字，则返回NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//搜索散列表</span></span><br><span class="line">    <span class="keyword">int</span> b=<span class="built_in">search</span>(theKey);</span><br><span class="line">    <span class="comment">//判断table[b]是否匹配</span></span><br><span class="line">    <span class="keyword">if</span>(table[b]==<span class="literal">NULL</span> || *table[b]!=theKey) <span class="comment">//不匹配</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//匹配</span></span><br><span class="line">    cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> table[b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashTable&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">&#123;<span class="comment">//在散列表中插入关键字theKey，若存在相同的关键字则覆盖</span></span><br><span class="line">    <span class="keyword">int</span> b=<span class="built_in">search</span>(theKey);</span><br><span class="line">    <span class="comment">//检查匹配的关键字是否存在</span></span><br><span class="line">    <span class="comment">//没有匹配的关键字，且表不满，则插入该关键字</span></span><br><span class="line">    <span class="keyword">if</span>(table[b]==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        table[b]=<span class="keyword">new</span> <span class="built_in">T</span>(theKey);</span><br><span class="line">        dSize++;</span><br><span class="line">        cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//存在匹配的关键字</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Existed&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashTable&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">&#123;<span class="comment">//在散列表中删除关键字theKey</span></span><br><span class="line"> <span class="comment">//若不存在输出错误信息</span></span><br><span class="line">    <span class="keyword">int</span> b=<span class="built_in">search</span>(theKey);</span><br><span class="line">    <span class="keyword">int</span> homeBucket=b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(table[b]==<span class="literal">NULL</span>)  <span class="comment">//不存在该关键字</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Not Found&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在该关键字</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> table[b];    <span class="comment">//释放内存</span></span><br><span class="line">    dSize--;            <span class="comment">//散列表长度-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> moveTimes=<span class="number">0</span>;    <span class="comment">//元素移动次数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        table[b]=<span class="literal">NULL</span>;  <span class="comment">//将散列表的位置b置空</span></span><br><span class="line">        <span class="keyword">int</span> gap=b;      <span class="comment">//记录删除的关键字的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            b=(b+<span class="number">1</span>)%divisor;    <span class="comment">//b的下一个位置</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(table[b]==<span class="literal">NULL</span>||b==homeBucket)   <span class="comment">//不需要再进行移动，直接返回</span></span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;moveTimes&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> pos=*table[b]%divisor;  <span class="comment">//当前关键字在散列表中的原始映射位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//不受散列表中删除关键字的影响</span></span><br><span class="line">            <span class="comment">//三个条件都限制了pos要在gap和b之间</span></span><br><span class="line">            <span class="keyword">if</span>(gap&lt;pos &amp;&amp; pos&lt;=b)   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(gap&gt;b &amp;&amp; gap&lt;pos)    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(gap&gt;b &amp;&amp; pos&lt;=b)     <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//受到影响，跳出循环</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        table[gap]=table[b];    <span class="comment">//用b填充gap</span></span><br><span class="line">        moveTimes++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> D,m,instruction,x;</span><br><span class="line">    cin&gt;&gt;D&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="function">hashTable&lt;<span class="keyword">int</span>&gt; <span class="title">H</span><span class="params">(D)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">find</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">erase</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1013-链表散列"><a href="#P1013-链表散列" class="headerlink" title="P1013:链表散列"></a>P1013:链表散列</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>给定散列函数的除数D和操作数m，输出每次操作后的状态。<br>有以下三种操作：<br>1.插入x，若散列表已存在x，输出”Existed”。<br>2.查询x，若散列表不含有x，输出”Not Found”，否则输出x所在的链表长度。<br>3.删除x，若散列表不含有x，输出”Delete Failed”，否则输出x所在链表删除x后的长度。</p><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><p><strong>使用链表散列方式</strong></p><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>第一行两个整数D(1&lt;=D&lt;=3000)和m(1&lt;=m&lt;=3000)，其中D为散列函数的除数，m为操作数。<br>接下来的m行，每行两个整数opt和x，分别代表操作类型和操作数。<br>若opt为0，则代表向散列表中插入x；<br>若opt为1，代表查询散列表中x是否存在；<br>若opt为2，(如果散列表中含有x)，删除x。<br>数据保证散列表不会溢出。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>按要求输出。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="样例1-1"><a href="#样例1-1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">12</span></span><br><span class="line"><span class="number">1</span> <span class="number">21</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">13</span></span><br><span class="line"><span class="number">0</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">23</span></span><br><span class="line"><span class="number">0</span> <span class="number">26</span></span><br><span class="line"><span class="number">0</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">33</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="样例2-1"><a href="#样例2-1" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">15</span></span><br><span class="line"><span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">0</span> <span class="number">17</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">16</span></span><br><span class="line"><span class="number">0</span> <span class="number">11</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">11</span></span><br><span class="line"><span class="number">1</span> <span class="number">17</span></span><br></pre></td></tr></table></figure><h5 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Delete Failed</span><br><span class="line">Existed</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Not Found</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h3><p>1s, 64MB for each test case.</p><h3 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h3><p>对于前60%的数据，只包含插入和查询操作。<br>对于后40%的数据，包含插入、查询与删除操作。</p><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用链式存储结构，封装散列表类hashChains，protected成员包括有序链表数组table，散列函数的除数divisor，散列表的大小dSize，public成员包括构造函数，析构函数，empty方法，size方法，查询关键字的find方法，插入关键字的insert方法，删除关键字的erase方法。操作主要通过sortedChain类的方法来实现。</p><ul><li>find：首先通过关键字确定起始桶的位置homeBucket，然后在起始桶中调用sortedChain类的find方法，根据返回值是否为空判断是否存在匹配的关键字，若不存在，输出“Not Found”，若存在，通过调用table[homeBucket]的size方法输出关键字所在链表的长度。</li><li>insert：首先通过关键字确定起始桶的位置homeBucket，homeSize表示homeBucket桶在插入前的链表长度，调用table[homeBucket]的insert方法，进行插入操作，若已经存在相同的关键字，输出“Existed”，否则进行关键字的插入，根据homeSize和插入后table[homeBucket]长度的比较，判断是否进行了插入（排除相同关键字的情况），对散列表的大小进行相应增加。</li><li>erase：首先通过关键字确定起始桶的位置homeBucket，然后调用table[homeBucket]的erase方法，若不存在关键字，输出“Delete Failed”，若存在进行相应删除操作，输出删除该关键字后的链表长度。</li></ul><h3 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    T element;</span><br><span class="line">    node&lt;T&gt;* next;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">const</span> T&amp; element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">const</span> T&amp; element,node&lt;T&gt;* next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sortedChain</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    node&lt;T&gt;* firstNode;     <span class="comment">//指向有序链表第一个节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> dSize;              <span class="comment">//有序链表的长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">sortedChain</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">sortedChain</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize;&#125;</span><br><span class="line">    <span class="function">T* <span class="title">find</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span> <span class="keyword">const</span></span>;     <span class="comment">//查询关键字theKey</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;       <span class="comment">//插入关键字theKey，若已经存在关键字，输出Existed</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;        <span class="comment">//删除关键字theKey，若不存在该关键字输出Delete Failed</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">sortedChain&lt;T&gt;::<span class="built_in">sortedChain</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    firstNode=<span class="literal">NULL</span>;</span><br><span class="line">    dSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">sortedChain&lt;T&gt;::~sortedChain&lt;T&gt;()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (firstNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        node&lt;T&gt;* nextNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> firstNode;</span><br><span class="line">        firstNode=nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T* sortedChain&lt;T&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> T &amp;theKey) <span class="keyword">const</span>  </span><br><span class="line">&#123;<span class="comment">//查询关键字theKey，若不存在返回NULL，若存在返回节点数据域的地址</span></span><br><span class="line">    node&lt;T&gt;* currentNode=firstNode;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element&lt;theKey)</span><br><span class="line">        currentNode=currentNode-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element==theKey)</span><br><span class="line">        <span class="keyword">return</span> &amp;currentNode-&gt;element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sortedChain&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> T &amp;theKey)</span><br><span class="line">&#123;<span class="comment">//插入关键字theKey，若已经存在关键字，输出Existed</span></span><br><span class="line">    node&lt;T&gt;* p=firstNode;</span><br><span class="line">    node&lt;T&gt;* tp=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;element&lt;theKey)</span><br><span class="line">    &#123;</span><br><span class="line">        tp=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;element==theKey)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Existed&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node&lt;T&gt;* newNode=<span class="keyword">new</span> node&lt;T&gt;(theKey,p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="literal">NULL</span>)    <span class="comment">//插在首节点</span></span><br><span class="line">        firstNode=newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        tp-&gt;next=newNode;</span><br><span class="line">    dSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sortedChain&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T &amp;theKey)</span><br><span class="line">&#123;<span class="comment">//删除关键字theKey，若不存在该关键字输出Delete Failed</span></span><br><span class="line">    node&lt;T&gt;* p=firstNode;</span><br><span class="line">    node&lt;T&gt;* tp=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;element&lt;theKey)</span><br><span class="line">    &#123;</span><br><span class="line">        tp=p;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;element&gt;theKey) || p==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Delete Failed&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;element==theKey)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tp==<span class="literal">NULL</span>) firstNode=p-&gt;next;</span><br><span class="line">        <span class="keyword">else</span> tp-&gt;next=p-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">        dSize--;</span><br><span class="line">        cout&lt;&lt;dSize&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashChains</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    sortedChain&lt;T&gt;* table;      <span class="comment">//链表数组</span></span><br><span class="line">    <span class="keyword">int</span> divisor;                <span class="comment">//散列函数的除数</span></span><br><span class="line">    <span class="keyword">int</span> dSize;                  <span class="comment">//散列表的大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">hashChains</span>(<span class="keyword">int</span> theDivisor=<span class="number">11</span>);</span><br><span class="line">    ~<span class="built_in">hashChains</span>() &#123;<span class="keyword">delete</span> []table;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> dSize;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span> <span class="keyword">const</span></span>;      <span class="comment">//查询关键字theKey，若不存在该关键字，输出Not Found，若存在输出所在链表的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;          <span class="comment">//在散列表中插入关键字theKey，若存在相同的关键字则覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; theKey)</span></span>;           <span class="comment">//在散列表中删除关键字theKey，若不存在输出错误信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">hashChains&lt;T&gt;::<span class="built_in">hashChains</span>(<span class="keyword">int</span> theDivisor)</span><br><span class="line">&#123;</span><br><span class="line">    divisor=theDivisor;</span><br><span class="line">    dSize=<span class="number">0</span>;</span><br><span class="line">    table=<span class="keyword">new</span> sortedChain&lt;T&gt;[divisor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashChains&lt;T&gt;::<span class="built_in">find</span>(<span class="keyword">const</span> T&amp; theKey) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回关键字theKey匹配的数对的指针</span></span><br><span class="line">    <span class="keyword">int</span> homeBucket=theKey % divisor;</span><br><span class="line">    T* temp=table[homeBucket].<span class="built_in">find</span>(theKey);</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="literal">NULL</span>)</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;Not Found&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        cout&lt;&lt;table[homeBucket].<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashChains&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">&#123;<span class="comment">//在字典中插入一个数对thePair，若存在关键字相同的数对，则覆盖</span></span><br><span class="line">    <span class="keyword">int</span> homeBucket=theKey % divisor;</span><br><span class="line">    <span class="keyword">int</span> homeSize=table[homeBucket].<span class="built_in">size</span>();</span><br><span class="line">    table[homeBucket].<span class="built_in">insert</span>(theKey);</span><br><span class="line">    <span class="keyword">if</span>(table[homeBucket].<span class="built_in">size</span>()&gt;homeSize)</span><br><span class="line">        dSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> hashChains&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T&amp; theKey)</span><br><span class="line">&#123;<span class="comment">//删除关键字为theKey的数对</span></span><br><span class="line">    <span class="keyword">int</span> homeBucket=theKey % divisor;</span><br><span class="line">    table[homeBucket].<span class="built_in">erase</span>(theKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> D,m,instruction,x;</span><br><span class="line">    cin&gt;&gt;D&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="function">hashChains&lt;<span class="keyword">int</span>&gt; <span class="title">H</span><span class="params">(D)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">find</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cin&gt;&gt;x;</span><br><span class="line">                H.<span class="built_in">erase</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.线性探查的删除操作的核心是在删除一个元素后，判断散列剩余的元素要不要进行移动，如果需要移动，移动到哪个位置。在实现中，gap表示需要进行填充的位置，如果不进行填充，会破坏散列表的组织，影响后序的搜索等操作，不需要进行移动的元素应该满足其起始桶位置在gap和b之间，这样在线性探查的过程中，不会遇到gap，不影响该元素的搜索，所以这样的元素不需要进行移动。<br>2.线性探查的删除操作也可以为每个桶增加一个neverUsed域，用来标识这个桶是否曾经存有元素然后该元素被删除，保证在探查过程中不会受到删除的影响。<br>3.散列在最坏情况下的复杂度与线性表在最坏情况下的复杂度相同，使用链表时的平均性能优于线性探查。<br>4.数对的表示可以通过pair&lt;const K,E&gt;，pair.first为关键字，pair.second为元素值。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;散列表（哈希表）有两种实现方法，一种是线性探查，一种是链表散列。散列常作为字典的表示方法，通过哈希函数把字典的数对映射到散列表的具体位置，散列表的每一个位置叫做一个桶。散列表的最坏性能与线性表相同，因此性能很好，但是缺点是溢出后无法对散列表进行扩容（只能重新建立一个新的散列表）。所以在实际应用过程中散列表一般会开的比较大，保证不会溢出，同时需要选择一个好的除数减少冲突。本文的两个问题在实现过程中通过关键字模拟散列表的操作，即散列表每个位置的元素是关键字而不是数对。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="散列表" scheme="https://tongyiheng.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（七）队列</title>
    <link href="https://tongyiheng.github.io/2020/11/12/DSA/DSA_7/"/>
    <id>https://tongyiheng.github.io/2020/11/12/DSA/DSA_7/</id>
    <published>2020-11-12T14:35:14.000Z</published>
    <updated>2021-04-10T01:01:05.690Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;循环队列的数组描述有不同的实现策略，主要不同之处在于如何区分队列是空还是满。本文的实现策略是不将队列插满，队列元素个数最多是arrayLength-1，在向队列插入元素之前，先要判断本次操作是否会使队列变满。</p><span id="more"></span><h2 id="P1011-卡片游戏"><a href="#P1011-卡片游戏" class="headerlink" title="P1011:卡片游戏"></a>P1011:卡片游戏</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>假设桌上有一叠扑克牌，依次编号为1-n（从上至下）。当至少还有两张的时候，可以进行操作：把第一张牌扔掉，然后把新的第一张（原先扔掉的牌下方的那张牌,即第二张牌）放到整叠牌的最后。输入n，输出最后剩下的牌。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.创建队列类，使用数组描述的循环队列。<br>2.实现卡片游戏。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>一个整数n，代表一开始卡片的总数。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>最后一张卡片的值。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">72</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 64MB for each test case.</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用数组存储结构，封装循环队列类arrayQueue，私有成员包括队列首元素的下一个位置（逆时针）queueFront，队列尾元素的位置queueBack，数组大小arrayLength，存储队列的数组queue。公有成员包括构造函数，析构函数，ADT方法包括判断队列是否为空，返回队列中元素个数，返回队首元素，返回队尾元素，删除队首元素，将元素插入到队尾。<br>&emsp;&emsp;构造函数中，设置queueFront=queueBack=0。队空标志为queueFront=queueBack，队列元素个数为(arrayLength+queueBack-queueFront)%arrayLength。元素入队时，若插入一个元素后队列满，需要扩大容量，通过queueFront计算队列首元素的位置start，与2进行比较判断原队列中是否形成环，若没有形成环，对元素只需调用一次copy方法进行复制，若形成环，需要使用copy进行两次复制。<br>&emsp;&emsp;对扑克牌进行操作，把第一张牌扔掉，队列操作是删除队首元素；把新的一张牌放到整叠牌的最后，队列操作是获得队首元素，删除队首元素，将得到的队首元素插入到队尾。通过队列的元素个数进行循环控制。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> queueFront;     <span class="comment">//队列首元素的下一个位置（逆时针方向）</span></span><br><span class="line">    <span class="keyword">int</span> queueBack;      <span class="comment">//队列最后一个元素的位置</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//数组大小</span></span><br><span class="line">    T* queue;           <span class="comment">//存储队列的数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayQueue</span>() &#123;<span class="keyword">delete</span> []queue;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> queueFront==queueBack;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> (arrayLength+queueBack-queueFront)%arrayLength;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span> <span class="keyword">const</span></span>;                   <span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span> <span class="keyword">const</span></span>;                    <span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;                         <span class="comment">//删除队首元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;     <span class="comment">//元素插入到队尾</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayQueue&lt;T&gt;::<span class="built_in">arrayQueue</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    queue=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    queueFront=queueBack=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">front</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队首元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[(queueFront+<span class="number">1</span>)%arrayLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayQueue&lt;T&gt;::<span class="built_in">back</span>() <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回队尾元素</span></span><br><span class="line">    <span class="keyword">return</span> queue[queueBack];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;<span class="comment">//删除队首元素</span></span><br><span class="line">    queueFront=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueFront].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayQueue&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//元素插入到队尾</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果插入一个元素后队列满，需要扩充容量</span></span><br><span class="line">    <span class="keyword">if</span>((queueBack+<span class="number">1</span>)%arrayLength==queueFront)</span><br><span class="line">    &#123;</span><br><span class="line">        T* newQueue=<span class="keyword">new</span> T[<span class="number">2</span>*arrayLength];</span><br><span class="line">        <span class="keyword">int</span> start=(queueFront+<span class="number">1</span>)%arrayLength;</span><br><span class="line">        <span class="comment">//复制元素</span></span><br><span class="line">        <span class="keyword">if</span>(start&lt;<span class="number">2</span>) <span class="comment">//原队列中没有形成环</span></span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+start+arrayLength<span class="number">-1</span>,newQueue);</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//原队列中形成环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">copy</span>(queue+start,queue+arrayLength,newQueue);</span><br><span class="line">            <span class="built_in">copy</span>(queue,queue+queueBack+<span class="number">1</span>,newQueue+arrayLength-start);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queueFront=<span class="number">2</span>*arrayLength<span class="number">-1</span>;</span><br><span class="line">        queueBack=arrayLength<span class="number">-2</span>;</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">delete</span> []queue;</span><br><span class="line">        queue=newQueue;</span><br><span class="line">    &#125;</span><br><span class="line">    queueBack=(queueBack+<span class="number">1</span>)%arrayLength;</span><br><span class="line">    queue[queueBack]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    arrayQueue&lt;<span class="keyword">int</span>&gt; card;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        card.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(card.<span class="built_in">size</span>()&gt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        card.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> t=card.<span class="built_in">front</span>();</span><br><span class="line">        card.<span class="built_in">pop</span>();</span><br><span class="line">        card.<span class="built_in">push</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;card.<span class="built_in">front</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.构造函数设置queueFront=queueBack=0，保证符合队列为空的标志，并且将0号位置空出来，从1号位置开始插入。队列的最大元素个数为arrayLength-1，若插入一个元素后队列满，可以根据队列首元素的位置与2的大小关系判断队列中是否形成了环，然后进行元素的复制。<br>2.通过queueFront和queueBack计算队列元素个数，若队列中没有形成环，queueBack-queueFront得到队列元素个数，若队列中形成了环，queueFront-queueBack为空白位置的个数，arrayLength-(queueFront-queueBack)得到队列元素个数。将两种情况合并，(arrayLength+queueBack-queueFront)%arrayLength表示队列元素个数。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;循环队列的数组描述有不同的实现策略，主要不同之处在于如何区分队列是空还是满。本文的实现策略是不将队列插满，队列元素个数最多是arrayLength-1，在向队列插入元素之前，先要判断本次操作是否会使队列变满。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="队列" scheme="https://tongyiheng.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（六）栈</title>
    <link href="https://tongyiheng.github.io/2020/11/04/DSA/DSA_6/"/>
    <id>https://tongyiheng.github.io/2020/11/04/DSA/DSA_6/</id>
    <published>2020-11-04T12:16:04.000Z</published>
    <updated>2021-04-10T01:01:09.545Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;数学表达式根据运算符和数字的相对位置可以分为前缀、中缀、后缀三种，前缀表达式又叫波兰表达式，后缀表达式又叫逆波兰表达式，这两种表达式都不含括号。中缀表达式可以转换为前缀表达式和后缀表达式，转换过程以及计算过程都需要用到栈结构。本文通过两种方法实现数学表达式的计算，方法一将中缀表达式转换为后缀表达式，然后进行计算，方法二直接对中缀表达式进行计算。</p><span id="more"></span><h2 id="P1010-计算表达式"><a href="#P1010-计算表达式" class="headerlink" title="P1010:计算表达式"></a>P1010:计算表达式</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>创建栈类，采用数组描述。</li><li>计算数学表达式的值。 输入数学表达式，输出表达式的计算结果。数学表达式由单个数字和运算符 + 、 - 、 * 、 / 、 ( 、 ) 构成，例如 2 + 3 * ( 4 + 5 )- 6 / 4。假定表达式输入格式合法。</li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行一个整数n(1&lt;=n&lt;=100)，代表表达式的个数。<br>接下来n行，每行一个表达式，保证表达式内的数字为单个整数，表达式内各运算符和数字间没有空格，且表达式的长度不超过2000。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>每行表达式输出一个浮点数，要求保留两位小数，保证输入表达式合法。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>因为精度问题，请使用double存数据。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span>+<span class="number">6</span>/<span class="number">1</span>*<span class="number">7</span>+<span class="number">2</span>*<span class="number">1</span>*<span class="number">4</span>+<span class="number">9</span>/<span class="number">1</span>+<span class="number">2</span>*<span class="number">0</span>*<span class="number">9</span>+<span class="number">9</span>+<span class="number">7</span>/(<span class="number">9</span>*<span class="number">5</span>)<span class="number">-1</span>*<span class="number">6</span><span class="number">-0</span>*<span class="number">8</span><span class="number">-7</span><span class="number">-9</span>*<span class="number">2</span>+<span class="number">6</span>-(<span class="number">0</span><span class="number">-5</span><span class="number">-2</span>*<span class="number">8</span><span class="number">-7</span><span class="number">-9</span>*<span class="number">5</span>*(<span class="number">6</span><span class="number">-5</span>*<span class="number">5</span>*<span class="number">2</span>*<span class="number">6</span><span class="number">-2</span><span class="number">-7</span><span class="number">-5</span>+<span class="number">6</span>*<span class="number">7</span>+<span class="number">6</span>*<span class="number">9</span><span class="number">-1</span>*<span class="number">0</span>*<span class="number">0</span>+<span class="number">3</span>*<span class="number">0</span>+<span class="number">2</span>/<span class="number">1</span><span class="number">-6</span>/<span class="number">6</span>+<span class="number">5</span>))</span><br><span class="line"><span class="number">0</span><span class="number">-4</span><span class="number">-1</span>/<span class="number">6</span>*(<span class="number">1</span>-(<span class="number">6</span>/<span class="number">7</span>)<span class="number">-4</span>+<span class="number">6</span>+<span class="number">2</span>+<span class="number">6</span>*<span class="number">1</span>)<span class="number">-1</span>*<span class="number">7</span>+<span class="number">2</span><span class="number">-8</span>*<span class="number">2</span>+<span class="number">0</span>-(<span class="number">4</span>+<span class="number">6</span><span class="number">-6</span>*<span class="number">1</span>+(<span class="number">3</span><span class="number">-8</span>*<span class="number">6</span>/<span class="number">4</span><span class="number">-6</span><span class="number">-5</span>)*<span class="number">6</span>/<span class="number">4</span>/<span class="number">8</span>+<span class="number">7</span><span class="number">-1</span>*<span class="number">4</span>/<span class="number">9</span>*<span class="number">5</span>)<span class="number">-0</span>/<span class="number">6</span>+<span class="number">1</span><span class="number">-0</span><span class="number">-2</span>+<span class="number">7</span><span class="number">-2</span>+<span class="number">6</span>*<span class="number">4</span><span class="number">-3</span>*<span class="number">6</span>+<span class="number">2</span>/<span class="number">8</span>+<span class="number">6</span>+<span class="number">1</span>*<span class="number">6</span>*<span class="number">2</span></span><br><span class="line"><span class="number">5</span><span class="number">-3</span>*<span class="number">9</span>+<span class="number">5</span>/<span class="number">1</span>*<span class="number">5</span><span class="number">-9</span>+<span class="number">1</span>*<span class="number">8</span><span class="number">-6</span><span class="number">-8</span><span class="number">-4</span>*<span class="number">1</span>+<span class="number">5</span><span class="number">-2</span>+<span class="number">9</span>/<span class="number">3</span>*<span class="number">2</span><span class="number">-2</span>/<span class="number">5</span>/(<span class="number">2</span><span class="number">-6</span>)*<span class="number">2</span>/<span class="number">7</span><span class="number">-9</span>*<span class="number">0</span><span class="number">-2</span>+<span class="number">4</span>/<span class="number">6</span>*<span class="number">6</span>*<span class="number">7</span>*<span class="number">8</span><span class="number">-8</span><span class="number">-8</span>*<span class="number">6</span>+<span class="number">8</span>*<span class="number">9</span>*(<span class="number">3</span>+<span class="number">0</span>*<span class="number">1</span>/<span class="number">5</span>/<span class="number">2</span>*<span class="number">7</span>*<span class="number">8</span>+<span class="number">0</span><span class="number">-8</span>*<span class="number">8</span><span class="number">-5</span>+<span class="number">8</span>/<span class="number">5</span>*<span class="number">2</span><span class="number">-0</span>)</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-9197.84</span></span><br><span class="line"><span class="number">-3.47</span></span><br><span class="line"><span class="number">-4362.57</span></span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>1s, 65536KiB for each test case.</p><h3 id="算法描述和实现"><a href="#算法描述和实现" class="headerlink" title="算法描述和实现"></a>算法描述和实现</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>&emsp;&emsp;使用数组存储结构，封装栈类arrayStack，私有成员包括栈顶stackTop，栈容量arrayLength，元素数组stack。公有成员包括构造函数，析构函数，ADT方法包括判断栈是否为空，返回栈中元素个数，返回栈顶元素，删除栈顶元素，将元素压入栈顶。<br>&emsp;&emsp;封装calculator类，私有成员包括一个double类型的栈，字符串s。公有成员包括输入，将中缀表达式转换为后缀表达式，处理后缀表达式，取2个操作数，对2个操作数进行运算，返回运算符优先级，输出结果，将char类型的数字转换为double类型，每个方法的具体思想如下：</p><ul><li>input：读入表达式（中缀）到私有成员s中。</li><li>change：将中缀表达式转换为后缀表达式。使用char类型的栈临时存储运算符。声明string类型的变量_s，用来临时存储后缀表达式。引入标记字符’#’，将其插入到运算符栈中，并规定其优先级为最低，这样做可以不用对栈空的情况进行特殊考虑。遍历表达式中每个字符，根据字符类型进行对应操作。字符串s遍历完毕后，如果栈顶元素不为标记字符（即栈非空），按顺序依次弹出栈中的元素，插入到_s的末端。<ul><li>运算数：直接插入到_s的末端。</li><li>四则运算符：将该运算符与栈顶运算符优先级进行比较，如果优先级高于栈顶运算符，表示该部分运算还不能进行，将其压入栈；如果优先级低于或等于（优先级相同从左到右运算）栈顶运算符，表示前面部分的运算可以进行，将栈顶运算符弹出并插入到_s的末端，然后继续与新的栈顶运算符进行比较，直到优先级大于栈顶运算符（栈空的情况已经包含，因为设置标记字符的优先级为最低）,再将该运算符入栈。</li><li>左括号：直接压入栈，入栈后优先级降到最低，保证其它运算符正常入栈。</li><li>右括号：依次弹出栈顶运算符，并插入到_s的末端，直到遇到左括号。最后将左括号从栈顶删除。</li></ul></li><li>operate：处理后缀表达式。遍历后缀表达式中的每个字符，如果是数字则入操作数栈，如果是操作符则取数进行运算。</li><li>getTwoNumbers：获取两个操作数。</li><li>calculate：对两个操作数进行运算。先使用getTwoNumbers方法获取两个操作数，然后根据运算符的类型进行对应的运算，将结果压入numberStack栈中。</li><li>order：返回运算符优先级。加减为1，乘除为2，左括号为0，右括号为3，标记符号为0。</li><li>output：输出最终结果。按照2位小数输出操作数栈的栈顶元素。</li><li>charToDouble：将char类型的数字字符转换为double类型。返回数字字符与’0’的差。</li></ul><h4 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> stackTop;       <span class="comment">//栈顶</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//栈容量</span></span><br><span class="line">    T* stack;           <span class="comment">//元素数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数、析构函数</span></span><br><span class="line">    <span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayStack</span>() &#123;<span class="keyword">delete</span> []stack;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADT方法</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop==<span class="number">-1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop+<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayStack&lt;T&gt;::<span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    stack=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    stackTop=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayStack&lt;T&gt;::<span class="built_in">top</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[stackTop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    stack[stackTop--].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stackTop==arrayLength<span class="number">-1</span>)</span><br><span class="line">    &#123;<span class="comment">//空间已满，容量加倍</span></span><br><span class="line">        T* newStack=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=stackTop;i++)</span><br><span class="line">            newStack[i]=stack[i];</span><br><span class="line">        <span class="keyword">delete</span> []stack;</span><br><span class="line">        stack=newStack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在栈顶插入</span></span><br><span class="line">    stack[++stackTop]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    arrayStack&lt;<span class="keyword">double</span>&gt; numberStack; <span class="comment">//操作数栈</span></span><br><span class="line">    string s;                       <span class="comment">//存储中缀表达式和后缀表达式</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;                   <span class="comment">//读入中缀表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span>;                  <span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;                 <span class="comment">//遍历后缀表达式中的每个字符，如果是数字则入栈，如果是操作符则取数进行运算</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTwoNumbers</span><span class="params">(<span class="keyword">double</span> &amp;num1,<span class="keyword">double</span> &amp;num2)</span></span>;  <span class="comment">//获取两个操作数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> op)</span></span>;        <span class="comment">//对两个操作数进行op运算</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">(<span class="keyword">char</span> op)</span></span>;             <span class="comment">//运算符优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>;                  <span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">charToDouble</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;   <span class="comment">//将char类型的数字字符转换为double类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//读入中缀表达式</span></span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//将中缀表达式转换为后缀表达式</span></span><br><span class="line">    arrayStack&lt;<span class="keyword">char</span>&gt; operatorStack; <span class="comment">//暂存运算符的栈</span></span><br><span class="line">    string _s;                      <span class="comment">//暂存转换后的字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> ch;        <span class="comment">//当前的字符</span></span><br><span class="line"></span><br><span class="line">    operatorStack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ch=s.<span class="built_in">at</span>(i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;(&#x27;</span>) <span class="comment">//左括号</span></span><br><span class="line">        &#123;</span><br><span class="line">            operatorStack.<span class="built_in">push</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;)&#x27;</span>)    <span class="comment">//右括号</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(operatorStack.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _s.<span class="built_in">push_back</span>(operatorStack.<span class="built_in">top</span>());</span><br><span class="line">                operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;+&#x27;</span>||ch==<span class="string">&#x27;-&#x27;</span>||ch==<span class="string">&#x27;*&#x27;</span>||ch==<span class="string">&#x27;/&#x27;</span>) <span class="comment">//四则运算符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> w=operatorStack.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">order</span>(w)&lt;<span class="built_in">order</span>(ch))</span><br><span class="line">            &#123;</span><br><span class="line">                operatorStack.<span class="built_in">push</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">order</span>(w)&gt;=<span class="built_in">order</span>(ch))</span><br><span class="line">                &#123;</span><br><span class="line">                    _s.<span class="built_in">push_back</span>(w);</span><br><span class="line">                    operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">                    w=operatorStack.<span class="built_in">top</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                operatorStack.<span class="built_in">push</span>(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//数字</span></span><br><span class="line">        &#123;</span><br><span class="line">            _s.<span class="built_in">push_back</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(operatorStack.<span class="built_in">top</span>()!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _s.<span class="built_in">push_back</span>(operatorStack.<span class="built_in">top</span>());</span><br><span class="line">        operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s=_s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::getTwoNumbers</span><span class="params">(<span class="keyword">double</span> &amp;num1,<span class="keyword">double</span> &amp;num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//获取两个操作数</span></span><br><span class="line">    num1=numberStack.<span class="built_in">top</span>();</span><br><span class="line">    numberStack.<span class="built_in">pop</span>();</span><br><span class="line">    num2=numberStack.<span class="built_in">top</span>();</span><br><span class="line">    numberStack.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::operate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//遍历后缀表达式中的每个字符，如果是数字则入栈，如果是操作符则取数进行运算</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)s.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (s.<span class="built_in">at</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                <span class="built_in">calculate</span>(s.<span class="built_in">at</span>(i));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                numberStack.<span class="built_in">push</span>(<span class="built_in">charToDouble</span>(s.<span class="built_in">at</span>(i)));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::calculate</span><span class="params">(<span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//对两个操作数进行op运算</span></span><br><span class="line">    <span class="keyword">double</span> number1,number2;</span><br><span class="line">    <span class="built_in">getTwoNumbers</span>(number1,number2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:numberStack.<span class="built_in">push</span>(number2+number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:numberStack.<span class="built_in">push</span>(number2-number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:numberStack.<span class="built_in">push</span>(number2*number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:numberStack.<span class="built_in">push</span>(number2/number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculator::order</span><span class="params">(<span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//运算符优先级</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>||op==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        val=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>||op==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        val=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        val=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,numberStack.<span class="built_in">top</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculator::charToDouble</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//将char类型的数字字符转换为double类型</span></span><br><span class="line">    <span class="keyword">double</span> result=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="comment">//表达式个数</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    calculator c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c.<span class="built_in">input</span>();</span><br><span class="line">        c.<span class="built_in">change</span>();</span><br><span class="line">        c.<span class="built_in">operate</span>();</span><br><span class="line">        c.<span class="built_in">output</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>&emsp;&emsp;使用数组存储结构，封装栈类arrayStack，私有成员包括栈顶stackTop，栈容量arrayLength，元素数组stack。公有成员包括构造函数，析构函数，ADT方法包括判断栈是否为空，返回栈中元素个数，返回栈顶元素，删除栈顶元素，将元素压入栈顶。<br>封装calculator类，私有成员包括一个double类型的操作数栈，一个char类型的运算符栈，字符串s。公有成员包括输入，遍历表达式进行相应处理，取2个操作数，对2个操作数进行运算，返回运算符优先级，输出结果，将char类型的数字转换为double类型，每个方法的具体思想如下：</p><ul><li>input：读入表达式到私有成员s中。</li><li>operate：遍历表达式中的每个字符，进行对应操作。operateStack栈存储运算符，首先将栈空的标记字符压入栈中，并规定其优先级为最低，这样做可以不用对栈空的情况进行特殊考虑。遍历表达式中每个字符，根据字符类型进行对应操作。<ul><li>运算数：压入numberStack栈中。</li><li>四则运算符：将该运算符与操作符栈顶运算符优先级进行比较，如果优先级高于栈顶运算符，表示该部分运算还不能进行，将其压入栈；如果优先级低于或等于（优先级相同从左到右运算）栈顶运算符，表示前面部分的运算可以进行，取出栈顶运算符进行计算，完成计算后将栈顶运算符弹出，然后继续与新的栈顶运算符进行比较，直到优先级大于栈顶运算符（栈空的情况已经包含，因为设置标记字符的优先级为最低）,再将该运算符压入操作符栈。</li><li>左括号：直接压入栈，入栈后优先级降到最低，保证其它运算符正常入栈。</li><li>右括号：依次取栈顶运算符进行运算，直到遇到左括号为止。最后将左括号从栈顶删除。<br>字符串s遍历完毕后，如果栈顶元素不为标记字符（即栈非空），依次取出栈顶运算符进行计算，计算结果压入numberStack中。</li></ul></li><li>getTwoNumbers：获取两个操作数。</li><li>calculate：对两个操作数进行运算。先使用getTwoNumbers方法获取两个操作数，然后根据运算符的类型进行对应的运算，将结果压入numberStack栈中。</li><li>order：返回运算符优先级。加减为1，乘除为2，左括号为0，右括号为3，标记符号为0。</li><li>output：输出最终结果。按照2位小数输出操作数栈的栈顶元素。</li><li>charToDouble：将char类型的数字字符转换为double类型。返回数字字符与’0’的差。</li></ul><h4 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> stackTop;       <span class="comment">//栈顶</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;    <span class="comment">//栈容量</span></span><br><span class="line">    T* stack;           <span class="comment">//元素数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数、析构函数</span></span><br><span class="line">    <span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">arrayStack</span>() &#123;<span class="keyword">delete</span> []stack;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADT方法</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop==<span class="number">-1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> stackTop+<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayStack&lt;T&gt;::<span class="built_in">arrayStack</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;</span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    stack=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    stackTop=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayStack&lt;T&gt;::<span class="built_in">top</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[stackTop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    stack[stackTop--].~<span class="built_in">T</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayStack&lt;T&gt;::<span class="built_in">push</span>(<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stackTop==arrayLength<span class="number">-1</span>)</span><br><span class="line">    &#123;<span class="comment">//空间已满，容量加倍</span></span><br><span class="line">        T* newStack=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength*=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=stackTop;i++)</span><br><span class="line">            newStack[i]=stack[i];</span><br><span class="line">        <span class="keyword">delete</span> []stack;</span><br><span class="line">        stack=newStack;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在栈顶插入</span></span><br><span class="line">    stack[++stackTop]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">calculator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    arrayStack&lt;<span class="keyword">double</span>&gt; numberStack; <span class="comment">//操作数栈</span></span><br><span class="line">    arrayStack&lt;<span class="keyword">char</span>&gt; operatorStack; <span class="comment">//操作符栈</span></span><br><span class="line">    string s;                       <span class="comment">//存储表达式</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;                   <span class="comment">//读入表达式</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operate</span><span class="params">()</span></span>;                 <span class="comment">//遍历表达式中的每个字符，进行相应处理</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getTwoNumbers</span><span class="params">(<span class="keyword">double</span> &amp;num1,<span class="keyword">double</span> &amp;num2)</span></span>;  <span class="comment">//获取两个操作数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">char</span> op)</span></span>;        <span class="comment">//对两个操作数进行op运算</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">(<span class="keyword">char</span> op)</span></span>;             <span class="comment">//运算符优先级</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>;                  <span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">charToDouble</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;   <span class="comment">//将char类型的数字字符转换为double类型</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//读入表达式</span></span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::getTwoNumbers</span><span class="params">(<span class="keyword">double</span> &amp;num1,<span class="keyword">double</span> &amp;num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//获取两个操作数</span></span><br><span class="line">    num1=numberStack.<span class="built_in">top</span>();</span><br><span class="line">    numberStack.<span class="built_in">pop</span>();</span><br><span class="line">    num2=numberStack.<span class="built_in">top</span>();</span><br><span class="line">    numberStack.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::operate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//遍历表达式中的每个字符，进行对应操作</span></span><br><span class="line">    operatorStack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>);    <span class="comment">//设置栈空的标记字符，优先级设为最低</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)s.<span class="built_in">size</span>();i++)    <span class="comment">//遍历每个字符</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ch=s.<span class="built_in">at</span>(i);        <span class="comment">//当前字符</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>)  <span class="comment">//数字</span></span><br><span class="line">            numberStack.<span class="built_in">push</span>(<span class="built_in">charToDouble</span>(ch)); <span class="comment">//转换类型后入操作数栈</span></span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//运算符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;(&#x27;</span>) <span class="comment">//左括号</span></span><br><span class="line">                operatorStack.<span class="built_in">push</span>(ch); <span class="comment">//压入操作符栈</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="string">&#x27;)&#x27;</span>)    <span class="comment">//右括号</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(operatorStack.<span class="built_in">top</span>()!=<span class="string">&#x27;(&#x27;</span>) <span class="comment">//进行计算直到遇到左括号</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">calculate</span>(operatorStack.<span class="built_in">top</span>());</span><br><span class="line">                    operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                operatorStack.<span class="built_in">pop</span>();    <span class="comment">//删除左括号</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>    <span class="comment">//四则运算符</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">order</span>(ch)&gt;<span class="built_in">order</span>(operatorStack.<span class="built_in">top</span>()))    <span class="comment">//当前运算符优先级高于栈顶运算符优先级</span></span><br><span class="line">                    operatorStack.<span class="built_in">push</span>(ch);</span><br><span class="line">                <span class="keyword">else</span>    <span class="comment">//当前运算符优先级低于或等于栈顶运算符优先级</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="built_in">order</span>(ch)&lt;=<span class="built_in">order</span>(operatorStack.<span class="built_in">top</span>()))</span><br><span class="line">                    &#123;<span class="comment">//进行计算</span></span><br><span class="line">                        <span class="built_in">calculate</span>(operatorStack.<span class="built_in">top</span>());</span><br><span class="line">                        operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    operatorStack.<span class="built_in">push</span>(ch);     <span class="comment">//当前运算符压入操作符栈</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈不为空</span></span><br><span class="line">    <span class="keyword">while</span>(operatorStack.<span class="built_in">top</span>()!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> op=operatorStack.<span class="built_in">top</span>();</span><br><span class="line">        operatorStack.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="built_in">calculate</span>(op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::calculate</span><span class="params">(<span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//对两个操作数进行op运算</span></span><br><span class="line">    <span class="keyword">double</span> number1,number2;</span><br><span class="line">    <span class="built_in">getTwoNumbers</span>(number1,number2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (op)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:numberStack.<span class="built_in">push</span>(number2+number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:numberStack.<span class="built_in">push</span>(number2-number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:numberStack.<span class="built_in">push</span>(number2*number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:numberStack.<span class="built_in">push</span>(number2/number1); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calculator::order</span><span class="params">(<span class="keyword">char</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//运算符优先级</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>||op==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        val=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>||op==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        val=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        val=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        val=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculator::output</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,numberStack.<span class="built_in">top</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calculator::charToDouble</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//将char类型的数字字符转换为double类型</span></span><br><span class="line">    <span class="keyword">double</span> result=ch-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="comment">//表达式个数</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    calculator c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c.<span class="built_in">input</span>();</span><br><span class="line">        c.<span class="built_in">operate</span>();</span><br><span class="line">        c.<span class="built_in">output</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.在操作符栈中压入标记字符，并将其优先级设置为最低，在后续的判断中不用考虑栈空的情况，减少比较次数，提高程序性能。<br>2.逆波兰表达式求值是递归的一道经典问题，也可采用递归进行求解。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;数学表达式根据运算符和数字的相对位置可以分为前缀、中缀、后缀三种，前缀表达式又叫波兰表达式，后缀表达式又叫逆波兰表达式，这两种表达式都不含括号。中缀表达式可以转换为前缀表达式和后缀表达式，转换过程以及计算过程都需要用到栈结构。本文通过两种方法实现数学表达式的计算，方法一将中缀表达式转换为后缀表达式，然后进行计算，方法二直接对中缀表达式进行计算。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="栈" scheme="https://tongyiheng.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（五）数组和矩阵</title>
    <link href="https://tongyiheng.github.io/2020/10/21/DSA/DSA_5/"/>
    <id>https://tongyiheng.github.io/2020/10/21/DSA/DSA_5/</id>
    <published>2020-10-21T12:39:46.000Z</published>
    <updated>2021-04-10T01:01:13.786Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文通过单个线性表（三元组）按照行主次序将稀疏矩阵映射到一维数组中，提供重置、转置、加法、乘法、输入、输出操作。稀疏矩阵类sparseMatrix在arrayList类的基础上实现，对arrayList类的方法进行了一些扩充。在代码实现过程中需要注意OJ对时间复杂度的要求，对代码进行优化。</p><span id="more"></span><h2 id="P1008-稀疏矩阵"><a href="#P1008-稀疏矩阵" class="headerlink" title="P1008:稀疏矩阵"></a>P1008:稀疏矩阵</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><ul><li>创建稀疏矩阵类（参照课本MatrixTerm三元组定义），采用行主顺序把稀疏矩阵非0元素映射到一维数组中，提供操作:两个稀疏矩阵相加、两个稀疏矩阵相乘、稀疏矩阵的转置、输出矩阵。</li><li>键盘输入矩阵的行数、列数，并按行优先顺序输入矩阵的各元素值，建立矩阵。</li><li>对建立的矩阵执行相加、相乘、转置的操作，输出操作的结果矩阵。</li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.数据类型请使用int，本题中所有运算的结果均视作对int型自然溢出。<br>2.可以使用vector等STL中的容器保存稀疏矩阵元素，减少不必要的bug。<br>3.各操作需在稀疏矩阵上进行，充分考虑数据的稀疏性，不得直接或间接转换为二维数组形式计算，否则取消成绩。</p><h3 id="操作描述"><a href="#操作描述" class="headerlink" title="操作描述"></a>操作描述</h3><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_5/5_1.png" alt="5_1"></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行一个w代表操作个数，接下来若干行是各个操作，其中保证第一个操作一定为重置矩阵。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>当执行操作4时，输出矩阵P;当执行操作2或3时，若对应运算不合法，则输出-1。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="样例1"><a href="#样例1" class="headerlink" title="样例1"></a>样例1</h4><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">16</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20</span> <span class="number">-2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">8</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">16</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">4</span> <span class="number">20</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">-2</span> <span class="number">8</span> </span><br></pre></td></tr></table></figure><h4 id="样例2"><a href="#样例2" class="headerlink" title="样例2"></a>样例2</h4><h5 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">16</span> <span class="number">9</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">17</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">7</span> <span class="number">12</span> <span class="number">10</span></span><br><span class="line"><span class="number">8</span> <span class="number">13</span> <span class="number">6</span></span><br><span class="line"><span class="number">10</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">20</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">20</span> <span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">10</span></span><br><span class="line"><span class="number">8</span> <span class="number">12</span> <span class="number">9</span></span><br><span class="line"><span class="number">9</span> <span class="number">17</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">4</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">17</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span> <span class="number">9</span> <span class="number">4</span></span><br><span class="line"><span class="number">7</span> <span class="number">12</span> <span class="number">7</span></span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">9</span></span><br><span class="line"><span class="number">9</span> <span class="number">17</span> <span class="number">7</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">18</span> <span class="number">4</span></span><br><span class="line"><span class="number">8</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">19</span> <span class="number">5</span></span><br><span class="line"><span class="number">8</span> <span class="number">20</span> <span class="number">10</span></span><br><span class="line"><span class="number">9</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">11</span> <span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">16</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">16</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">20</span> <span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="number">10</span> <span class="number">7</span></span><br><span class="line"><span class="number">10</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">19</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span> <span class="number">15</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">10</span></span><br><span class="line"><span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">6</span> <span class="number">14</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">7</span></span><br><span class="line"><span class="number">9</span> <span class="number">16</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">3</span> <span class="number">14</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">6</span> <span class="number">19</span> <span class="number">5</span></span><br><span class="line"><span class="number">7</span> <span class="number">17</span> <span class="number">7</span></span><br><span class="line"><span class="number">8</span> <span class="number">13</span> <span class="number">4</span></span><br><span class="line"><span class="number">9</span> <span class="number">6</span> <span class="number">10</span></span><br><span class="line"><span class="number">9</span> <span class="number">20</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">20</span> <span class="number">10</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">6</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">10</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line"><span class="number">11</span> <span class="number">1</span> <span class="number">10</span></span><br><span class="line"><span class="number">12</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">18</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">20</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">20</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">17</span> <span class="number">5</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-2</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">17</span> <span class="number">5</span></span><br><span class="line"><span class="number">12</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">13</span> <span class="number">15</span> <span class="number">5</span></span><br><span class="line"><span class="number">14</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">15</span> <span class="number">9</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line"><span class="number">14</span> <span class="number">3</span> <span class="number">9</span></span><br><span class="line"><span class="number">14</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">16</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">18</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">18</span> <span class="number">14</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">18</span> <span class="number">10</span></span><br><span class="line"><span class="number">4</span> <span class="number">15</span> <span class="number">4</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">9</span></span><br><span class="line"><span class="number">11</span> <span class="number">19</span> <span class="number">6</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line"><span class="number">14</span> <span class="number">14</span> <span class="number">2</span></span><br><span class="line"><span class="number">17</span> <span class="number">9</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span> <span class="number">18</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line"><span class="number">11</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">16</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">16</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">12</span> <span class="number">4</span></span><br><span class="line"><span class="number">17</span> <span class="number">7</span> <span class="number">5</span></span><br><span class="line"><span class="number">18</span> <span class="number">16</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">17</span> <span class="number">17</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">11</span> <span class="number">8</span> <span class="number">5</span></span><br><span class="line"><span class="number">11</span> <span class="number">14</span> <span class="number">5</span></span><br><span class="line"><span class="number">12</span> <span class="number">19</span> <span class="number">6</span></span><br><span class="line"><span class="number">17</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">17</span> <span class="number">15</span> <span class="number">6</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">12</span> <span class="number">5</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">18</span> <span class="number">8</span></span><br><span class="line"><span class="number">13</span> <span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">16</span> <span class="number">14</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">11</span> <span class="number">7</span></span><br><span class="line"><span class="number">12</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">16</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span> <span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">15</span> <span class="number">3</span></span><br><span class="line"><span class="number">14</span> <span class="number">14</span> <span class="number">10</span></span><br><span class="line"><span class="number">15</span> <span class="number">9</span> <span class="number">6</span></span><br><span class="line"><span class="number">15</span> <span class="number">14</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">19</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">19</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">6</span></span><br><span class="line"><span class="number">6</span> <span class="number">16</span> <span class="number">6</span></span><br><span class="line"><span class="number">9</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">10</span> <span class="number">18</span> <span class="number">9</span></span><br><span class="line"><span class="number">15</span> <span class="number">7</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">7</span> <span class="number">6</span></span><br><span class="line"><span class="number">13</span> <span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">15</span> <span class="number">16</span> <span class="number">6</span></span><br><span class="line"><span class="number">17</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">19</span> <span class="number">15</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">15</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">17</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">17</span> <span class="number">7</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">14</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">18</span> <span class="number">1</span></span><br><span class="line"><span class="number">15</span> <span class="number">15</span> <span class="number">8</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">10</span></span><br><span class="line"><span class="number">6</span> <span class="number">9</span> <span class="number">10</span></span><br><span class="line"><span class="number">6</span> <span class="number">16</span> <span class="number">6</span></span><br><span class="line"><span class="number">14</span> <span class="number">15</span> <span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">2</span> <span class="number">17</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">18</span> <span class="number">9</span></span><br><span class="line"><span class="number">12</span> <span class="number">3</span> <span class="number">8</span></span><br><span class="line"><span class="number">13</span> <span class="number">11</span> <span class="number">10</span></span><br><span class="line"><span class="number">13</span> <span class="number">19</span> <span class="number">7</span></span><br><span class="line"><span class="number">14</span> <span class="number">12</span> <span class="number">4</span></span><br><span class="line"><span class="number">15</span> <span class="number">4</span> <span class="number">9</span></span><br><span class="line"><span class="number">17</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="number">19</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">17</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">10</span> <span class="number">20</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">6</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">10</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">9</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-3</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-2</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">-1</span> <span class="number">2</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">19</span> <span class="number">19</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><h4 id="样例3"><a href="#样例3" class="headerlink" title="样例3"></a>样例3</h4><h5 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">11</span></span><br><span class="line"><span class="number">-22324</span> <span class="number">-8307</span> <span class="number">9206</span> <span class="number">122</span> <span class="number">-7218</span> <span class="number">21649</span> <span class="number">-16209</span> <span class="number">11639</span> <span class="number">3813</span> <span class="number">12960</span> <span class="number">15895</span></span><br><span class="line"><span class="number">-6355</span> <span class="number">8061</span> <span class="number">-4443</span> <span class="number">9028</span> <span class="number">-2663</span> <span class="number">20150</span> <span class="number">6485</span> <span class="number">8100</span> <span class="number">-12939</span> <span class="number">-1189</span> <span class="number">-8954</span></span><br><span class="line"><span class="number">17884</span> <span class="number">-3031</span> <span class="number">-10317</span> <span class="number">6894</span> <span class="number">9240</span> <span class="number">-1078</span> <span class="number">9344</span> <span class="number">-16194</span> <span class="number">-1543</span> <span class="number">-16063</span> <span class="number">-15494</span></span><br><span class="line"><span class="number">-19732</span> <span class="number">3868</span> <span class="number">-25565</span> <span class="number">1922</span> <span class="number">4300</span> <span class="number">8148</span> <span class="number">-13256</span> <span class="number">4611</span> <span class="number">2077</span> <span class="number">26163</span> <span class="number">10738</span></span><br><span class="line"><span class="number">10610</span> <span class="number">-2944</span> <span class="number">6357</span> <span class="number">4205</span> <span class="number">-12046</span> <span class="number">2795</span> <span class="number">13566</span> <span class="number">18396</span> <span class="number">11768</span> <span class="number">-5985</span> <span class="number">-3455</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">13</span></span><br><span class="line"><span class="number">156</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">11</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">11</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">12</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">13</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">13</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">11</span> <span class="number">3</span></span><br><span class="line"><span class="number">6</span> <span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">11</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">10</span> <span class="number">1</span></span><br><span class="line"><span class="number">8</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">8</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">13</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">9</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">9</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">13</span> <span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">7</span> <span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">10</span> <span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">11</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">12</span> <span class="number">3</span></span><br><span class="line"><span class="number">10</span> <span class="number">13</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">11</span> <span class="number">8</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">9</span> <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">11</span> <span class="number">3</span></span><br><span class="line"><span class="number">11</span> <span class="number">12</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">13</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">12</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">8</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">9</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">10</span> <span class="number">2</span></span><br><span class="line"><span class="number">12</span> <span class="number">11</span> <span class="number">1</span></span><br><span class="line"><span class="number">12</span> <span class="number">12</span> <span class="number">1</span></span><br><span class="line"><span class="number">12</span> <span class="number">13</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">16143</span> <span class="number">13975</span> <span class="number">16499</span> <span class="number">16583</span> <span class="number">13958</span> </span><br><span class="line"><span class="number">14052</span> <span class="number">12162</span> <span class="number">14360</span> <span class="number">14438</span> <span class="number">12152</span> </span><br><span class="line"><span class="number">12440</span> <span class="number">10759</span> <span class="number">12704</span> <span class="number">12777</span> <span class="number">10751</span> </span><br><span class="line"><span class="number">15373</span> <span class="number">13308</span> <span class="number">15713</span> <span class="number">15794</span> <span class="number">13293</span> </span><br><span class="line"><span class="number">17168</span> <span class="number">14856</span> <span class="number">17540</span> <span class="number">17632</span> <span class="number">14838</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1945386</span> <span class="number">1782533</span> <span class="number">1254468</span> <span class="number">1903751</span> <span class="number">1285027</span> </span><br><span class="line"><span class="number">1693395</span> <span class="number">1551629</span> <span class="number">1091979</span> <span class="number">1657151</span> <span class="number">1118577</span> </span><br><span class="line"><span class="number">1498468</span> <span class="number">1373016</span> <span class="number">966290</span> <span class="number">1466390</span> <span class="number">989824</span> </span><br><span class="line"><span class="number">1852660</span> <span class="number">1697571</span> <span class="number">1194674</span> <span class="number">1813009</span> <span class="number">1223776</span> </span><br><span class="line"><span class="number">2068355</span> <span class="number">1895207</span> <span class="number">1333773</span> <span class="number">2024085</span> <span class="number">1366260</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1945386</span> <span class="number">1782533</span> <span class="number">1254468</span> <span class="number">1903751</span> <span class="number">1285027</span> </span><br><span class="line"><span class="number">1693395</span> <span class="number">1551629</span> <span class="number">1091979</span> <span class="number">1657151</span> <span class="number">1118577</span> </span><br><span class="line"><span class="number">1498468</span> <span class="number">1373016</span> <span class="number">966290</span> <span class="number">1466390</span> <span class="number">989824</span> </span><br><span class="line"><span class="number">1852660</span> <span class="number">1697571</span> <span class="number">1194674</span> <span class="number">1813009</span> <span class="number">1223776</span> </span><br><span class="line"><span class="number">2068355</span> <span class="number">1895207</span> <span class="number">1333773</span> <span class="number">2024085</span> <span class="number">1366260</span> </span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">16</span> <span class="number">11</span> <span class="number">20</span> <span class="number">22</span> <span class="number">23</span> </span><br><span class="line"><span class="number">15</span> <span class="number">10</span> <span class="number">19</span> <span class="number">22</span> <span class="number">24</span> </span><br><span class="line"><span class="number">14</span> <span class="number">8</span> <span class="number">17</span> <span class="number">15</span> <span class="number">18</span> </span><br><span class="line"><span class="number">14</span> <span class="number">9</span> <span class="number">18</span> <span class="number">16</span> <span class="number">17</span> </span><br><span class="line"><span class="number">15</span> <span class="number">9</span> <span class="number">19</span> <span class="number">17</span> <span class="number">20</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">192</span> <span class="number">135</span> <span class="number">260</span> <span class="number">234</span> <span class="number">202</span> </span><br><span class="line"><span class="number">187</span> <span class="number">130</span> <span class="number">255</span> <span class="number">229</span> <span class="number">198</span> </span><br><span class="line"><span class="number">150</span> <span class="number">108</span> <span class="number">202</span> <span class="number">184</span> <span class="number">156</span> </span><br><span class="line"><span class="number">156</span> <span class="number">111</span> <span class="number">208</span> <span class="number">188</span> <span class="number">160</span> </span><br><span class="line"><span class="number">167</span> <span class="number">119</span> <span class="number">225</span> <span class="number">204</span> <span class="number">173</span> </span><br></pre></td></tr></table></figure><h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><p>2s, 64MB for each test case.</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;定义结构体matrixTerm，成员为矩阵元素所在的行row，矩阵元素所在的列col，矩阵元素的值value。<br>&emsp;&emsp;在数组描述线性表arrayList的基础上增加方法reSet,set,clear。reSet方法把线性表元素个数改为newSize，必要时增大数组容量，set方法使元素theElement成为表中索引为theIndex的元素，clear方法使表的元素个数为0。增加赋值运算符重载方法，实现一个线性表对当前线性表的赋值。<br>&emsp;&emsp;使用数组存储结构，按照行主映射，封装稀疏矩阵类sparseMatrix，私有成员包括矩阵的行数rows和列数cols，非0项表terms。公有成员包括构造函数，复制构造函数，析构函数，对赋值运算符的重载，重置矩阵，矩阵转置，矩阵相加，矩阵相乘，输入矩阵，输出矩阵。每个方法的具体思想如下：<br>&emsp;&emsp;reSet：重置矩阵。清空terms表，首先读入矩阵的行数和列数，然后按照行列读入元素值，读入后判断元素值是否为0，若不为0，对三元组mTerm的row，col，value赋值，将mTerm插入到terms中的合适位置。<br>&emsp;&emsp;transpose：矩阵转置。创建稀疏矩阵类的对象b用来保存* this的转置，设置转置矩阵的特征，通过colSize和rowNext找出b中每一行的起点，利用迭代器遍历* this的terms表中的每个元素，通过rowNext的记录将b中对应位置的元素设置为mTerm，最后将b赋值给* this。<br>&emsp;&emsp;add：矩阵相加。创建稀疏矩阵类的对象b，调用input方法读入稀疏矩阵。根据矩阵加法的定义判断* this和b是否可以相加，若不能输出-1然后返回，若能，创建稀疏矩阵类的对象c存储相加结果，设置c的特征，首先通过循环利用迭代器遍历* this和b，把相关的项相加，每次相加分为三种情况进行考虑，b项在后，t项在后，两项在同一个位置。循环结束后对* this或b中剩余的元素进行处理，将其插入到c中terms表的合适位置。最后将c赋值给* this。<br>&emsp;&emsp;multiply：矩阵相乘。创建稀疏矩阵类的对象b，调用input方法读入稀疏矩阵。根据矩阵乘法的定义判断* this和b是否可以相乘，若不能输出-1然后返回，若能，创建稀疏矩阵类的对象c存储相乘结果，设置c的特征。与矩阵转置类似，先通过循环寻找b中每一行的项的数目和每一行的起点。通过循环利用迭代器遍历* this，根据rowNext和rowSize在内部嵌套一层循环把相关的项相乘，两层循环结束后将非零元素插入到c中terms表的合适位置。最后将c赋值给* this。<br>&emsp;&emsp;input：输入矩阵。首先输入矩阵的特征rows，cols，numberOfTerms，调用terms的reSet方法，确定terms的长度，然后循环读入每个非零元素，通过terms的set方法将terms对应位置的值设置为mTerm。<br>&emsp;&emsp;output：输出矩阵。首先输出矩阵的行数和列数，然后定义迭代器i和iEnd，设计两层循环，判断当前位置是否是i所指的三元组的位置，若是则表明当前位置是非零元素，输出三元组对应位置的value值，然后i++，若不是则输出0。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">arrayList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> listSize;           <span class="comment">//线性表的元素个数</span></span><br><span class="line">    <span class="keyword">int</span> arrayLength;        <span class="comment">//一维数组的容量</span></span><br><span class="line">    T* element;             <span class="comment">//存储线性表的一维数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">arrayList</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);      <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">arrayList</span>(<span class="keyword">const</span> arrayList&amp; theList);    <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">arrayList</span>();                           <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ADT方法</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> listSize==<span class="number">0</span>;&#125;    <span class="comment">//判断线性表是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> listSize;&#125;         <span class="comment">//返回线性表的大小</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">get</span><span class="params">(<span class="keyword">int</span> theIndex)</span> <span class="keyword">const</span></span>;                 <span class="comment">//返回索引为theIndex的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">const</span> T&amp; theElement)</span> <span class="keyword">const</span></span>;     <span class="comment">//返回元素theElement第一次出现时的索引，若不存在返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> theIndex)</span></span>;                   <span class="comment">//删除索引为theIndex的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement)</span></span>;<span class="comment">//在索引为theIndex处插入元素theElement</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(ostream&amp; out)</span> <span class="keyword">const</span></span>;            <span class="comment">//把线性表插入输入流</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> arrayLength;&#125;  <span class="comment">//返回一维数组容量的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//运算符重载</span></span><br><span class="line">    arrayList&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> arrayList&lt;T&gt;&amp; a)</span><br><span class="line">    &#123;<span class="comment">//赋值运算符重载，使用前必须先调用reSet方法</span></span><br><span class="line">        <span class="built_in">copy</span>(a.element,a.element+a.listSize,element);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扩展方法</span></span><br><span class="line">    <span class="comment">//用于稀疏矩阵的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reSet</span><span class="params">(<span class="keyword">int</span> newSize)</span></span>;    <span class="comment">//把线性表元素个数改为newSize，必要时增大数组容量</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement)</span></span>; <span class="comment">//使元素theElement成为表中索引为theIndex的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;   <span class="comment">//使表的元素个数为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        T* position;    <span class="comment">//指向表元素的指针</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//用C++的typedef语句实现双向迭代器</span></span><br><span class="line">        <span class="keyword">typedef</span> bidirectional_iterator_tag __iterator_category;</span><br><span class="line">        <span class="keyword">typedef</span> T value_type;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">        <span class="keyword">typedef</span> T* pointer;</span><br><span class="line">        <span class="keyword">typedef</span> T&amp; reference;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">iterator</span>(T* thePosition=<span class="number">0</span>) <span class="comment">//构造函数</span></span><br><span class="line">        &#123;</span><br><span class="line">            position=thePosition;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解引用操作符</span></span><br><span class="line">        T&amp; <span class="keyword">operator</span>* () <span class="keyword">const</span> &#123;<span class="keyword">return</span> *position;&#125;</span><br><span class="line">        T* <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;*position;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器加法操作</span></span><br><span class="line">        iterator&amp; <span class="keyword">operator</span>++ ()<span class="comment">//前++</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++position;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator <span class="keyword">operator</span>++ (<span class="keyword">int</span>)<span class="comment">//后++</span></span><br><span class="line">        &#123;</span><br><span class="line">            iterator old=*<span class="keyword">this</span>;</span><br><span class="line">            ++position;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器减法操作</span></span><br><span class="line">        iterator&amp; <span class="keyword">operator</span>-- ()<span class="comment">//前--</span></span><br><span class="line">        &#123;</span><br><span class="line">            --position;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator <span class="keyword">operator</span>-- (<span class="keyword">int</span>)<span class="comment">//后--</span></span><br><span class="line">        &#123;</span><br><span class="line">            iterator old=*<span class="keyword">this</span>;</span><br><span class="line">            --position;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相等检验</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>!= (<span class="keyword">const</span> iterator right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> position!=right.position;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> iterator right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> position==right.position;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">iterator</span>(element);&#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">iterator</span>(element+listSize);&#125;</span><br><span class="line">    <span class="comment">//iterator setIterator(int offset) const &#123;return iterator(element+offset);&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayList&lt;T&gt;::<span class="built_in">arrayList</span>(<span class="keyword">int</span> initialCapacity)</span><br><span class="line">&#123;<span class="comment">//构造函数</span></span><br><span class="line">    arrayLength=initialCapacity;</span><br><span class="line">    element=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    listSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayList&lt;T&gt;::<span class="built_in">arrayList</span>(<span class="keyword">const</span> arrayList&amp; theList)</span><br><span class="line">&#123;<span class="comment">//复制构造函数</span></span><br><span class="line">    arrayLength=theList.arrayLength;</span><br><span class="line">    listSize=theList.listSize;</span><br><span class="line">    element=<span class="keyword">new</span> T[arrayLength];</span><br><span class="line">    <span class="built_in">copy</span>(theList.element,theList.element+listSize,element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">arrayList&lt;T&gt;::~<span class="built_in">arrayList</span>()</span><br><span class="line">&#123;<span class="comment">//析构函数</span></span><br><span class="line">    <span class="keyword">delete</span> []element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">T&amp; arrayList&lt;T&gt;::<span class="built_in">get</span>(<span class="keyword">int</span> theIndex) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回索引为theIndex的元素</span></span><br><span class="line">    <span class="keyword">return</span> element[theIndex];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> arrayList&lt;T&gt;::<span class="built_in">indexOf</span>(<span class="keyword">const</span> T&amp; theElement) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//返回元素theElement第一次出现时的索引，若不存在返回-1</span></span><br><span class="line">    <span class="comment">//查找元素theElement</span></span><br><span class="line">    <span class="keyword">int</span> theIndex=(<span class="keyword">int</span>) (<span class="built_in">find</span>(element,element+listSize,theElement)-element);</span><br><span class="line">    <span class="comment">//确定元素theElement是否找到</span></span><br><span class="line">    <span class="keyword">if</span>(theIndex==listSize)  <span class="comment">//没有找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//已经找到</span></span><br><span class="line">        <span class="keyword">return</span> theIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">int</span> theIndex)</span><br><span class="line">&#123;<span class="comment">//删除索引为theIndex的元素</span></span><br><span class="line">    <span class="comment">//移动其索引大于theIndex的元素</span></span><br><span class="line">    <span class="built_in">copy</span>(element+theIndex+<span class="number">1</span>,element+listSize,element+theIndex);</span><br><span class="line">    element[--listSize].~<span class="built_in">T</span>();   <span class="comment">//调用析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//在索引为theIndex处插入元素theElement</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listSize==arrayLength)   <span class="comment">//确定数组是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        T* Nelement=<span class="keyword">new</span> T[arrayLength*<span class="number">2</span>];</span><br><span class="line">        arrayLength=arrayLength*<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">copy</span>(element,element+listSize,Nelement);</span><br><span class="line">        <span class="keyword">delete</span> []element;</span><br><span class="line">        element=Nelement;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把元素向右移动一个位置</span></span><br><span class="line">    <span class="built_in">copy_backward</span>(element+theIndex,element+listSize,element+listSize+<span class="number">1</span>);</span><br><span class="line">    element[theIndex]=theElement;</span><br><span class="line">    listSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">output</span>(ostream&amp; out) <span class="keyword">const</span></span><br><span class="line">&#123;<span class="comment">//把线性表插入输入流</span></span><br><span class="line">    <span class="built_in">copy</span>(element,element+listSize,ostream_iterator&lt;T&gt;(cout,<span class="string">&quot; &quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out,<span class="keyword">const</span> arrayList&lt;T&gt;&amp; x)</span><br><span class="line">&#123;<span class="comment">//重载&lt;&lt;</span></span><br><span class="line">    x.<span class="built_in">output</span>(out);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">reSet</span>(<span class="keyword">int</span> newSize)</span><br><span class="line">&#123;<span class="comment">//把线性表元素个数改为newSize，必要时增大数组容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newSize==<span class="number">0</span>)  <span class="comment">//设置为空表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;listSize;i++)</span><br><span class="line">            element[i].~<span class="built_in">T</span>();</span><br><span class="line">        listSize=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(listSize==newSize)</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(listSize&gt;newSize)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=newSize;i&lt;listSize;i++)</span><br><span class="line">            element[i].~<span class="built_in">T</span>();</span><br><span class="line">        listSize=newSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//listSize&lt;newSize</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arrayLength&gt;=newSize) <span class="comment">//数组容量足够</span></span><br><span class="line">        &#123;</span><br><span class="line">            listSize=newSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//数组容量不够</span></span><br><span class="line">        &#123;</span><br><span class="line">            T* Nelement=<span class="keyword">new</span> T[newSize];</span><br><span class="line">            <span class="keyword">delete</span> []element;</span><br><span class="line">            element=Nelement;</span><br><span class="line">            arrayLength=newSize;</span><br><span class="line">            listSize=newSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">set</span>(<span class="keyword">int</span> theIndex,<span class="keyword">const</span> T&amp; theElement)</span><br><span class="line">&#123;<span class="comment">//使元素theElement成为表中索引为theIndex的元素</span></span><br><span class="line">    element[theIndex]=theElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> arrayList&lt;T&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;<span class="comment">//使表的元素个数为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;listSize;i++)</span><br><span class="line">        element[i].~<span class="built_in">T</span>();</span><br><span class="line">    listSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrixTerm</span>   //三元组</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> row,col;    <span class="comment">//矩阵元素所在行和所在列</span></span><br><span class="line">    T value;        <span class="comment">//矩阵元素的值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sparseMatrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> rows,cols;                      <span class="comment">//矩阵的行数和列数</span></span><br><span class="line">    arrayList&lt;matrixTerm&lt;T&gt;&gt; terms;     <span class="comment">//非0项表</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//构造函数、复制构造函数和析构函数</span></span><br><span class="line">    <span class="built_in">sparseMatrix</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">sparseMatrix</span>(<span class="keyword">const</span> sparseMatrix&lt;T&gt;&amp; x):<span class="built_in">terms</span>(x.terms),<span class="built_in">rows</span>(x.rows),<span class="built_in">cols</span>(x.cols) &#123;&#125;</span><br><span class="line">    ~<span class="built_in">sparseMatrix</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reSet</span><span class="params">()</span></span>;       <span class="comment">//重置矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transpose</span><span class="params">()</span></span>;   <span class="comment">//矩阵转置</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;         <span class="comment">//矩阵相加</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">()</span></span>;         <span class="comment">//矩阵相乘</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;       <span class="comment">//输入矩阵</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>;      <span class="comment">//输出矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//运算符重载</span></span><br><span class="line">    sparseMatrix&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> sparseMatrix&lt;T&gt;&amp; x);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">reSet</span>()</span><br><span class="line">&#123;<span class="comment">//重置矩阵</span></span><br><span class="line"></span><br><span class="line">    terms.<span class="built_in">clear</span>();  <span class="comment">//清空表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value;      <span class="comment">//输入的矩阵元素值</span></span><br><span class="line">    <span class="keyword">int</span> mSize=<span class="number">0</span>;    <span class="comment">//插入三元组线性表的位置</span></span><br><span class="line">    matrixTerm&lt;T&gt; mTerm;</span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;rows&gt;&gt;cols;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rows;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cols;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;value;</span><br><span class="line">            <span class="keyword">if</span>(value!=<span class="number">0</span>)    <span class="comment">//非零元素插入线性表</span></span><br><span class="line">            &#123;</span><br><span class="line">                mTerm.row=i;</span><br><span class="line">                mTerm.col=j;</span><br><span class="line">                mTerm.value=value;</span><br><span class="line">                terms.<span class="built_in">insert</span>(mSize,mTerm);</span><br><span class="line">                mSize++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">transpose</span>()</span><br><span class="line">&#123;<span class="comment">//b保存*this的转置，再将b赋值给*this</span></span><br><span class="line"></span><br><span class="line">    sparseMatrix&lt;T&gt; b;  <span class="comment">//保存*this的转置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置转置矩阵的特征</span></span><br><span class="line">    b.cols=rows;</span><br><span class="line">    b.rows=cols;</span><br><span class="line">    b.terms.<span class="built_in">reSet</span>(terms.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化以实现转置</span></span><br><span class="line">    <span class="keyword">int</span>* colSize=<span class="keyword">new</span> <span class="keyword">int</span>[cols+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>* rowNext=<span class="keyword">new</span> <span class="keyword">int</span>[cols+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找*this中每一列的项的数目</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cols;i++)<span class="comment">//初始化</span></span><br><span class="line">        colSize[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator i=terms.<span class="built_in">begin</span>();i!=terms.<span class="built_in">end</span>();i++)</span><br><span class="line">        colSize[(*i).col]++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找b中每一行的起点</span></span><br><span class="line">    rowNext[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cols;i++)</span><br><span class="line">        rowNext[i]=rowNext[i<span class="number">-1</span>]+colSize[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实施从*this到b的转置复制</span></span><br><span class="line">    matrixTerm&lt;T&gt; mTerm;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator i=terms.<span class="built_in">begin</span>();i!=terms.<span class="built_in">end</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=rowNext[(*i).col]++;  <span class="comment">//b中的位置</span></span><br><span class="line">        mTerm.row=(*i).col;</span><br><span class="line">        mTerm.col=(*i).row;</span><br><span class="line">        mTerm.value=(*i).value;</span><br><span class="line">        b.terms.<span class="built_in">set</span>(j,mTerm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []colSize;</span><br><span class="line">    <span class="keyword">delete</span> []rowNext;</span><br><span class="line">    *<span class="keyword">this</span>=b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">add</span>()</span><br><span class="line">&#123;<span class="comment">//计算c=(*this)+b，再将c赋值给*this</span></span><br><span class="line"></span><br><span class="line">    sparseMatrix&lt;T&gt; b;  <span class="comment">//和*this做加法的矩阵</span></span><br><span class="line">    b.<span class="built_in">input</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不满足矩阵相加的条件</span></span><br><span class="line">    <span class="keyword">if</span>(rows!=b.rows||cols!=b.cols)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span>=b;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//printf(&quot;-1\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以进行矩阵相加</span></span><br><span class="line"></span><br><span class="line">    sparseMatrix&lt;T&gt; c;  <span class="comment">//结果矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置结果为矩阵c的特征</span></span><br><span class="line">    c.rows=rows;</span><br><span class="line">    c.cols=cols;</span><br><span class="line">    c.terms.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> cSize=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义*this和b的迭代器</span></span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator it=terms.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ib=b.terms.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator itEnd=terms.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ibEnd=b.terms.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历*this和b，把相关的项相加</span></span><br><span class="line">    <span class="keyword">while</span>(it!=itEnd &amp;&amp; ib!=ibEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//行主索引加上每一行的列数</span></span><br><span class="line">        <span class="keyword">int</span> tIndex=(*it).row*cols+(*it).col;</span><br><span class="line">        <span class="keyword">int</span> bIndex=(*ib).row*cols+(*ib).col;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tIndex&lt;bIndex)</span><br><span class="line">        &#123;<span class="comment">//b项在后</span></span><br><span class="line">            c.terms.<span class="built_in">insert</span>(cSize++,*it);</span><br><span class="line">            it++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tIndex==bIndex)</span><br><span class="line">        &#123;<span class="comment">//两项在同一个位置</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//仅当相加后不为0时加入c</span></span><br><span class="line">            <span class="keyword">if</span>((*it).value+(*ib).value!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                matrixTerm&lt;T&gt; mTerm;</span><br><span class="line">                mTerm.row=(*it).row;</span><br><span class="line">                mTerm.col=(*it).col;</span><br><span class="line">                mTerm.value=(*it).value+(*ib).value;</span><br><span class="line">                c.terms.<span class="built_in">insert</span>(cSize++,mTerm);</span><br><span class="line">            &#125;</span><br><span class="line">            it++;</span><br><span class="line">            ib++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//t项在后</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.terms.<span class="built_in">insert</span>(cSize++,*ib);</span><br><span class="line">            ib++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制剩余项</span></span><br><span class="line">    <span class="keyword">for</span>(;it!=itEnd;it++)</span><br><span class="line">        c.terms.<span class="built_in">insert</span>(cSize++,*it);</span><br><span class="line">    <span class="keyword">for</span>(;ib!=ibEnd;ib++)</span><br><span class="line">        c.terms.<span class="built_in">insert</span>(cSize++,*ib);</span><br><span class="line"></span><br><span class="line">    *<span class="keyword">this</span>=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">mul</span>()</span><br><span class="line">&#123;<span class="comment">//计算c=(*this)*b，再将c赋值给*this</span></span><br><span class="line"></span><br><span class="line">    sparseMatrix&lt;T&gt; b;  <span class="comment">//和*this做乘法的矩阵</span></span><br><span class="line">    b.<span class="built_in">input</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不满足矩阵相乘的条件</span></span><br><span class="line">    <span class="keyword">if</span>(cols!=b.rows)</span><br><span class="line">    &#123;</span><br><span class="line">        *<span class="keyword">this</span>=b;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//printf(&quot;-1\n&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以进行矩阵相乘</span></span><br><span class="line">    sparseMatrix&lt;T&gt; c;  <span class="comment">//结果矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置结果为矩阵c的特征</span></span><br><span class="line">    c.rows=rows;</span><br><span class="line">    c.cols=b.cols;</span><br><span class="line">    c.terms.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">int</span> cSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//rowSize表示第i行元素的数目，rowNext表示第i行首元素的位置，0号位置不用</span></span><br><span class="line">    <span class="keyword">int</span>* rowSize=<span class="keyword">new</span> <span class="keyword">int</span>[b.rows+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span>* rowNext=<span class="keyword">new</span> <span class="keyword">int</span>[b.rows+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找b中每一行的项的数目</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=b.rows;i++)  <span class="comment">//初始化</span></span><br><span class="line">        rowSize[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator i=b.terms.<span class="built_in">begin</span>();i!=b.terms.<span class="built_in">end</span>();i++)</span><br><span class="line">        rowSize[(*i).row]++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找b中每一行的起点</span></span><br><span class="line">    rowNext[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cols;i++)</span><br><span class="line">        rowNext[i]=rowNext[i<span class="number">-1</span>]+rowSize[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义*this的迭代器</span></span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator itEnd=terms.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    matrixTerm&lt;T&gt; sumTerm[c.rows*c.cols];   <span class="comment">//保存计算结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.rows*c.cols;i++)    <span class="comment">//初始化</span></span><br><span class="line">        sumTerm[i].value=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator it=terms.<span class="built_in">begin</span>();it!=itEnd;it++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*方法一：定义指向线性表首元素的迭代器，根据rowNext的值移动迭代器到合适位置</span></span><br><span class="line"><span class="comment">        typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ib=b.terms.begin();</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;rowNext[(*it).col];i++)   //移动迭代器</span></span><br><span class="line"><span class="comment">            ib++;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*方法二：在arrayList中增加方法setIterator，可直接声明指向线性表任意位置的迭代器</span></span><br><span class="line"><span class="comment">        typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ib=b.terms.setIterator(rowNext[(*it).col]);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*方法一和方法二实现相乘</span></span><br><span class="line"><span class="comment">        for(int k=0;k&lt;rowSize[(*it).col];k++)   //相关的两个元素相乘</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].value+=(*it).value * (*ib).value;</span></span><br><span class="line"><span class="comment">            //确定行数和列数</span></span><br><span class="line"><span class="comment">            sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].row=(*it).row;</span></span><br><span class="line"><span class="comment">            sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].col=(*ib).col;</span></span><br><span class="line"><span class="comment">            ib++;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法三：使用terms的get方法</span></span><br><span class="line">        <span class="keyword">int</span> iib=rowNext[(*it).col];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;rowSize[(*it).col];k++)</span><br><span class="line">        &#123;</span><br><span class="line">            sumTerm[(((*it).row<span class="number">-1</span>) * c.cols) + b.terms.<span class="built_in">get</span>(iib).col<span class="number">-1</span>].value+=(*it).value * b.terms.<span class="built_in">get</span>(iib).value;</span><br><span class="line">            <span class="comment">//确定行数和列数</span></span><br><span class="line">            sumTerm[(((*it).row<span class="number">-1</span>) * c.cols) + b.terms.<span class="built_in">get</span>(iib).col<span class="number">-1</span>].row=(*it).row;</span><br><span class="line">            sumTerm[(((*it).row<span class="number">-1</span>) * c.cols) + b.terms.<span class="built_in">get</span>(iib).col<span class="number">-1</span>].col=b.terms.<span class="built_in">get</span>(iib).col;</span><br><span class="line">            iib++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;c.rows*c.cols;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sumTerm[i].value!=<span class="number">0</span>) <span class="comment">//非零元素插入到三元组的线性表中</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.terms.<span class="built_in">insert</span>(cSize++, sumTerm[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> []rowSize;</span><br><span class="line">    <span class="keyword">delete</span> []rowNext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*矩阵乘法O(n^4)实现方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //定义*this和b的迭代器</span></span><br><span class="line"><span class="comment">    typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator itEnd=terms.end();</span></span><br><span class="line"><span class="comment">    typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ibEnd=b.terms.end();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    matrixTerm&lt;T&gt; sumTerm[c.rows*c.cols];   //保存计算结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;c.rows*c.cols;i++)    //初始化</span></span><br><span class="line"><span class="comment">        sumTerm[i].value=0;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for(typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator it=terms.begin();it!=itEnd;it++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        for(typename arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator ib=b.terms.begin();ib!=ibEnd;ib++)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            if((*it).col==(*ib).row)    //相关的两个元素相乘</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">                sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].value+=(*it).value * (*ib).value;</span></span><br><span class="line"><span class="comment">                //确定行数和列数</span></span><br><span class="line"><span class="comment">                sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].row=(*it).row;</span></span><br><span class="line"><span class="comment">                sumTerm[(((*it).row-1) * c.cols) + (*ib).col-1].col=(*ib).col;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;c.rows*c.cols;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(sumTerm[i].value!=0) //非零元素插入到三元组的线性表中</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            c.terms.insert(cSize++, sumTerm[i]);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    *<span class="keyword">this</span>=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">input</span>()</span><br><span class="line">&#123;<span class="comment">//输入一个稀疏矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入矩阵特征</span></span><br><span class="line">    <span class="keyword">int</span> numberOfTerms;  <span class="comment">//非零元素个数</span></span><br><span class="line">    cin&gt;&gt;rows&gt;&gt;cols&gt;&gt;numberOfTerms;</span><br><span class="line"></span><br><span class="line">    terms.<span class="built_in">reSet</span>(numberOfTerms);</span><br><span class="line">    matrixTerm&lt;T&gt; mTerm;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numberOfTerms;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;mTerm.row&gt;&gt;mTerm.col&gt;&gt;mTerm.value;</span><br><span class="line">        terms.<span class="built_in">set</span>(i,mTerm);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> sparseMatrix&lt;T&gt;::<span class="built_in">output</span>()</span><br><span class="line">&#123;<span class="comment">//输出一个稀疏矩阵</span></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;rows&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;cols&lt;&lt;endl;    <span class="comment">//输出矩阵的行数和列数</span></span><br><span class="line">    <span class="comment">//printf(&quot;%d %d\n&quot;,rows,cols);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator i=terms.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">typename</span> arrayList&lt;matrixTerm&lt;T&gt;&gt;::iterator iEnd=terms.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">int</span> val;    <span class="comment">//元素值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=rows;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cols;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            val=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(k==(*i).row &amp;&amp; j==(*i).col &amp;&amp;i!=iEnd)  <span class="comment">//不是非零元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                val=(*i).value; <span class="comment">//非零元素的值</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;val&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="comment">//printf(&quot;%d &quot;,val);</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">sparseMatrix&lt;T&gt;&amp; sparseMatrix&lt;T&gt;::<span class="keyword">operator</span>=(<span class="keyword">const</span> sparseMatrix&lt;T&gt; &amp;x)</span><br><span class="line">&#123;<span class="comment">//赋值运算符重载</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;x)    <span class="comment">//自我复制</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    terms.<span class="built_in">reSet</span>(x.terms.<span class="built_in">size</span>());</span><br><span class="line">    terms=x.terms;</span><br><span class="line">    rows=x.rows;</span><br><span class="line">    cols=x.cols;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w;                  <span class="comment">//操作个数</span></span><br><span class="line">    <span class="keyword">int</span> instruction;        <span class="comment">//指令编号</span></span><br><span class="line">    sparseMatrix&lt;<span class="keyword">int</span>&gt; s;    <span class="comment">//创建对象</span></span><br><span class="line"></span><br><span class="line">    cin&gt;&gt;w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;w;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                s.<span class="built_in">reSet</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                s.<span class="built_in">mul</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                s.<span class="built_in">add</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                s.<span class="built_in">output</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                s.<span class="built_in">transpose</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.本题时间限制为2s，只有当稀疏矩阵乘法的时间复杂度为O(n^3)(n为矩阵的行数)时才能保证不超时，O(n^4)最后2个节点会超时。<br>如果对于* this中的每一个元素，遍历b中每一个元素，比较所在行和列判断是否需要相乘，时间复杂度是O(n^4)，n为矩阵行数。优化方法与矩阵转置中的思想类似，先通过循环寻找b中每一行的元素个数和每一行的起点，对于* this中的某一个元素，由* this所在的列直接找出b中对应的行，该行的所有元素即为需要与其相乘的元素，循环次数为b中对应行的元素个数，这样时间复杂度是O(n^3)。<br>2.对“=”的运算符重载实现一个对象赋值给当前对象，不能使用默认的赋值运算符重载函数，因为arrayList类的成员中涉及到T类型的指针element，需要深复制，重新申请内存将element所指的数组中各个元素的值依次复制过来，而默认的运算符重载实现的是浅复制，只复制指针，不能复制指针指向的数组。</p><p>PS:最后五个节点是矩阵不稀疏的情况，最大数据量为100次询问，操作为100 * 100矩阵的乘法、加法、转置（大部分是乘法）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;本文通过单个线性表（三元组）按照行主次序将稀疏矩阵映射到一维数组中，提供重置、转置、加法、乘法、输入、输出操作。稀疏矩阵类sparseMatrix在arrayList类的基础上实现，对arrayList类的方法进行了一些扩充。在代码实现过程中需要注意OJ对时间复杂度的要求，对代码进行优化。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
    <category term="稀疏矩阵" scheme="https://tongyiheng.github.io/tags/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（四）链式描述线性表</title>
    <link href="https://tongyiheng.github.io/2020/10/14/DSA/DSA_4/"/>
    <id>https://tongyiheng.github.io/2020/10/14/DSA/DSA_4/</id>
    <published>2020-10-14T12:43:06.000Z</published>
    <updated>2021-04-10T01:01:17.069Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文通过两个具体的题目实现线性表的链式描述，并为链表类封装了前向迭代器，链表类的方法包括插入、删除、原地逆置、查询、输出异或和、箱子排序、二路归并。</p><span id="more"></span><h2 id="P1005-链表实现"><a href="#P1005-链表实现" class="headerlink" title="P1005:链表实现"></a>P1005:链表实现</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.封装链表类，链表迭代器类。<br>2.链表类需提供操作：在指定位置插入元素，删除指定元素，搜索链表中是否有指定元素，原地逆置链表，输出链表。<br>3.不得使用与链表实现相关的STL。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>第一行两个整数N和Q。<br>第二行N个整数，作为节点的元素值，创建链表。<br>接下来Q行，执行各个操作，具体格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">插入操作: <span class="number">1</span> idx val  <span class="comment">//在链表的idx位置插入元素val</span></span><br><span class="line">删除操作: <span class="number">2</span> val      <span class="comment">//删除链表中的val元素。若链表中存在多个该元素，仅删除第一个。若该元素不存在，输出-1</span></span><br><span class="line">逆置操作: <span class="number">3</span>          <span class="comment">//原地逆置链表</span></span><br><span class="line">查询操作: <span class="number">4</span> val      <span class="comment">//查询链表中的 val 元素，并输出其索引。若链表中存在多个该元素，仅输出第一个的索引。若不存在该元素，输出-1</span></span><br><span class="line">输出操作: <span class="number">5</span>          <span class="comment">//使用链表迭代器，输出当前链表索引与元素的异或和</span></span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>点击右上角可直接复制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">6863</span> <span class="number">35084</span> <span class="number">11427</span> <span class="number">53377</span> <span class="number">34937</span> <span class="number">14116</span> <span class="number">5000</span> <span class="number">49692</span> <span class="number">70281</span> <span class="number">73704</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6863</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">44199</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">21466</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">11483</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">34937</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span> <span class="number">6863</span></span><br><span class="line"><span class="number">1</span> <span class="number">10</span> <span class="number">18635</span></span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">398665</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">410141</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">410141</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>1s</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;定义结构体chainNode，数据成员包含element和next，element为数据域，next为指针域。方法包括三个重载的构造函数，默认构造函数，通过元素element创建节点，通过元素element和指针next创建节点。<br>&emsp;&emsp;使用链式存储结构，封装链表类chain，保护成员包括指向链表首节点的指针firstNode和链表长度listSize。公有成员包括构造函数，复制构造函数，析构函数，以及具体的方法，包括插入操作，删除操作，原地逆置操作，查询操作，输出操作。<br>&emsp;&emsp;定义链表类的迭代器iterator，保护成员为节点类的指针node，公有成员包括构造函数，操作符重载函数（解引用操作符 * 和-&gt;，前++，后++，相等检验中的!=和==），在chain类中增加方法begin和end，返回指向链表首元素的指针和尾元素的指针。<br>&emsp;&emsp;读入数据时，按行读入，首先读入操作数instruction，根据操作数利用switch分支进行分类，再根据所属操作类别读入对应的数据，调用对应的成员函数，输出数据。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chainNode</span>           //节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数据成员</span></span><br><span class="line">    T element;</span><br><span class="line">    chainNode&lt;T&gt;* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">chainNode</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element,chainNode&lt;T&gt;* next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chain</span>                         //链表类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    chainNode&lt;T&gt;* firstNode;        <span class="comment">//指向链表第一个节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> listSize;                   <span class="comment">//线性表的元素个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">chain</span>();                        <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">chain</span>(<span class="keyword">const</span> chain&lt;T&gt;&amp; theList); <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">chain</span>();                       <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">const</span> T&amp; val)</span></span>;  <span class="comment">//在链表的idx位置插入元素val</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span>;           <span class="comment">//删除链表中的val元素。若链表中存在多个该元素，仅删除第一个；若该元素不存在，输出-1。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>;                     <span class="comment">//原地逆置链表</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> <span class="keyword">const</span></span>;     <span class="comment">//查询链表中的val元素，并输出其索引。若链表中存在多个该元素，仅输出第一个的索引；若不存在该元素，输出-1。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output</span><span class="params">()</span> <span class="keyword">const</span></span>;                 <span class="comment">//输出当前链表索引与元素的异或和</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        chainNode&lt;T&gt;* node;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//用C++的typedef语句实现前向迭代器</span></span><br><span class="line">        <span class="keyword">typedef</span> bidirectional_iterator_tag __iterator_category;</span><br><span class="line">        <span class="keyword">typedef</span> T value_type;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">        <span class="keyword">typedef</span> T* pointer;</span><br><span class="line">        <span class="keyword">typedef</span> T&amp; reference;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">iterator</span>(chainNode&lt;T&gt;* theNode=<span class="literal">NULL</span>) <span class="comment">//构造函数</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=theNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解引用操作符</span></span><br><span class="line">        T&amp; <span class="keyword">operator</span>* () <span class="keyword">const</span> &#123;<span class="keyword">return</span> node-&gt;element;&#125;</span><br><span class="line">        T* <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;node-&gt;element;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器加法操作</span></span><br><span class="line">        iterator&amp; <span class="keyword">operator</span>++ ()<span class="comment">//前++</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator <span class="keyword">operator</span>++ (<span class="keyword">int</span>)<span class="comment">//后++</span></span><br><span class="line">        &#123;</span><br><span class="line">            iterator old=*<span class="keyword">this</span>;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相等检验</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>!= (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node!=right.node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node==right.node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(firstNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::<span class="built_in">chain</span>()   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    firstNode=<span class="literal">NULL</span>;</span><br><span class="line">    listSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::<span class="built_in">chain</span>(<span class="keyword">const</span> chain&lt;T&gt;&amp; theList) <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    listSize=theList.listSize;</span><br><span class="line">    <span class="comment">//链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        firstNode=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表不为空</span></span><br><span class="line">    chainNode&lt;T&gt;* sourceNode=theList.firstNode;</span><br><span class="line">    firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);<span class="comment">//复制theList的首元素</span></span><br><span class="line">    sourceNode=sourceNode-&gt;next;</span><br><span class="line">    chainNode&lt;T&gt;* targetNode=firstNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(sourceNode!=<span class="literal">NULL</span>) <span class="comment">//复制剩余元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        targetNode-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);</span><br><span class="line">        targetNode=targetNode-&gt;next;</span><br><span class="line">        sourceNode=sourceNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    targetNode-&gt;next=<span class="literal">NULL</span>;  <span class="comment">//尾结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::~<span class="built_in">chain</span>() <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(firstNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* nextNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> firstNode;</span><br><span class="line">        firstNode=nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">int</span> idx,<span class="keyword">const</span> T&amp; val) <span class="comment">//插入操作</span></span><br><span class="line">&#123;<span class="comment">//在链表的idx位置插入元素val</span></span><br><span class="line">    <span class="keyword">if</span>(idx==<span class="number">0</span>)<span class="comment">//在链表头插入</span></span><br><span class="line">    &#123;</span><br><span class="line">        firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(val,firstNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">//寻找前驱</span></span><br><span class="line">        chainNode&lt;T&gt;* p=firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx<span class="number">-1</span>;i++)</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        <span class="comment">//在p之后插入</span></span><br><span class="line">        p-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(val,p-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    listSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T&amp; val)   <span class="comment">//删除操作</span></span><br><span class="line">&#123;<span class="comment">//删除链表中的val元素。若链表中存在多个该元素，仅删除第一个；若该元素不存在，输出-1。</span></span><br><span class="line">    chainNode&lt;T&gt;* deleteNode;   <span class="comment">//要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span>(firstNode-&gt;element==val) <span class="comment">//删除的是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        deleteNode=firstNode;</span><br><span class="line">        firstNode=firstNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//删除的不是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* previousNode=firstNode;</span><br><span class="line">        chainNode&lt;T&gt;* currentNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            currentNode=currentNode-&gt;next;</span><br><span class="line">            previousNode=previousNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentNode==<span class="literal">NULL</span>)   <span class="comment">//链表中不存在要删除的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//链表中存在要删除的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            deleteNode=currentNode;</span><br><span class="line">            previousNode-&gt;next=currentNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    listSize--;</span><br><span class="line">    <span class="keyword">delete</span> deleteNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">reverse</span>() <span class="comment">//原地逆置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>) <span class="comment">//链表为空</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* currentNode=firstNode;    <span class="comment">//当前节点</span></span><br><span class="line">        <span class="keyword">while</span>(currentNode-&gt;next)    <span class="comment">//当前节点还有后继元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            chainNode&lt;T&gt;* p=currentNode-&gt;next;  <span class="comment">//储存当前节点的后继元素</span></span><br><span class="line">            currentNode-&gt;next=p-&gt;next;          <span class="comment">//将p断开</span></span><br><span class="line">            p-&gt;next=firstNode;                  <span class="comment">//将p连在首节点的前面</span></span><br><span class="line">            firstNode=p;                        <span class="comment">//设置p为首节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">search</span>(<span class="keyword">const</span> T&amp; val) <span class="keyword">const</span>    <span class="comment">//查询操作</span></span><br><span class="line">&#123;<span class="comment">//查询链表中的val元素，并输出其索引。若链表中存在多个该元素，仅输出第一个的索引；若不存在该元素，输出-1。</span></span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;    <span class="comment">//当前节点的索引</span></span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=val)</span><br><span class="line">    &#123;</span><br><span class="line">        currentNode=currentNode-&gt;next;  <span class="comment">//移向下一个节点</span></span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定是否找到元素</span></span><br><span class="line">    <span class="keyword">if</span>(currentNode!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">output</span>() <span class="keyword">const</span> <span class="comment">//输出输出当前链表索引与元素的异或和</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>,index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(iterator i=<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>();i!=<span class="keyword">this</span>-&gt;<span class="built_in">end</span>();i++)    <span class="comment">//通过迭代器遍历链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        res+=index^*i;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;            <span class="comment">//n个整数 q行操作</span></span><br><span class="line">    <span class="keyword">int</span> value;          <span class="comment">//读取初始链表的各个元素值</span></span><br><span class="line">    <span class="keyword">int</span> instruction;    <span class="comment">//指令编号</span></span><br><span class="line">    <span class="keyword">int</span> idx,val;        <span class="comment">//读入的索引、元素信息</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"></span><br><span class="line">    chain&lt;<span class="keyword">int</span>&gt; A; <span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="comment">//将数据插入链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;value;</span><br><span class="line">        A.<span class="built_in">insert</span>(i,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行各项操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//插入操作</span></span><br><span class="line">                cin&gt;&gt;idx&gt;&gt;val;</span><br><span class="line">                A.<span class="built_in">insert</span>(idx,val);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//删除操作</span></span><br><span class="line">                cin&gt;&gt;val;</span><br><span class="line">                A.<span class="built_in">erase</span>(val);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//原地逆置</span></span><br><span class="line">                A.<span class="built_in">reverse</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">//查询操作</span></span><br><span class="line">                cin&gt;&gt;val;</span><br><span class="line">                cout&lt;&lt;A.<span class="built_in">search</span>(val)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="comment">//输出操作</span></span><br><span class="line">                cout&lt;&lt;A.<span class="built_in">output</span>()&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.迭代器可以理解为广义的指针，在链表的一些操作中，使用迭代器会减少一些操作的时间复杂度。例如，在链表chain中，从左至右访问线性表的元素时，使用get方法和使用迭代器方法，在运行时间上的差别是很大的。如果一次考察一个元素，get方法的时间复杂度为O(n^2)，迭代器方法的时间复杂度为O(n)。<br>2.对chain类可以扩展一些ADT方法，比如clear（清除表中所有元素）和push_back(theElement)（将元素theElement插入表尾）。以chain类为基类，派生出extendedChain类，在extendedChain类中增加protected成员lastNode，实现方法clear和push_back，改进erase和insert方法。</p><h2 id="P1006-链表合并"><a href="#P1006-链表合并" class="headerlink" title="P1006:链表合并"></a>P1006:链表合并</h2><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><p>1.使用题目“链表实现”中实现的链表类、迭代器类完成本题。<br>2.不得使用与题目实现相关的STL。</p><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>给定两组整数序列，你需要分别创建两个有序链表，使用链表迭代器实现链表的合并，并分别输出这三个有序链表的索引与元素的异或和。<br>Note:给定序列是无序的，你需要首先得到一个有序的链表。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>&emsp;&emsp;第一行两个整数N和M。<br>&emsp;&emsp;第二行N个整数，代表第一组整数序列。<br>&emsp;&emsp;第三行M个整数，代表第二组整数序列。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>&emsp;&emsp;三行整数。分别代表第一组数、第二组数对应的有序链表与合并后有序链表的索引与元素的异或和。</p><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>点击右上角可直接复制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h4 id="限制-1"><a href="#限制-1" class="headerlink" title="限制"></a>限制</h4><p>1s</p><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;使用已经封装的链表类和迭代器，增加方法getMax求链表元素的最大值，getMin求链表元素的最小值，binSort进行箱子排序，merge实现两个链表的归并。<br>&emsp;&emsp;binSort的两个参数为链表元素的最大值和最小值，首先判断是否是空表，若是空表直接返回。若不是空表，根据min和max的值判断链表中元素的正负，分为三种情况，均&gt;=0，均&lt;=0，有正有负，对应相应的range（范围）和offset（偏移量），再进行箱子排序。在分配箱子时，将对应元素分配到theBin+offset的箱子中，收集箱子时，按照theBin从0到range进行收集。</p><h3 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chainNode</span>           //节点类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//数据成员</span></span><br><span class="line">    T element;</span><br><span class="line">    chainNode&lt;T&gt;* next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="built_in">chainNode</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">chainNode</span>(<span class="keyword">const</span> T&amp; element,chainNode&lt;T&gt;* next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;element=element;</span><br><span class="line">        <span class="keyword">this</span>-&gt;next=next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">chain</span>                         //链表类</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    chainNode&lt;T&gt;* firstNode;        <span class="comment">//指向链表第一个节点的指针</span></span><br><span class="line">    <span class="keyword">int</span> listSize;                   <span class="comment">//线性表的元素个数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">chain</span>();                        <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">chain</span>(<span class="keyword">const</span> chain&lt;T&gt;&amp; theList); <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">chain</span>();                       <span class="comment">//析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> idx,<span class="keyword">const</span> T&amp; val)</span></span>;  <span class="comment">//在链表的idx位置插入元素val</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span>;           <span class="comment">//删除链表中的val元素。若链表中存在多个该元素，仅删除第一个；若该元素不存在，输出-1。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>;                     <span class="comment">//原地逆置链表</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span> <span class="keyword">const</span></span>;     <span class="comment">//查询链表中的val元素，并输出其索引。若链表中存在多个该元素，仅输出第一个的索引；若不存在该元素，输出-1。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">output</span><span class="params">()</span> <span class="keyword">const</span></span>;                 <span class="comment">//输出当前链表索引与元素的异或和</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> listSize;&#125; <span class="comment">//返回链表的元素个数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> <span class="keyword">const</span></span>;                 <span class="comment">//求链表中元素的最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> <span class="keyword">const</span></span>;                 <span class="comment">//求链表中元素的最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">binSort</span><span class="params">(<span class="keyword">int</span> max,<span class="keyword">int</span> min)</span></span>;      <span class="comment">//箱子排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">const</span> chain&lt;T&gt;&amp; a,<span class="keyword">const</span> chain&lt;T&gt;&amp; b)</span></span>;<span class="comment">//将链表a,b归并到当前链表中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">iterator</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        chainNode&lt;T&gt;* node;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">//用C++的typedef语句实现前向迭代器</span></span><br><span class="line">        <span class="keyword">typedef</span> bidirectional_iterator_tag __iterator_category;</span><br><span class="line">        <span class="keyword">typedef</span> T value_type;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">        <span class="keyword">typedef</span> T* pointer;</span><br><span class="line">        <span class="keyword">typedef</span> T&amp; reference;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">iterator</span>(chainNode&lt;T&gt;* theNode=<span class="literal">NULL</span>) <span class="comment">//构造函数</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=theNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解引用操作符</span></span><br><span class="line">        T&amp; <span class="keyword">operator</span>* () <span class="keyword">const</span> &#123;<span class="keyword">return</span> node-&gt;element;&#125;</span><br><span class="line">        T* <span class="keyword">operator</span>-&gt; () <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;node-&gt;element;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器加法操作</span></span><br><span class="line">        iterator&amp; <span class="keyword">operator</span>++ ()<span class="comment">//前++</span></span><br><span class="line">        &#123;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator <span class="keyword">operator</span>++ (<span class="keyword">int</span>)<span class="comment">//后++</span></span><br><span class="line">        &#123;</span><br><span class="line">            iterator old=*<span class="keyword">this</span>;</span><br><span class="line">            node=node-&gt;next;</span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//相等检验</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>!= (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node!=right.node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span>== (<span class="keyword">const</span> iterator&amp; right) <span class="keyword">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> node==right.node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(firstNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iterator</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::<span class="built_in">chain</span>()   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    firstNode=<span class="literal">NULL</span>;</span><br><span class="line">    listSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::<span class="built_in">chain</span>(<span class="keyword">const</span> chain&lt;T&gt;&amp; theList) <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    listSize=theList.listSize;</span><br><span class="line">    <span class="comment">//链表为空</span></span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        firstNode=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表不为空</span></span><br><span class="line">    chainNode&lt;T&gt;* sourceNode=theList.firstNode;</span><br><span class="line">    firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);<span class="comment">//复制theList的首元素</span></span><br><span class="line">    sourceNode=sourceNode-&gt;next;</span><br><span class="line">    chainNode&lt;T&gt;* targetNode=firstNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(sourceNode!=<span class="literal">NULL</span>) <span class="comment">//复制剩余元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        targetNode-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(sourceNode-&gt;element);</span><br><span class="line">        targetNode=targetNode-&gt;next;</span><br><span class="line">        sourceNode=sourceNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    targetNode-&gt;next=<span class="literal">NULL</span>;  <span class="comment">//尾结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">chain&lt;T&gt;::~<span class="built_in">chain</span>() <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(firstNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* nextNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> firstNode;</span><br><span class="line">        firstNode=nextNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">insert</span>(<span class="keyword">int</span> idx,<span class="keyword">const</span> T&amp; val) <span class="comment">//插入操作</span></span><br><span class="line">&#123;<span class="comment">//在链表的idx位置插入元素val</span></span><br><span class="line">    <span class="keyword">if</span>(idx==<span class="number">0</span>)<span class="comment">//在链表头插入</span></span><br><span class="line">    &#123;</span><br><span class="line">        firstNode=<span class="keyword">new</span> chainNode&lt;T&gt;(val,firstNode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;   <span class="comment">//寻找前驱</span></span><br><span class="line">        chainNode&lt;T&gt;* p=firstNode;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;idx<span class="number">-1</span>;i++)</span><br><span class="line">            p=p-&gt;next;</span><br><span class="line">        <span class="comment">//在p之后插入</span></span><br><span class="line">        p-&gt;next=<span class="keyword">new</span> chainNode&lt;T&gt;(val,p-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line">    listSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">erase</span>(<span class="keyword">const</span> T&amp; val)   <span class="comment">//删除操作</span></span><br><span class="line">&#123;<span class="comment">//删除链表中的val元素。若链表中存在多个该元素，仅删除第一个；若该元素不存在，输出-1。</span></span><br><span class="line">    chainNode&lt;T&gt;* deleteNode;   <span class="comment">//要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span>(firstNode-&gt;element==val) <span class="comment">//删除的是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        deleteNode=firstNode;</span><br><span class="line">        firstNode=firstNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//删除的不是链表的首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* previousNode=firstNode;</span><br><span class="line">        chainNode&lt;T&gt;* currentNode=firstNode-&gt;next;</span><br><span class="line">        <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            currentNode=currentNode-&gt;next;</span><br><span class="line">            previousNode=previousNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentNode==<span class="literal">NULL</span>)   <span class="comment">//链表中不存在要删除的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//链表中存在要删除的元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            deleteNode=currentNode;</span><br><span class="line">            previousNode-&gt;next=currentNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    listSize--;</span><br><span class="line">    <span class="keyword">delete</span> deleteNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">reverse</span>() <span class="comment">//原地逆置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">1</span>) <span class="comment">//链表只有一个元素</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        chainNode&lt;T&gt;* currentNode=firstNode;    <span class="comment">//当前节点</span></span><br><span class="line">        <span class="keyword">while</span>(currentNode-&gt;next)    <span class="comment">//当前节点还有后继元素</span></span><br><span class="line">        &#123;</span><br><span class="line">            chainNode&lt;T&gt;* p=currentNode-&gt;next;  <span class="comment">//储存当前节点的后继元素</span></span><br><span class="line">            currentNode-&gt;next=p-&gt;next;          <span class="comment">//将p断开</span></span><br><span class="line">            p-&gt;next=firstNode;  <span class="comment">//将第一个节点连在p的后面</span></span><br><span class="line">            firstNode=p;        <span class="comment">//设置p为第一个节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">search</span>(<span class="keyword">const</span> T&amp; val) <span class="keyword">const</span>    <span class="comment">//查询操作</span></span><br><span class="line">&#123;<span class="comment">//查询链表中的val元素，并输出其索引。若链表中存在多个该元素，仅输出第一个的索引；若不存在该元素，输出-1。</span></span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;    <span class="comment">//当前节点的索引</span></span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span> &amp;&amp; currentNode-&gt;element!=val)</span><br><span class="line">    &#123;</span><br><span class="line">        currentNode=currentNode-&gt;next;  <span class="comment">//移向下一个节点</span></span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//确定是否找到元素</span></span><br><span class="line">    <span class="keyword">if</span>(currentNode!=<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">output</span>() <span class="keyword">const</span> <span class="comment">//输出当前链表索引与元素的异或和</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>,index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(iterator i=<span class="keyword">this</span>-&gt;<span class="built_in">begin</span>();i!=<span class="keyword">this</span>-&gt;<span class="built_in">end</span>();i++)    <span class="comment">//通过迭代器遍历链表</span></span><br><span class="line">    &#123;</span><br><span class="line">        res+=index^*i;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">getMax</span>() <span class="keyword">const</span> <span class="comment">//求当前链表中元素的最大值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>) <span class="comment">//空表</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max=firstNode-&gt;element;</span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(currentNode-&gt;element&gt;max)</span><br><span class="line">            max=currentNode-&gt;element;</span><br><span class="line">        currentNode=currentNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">int</span> chain&lt;T&gt;::<span class="built_in">getMin</span>() <span class="keyword">const</span> <span class="comment">//求当前链表中元素的最小值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>) <span class="comment">//空表</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> min=firstNode-&gt;element;</span><br><span class="line">    chainNode&lt;T&gt;* currentNode=firstNode-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(currentNode!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(currentNode-&gt;element&lt;min)</span><br><span class="line">            min=currentNode-&gt;element;</span><br><span class="line">        currentNode=currentNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">binSort</span>(<span class="keyword">int</span> max,<span class="keyword">int</span> min) <span class="comment">//箱子排序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//空表</span></span><br><span class="line">    <span class="keyword">if</span>(listSize==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不是空表</span></span><br><span class="line">    <span class="keyword">int</span> range=<span class="number">0</span>,offset=<span class="number">0</span>; <span class="comment">//范围和偏移量</span></span><br><span class="line">    <span class="keyword">if</span>(min&gt;=<span class="number">0</span>)      <span class="comment">//链表所有元素均为非负整数</span></span><br><span class="line">    &#123;</span><br><span class="line">        range=max;</span><br><span class="line">        offset=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(max&lt;=<span class="number">0</span>) <span class="comment">//链表所有元素均为非正整数</span></span><br><span class="line">    &#123;</span><br><span class="line">        range=-min;</span><br><span class="line">        offset=-min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>            <span class="comment">//链表元素有正有负</span></span><br><span class="line">    &#123;</span><br><span class="line">        range=max-min;</span><br><span class="line">        offset=-min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建并初始化箱子</span></span><br><span class="line">    chainNode&lt;T&gt; **bottom,**top;</span><br><span class="line">    bottom=<span class="keyword">new</span> chainNode&lt;T&gt;* [range+<span class="number">1</span>];</span><br><span class="line">    top=<span class="keyword">new</span> chainNode&lt;T&gt;* [range+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=range;i++)   <span class="comment">//初始化为空</span></span><br><span class="line">        bottom[i]=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把链表的节点分配到箱子</span></span><br><span class="line">    <span class="keyword">for</span>(;firstNode!=<span class="literal">NULL</span>;firstNode=firstNode-&gt;next)</span><br><span class="line">    &#123;<span class="comment">//把首节点firstNode加到箱子中</span></span><br><span class="line">        <span class="keyword">int</span> theBin=firstNode-&gt;element;</span><br><span class="line">        <span class="keyword">if</span>(bottom[theBin+offset]==<span class="literal">NULL</span>) <span class="comment">//箱子为空</span></span><br><span class="line">            bottom[theBin+offset]=top[theBin+offset]=firstNode;</span><br><span class="line">        <span class="keyword">else</span>    <span class="comment">//箱子不为空</span></span><br><span class="line">        &#123;</span><br><span class="line">            top[theBin+offset]-&gt;next=firstNode;</span><br><span class="line">            top[theBin+offset]=firstNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把箱子中的节点收集到有序链表</span></span><br><span class="line">    chainNode&lt;T&gt; *y=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> theBin=<span class="number">0</span>;theBin&lt;=range;theBin++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bottom[theBin]!=<span class="literal">NULL</span>) <span class="comment">//箱子不空</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==<span class="literal">NULL</span>) <span class="comment">//收集的是第一个非空箱子</span></span><br><span class="line">                firstNode=bottom[theBin];</span><br><span class="line">            <span class="keyword">else</span>        <span class="comment">//收集的不是第一个非空箱子</span></span><br><span class="line">                y-&gt;next=bottom[theBin];</span><br><span class="line">            y=top[theBin];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y!=<span class="literal">NULL</span>) <span class="comment">//处理尾结点</span></span><br><span class="line">        y-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> [] bottom;</span><br><span class="line">    <span class="keyword">delete</span> [] top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> chain&lt;T&gt;::<span class="built_in">merge</span>(<span class="keyword">const</span> chain&lt;T&gt; &amp;a, <span class="keyword">const</span> chain&lt;T&gt; &amp;b) <span class="comment">//将链表a,b归并到当前链表中</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    iterator ia=a.<span class="built_in">begin</span>(),ib=b.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span>(ia!=a.<span class="built_in">end</span>() &amp;&amp; ib!=b.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*ia&lt;*ib) <span class="comment">//将*ia并入</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">insert</span>(index++,*ia);</span><br><span class="line">            ia++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>        <span class="comment">//将*ib并入</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">insert</span>(index++,*ib);</span><br><span class="line">            ib++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对a或b中剩余元素进行归并</span></span><br><span class="line">    <span class="keyword">while</span>(ia!=a.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(index++,*ia);</span><br><span class="line">        ia++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ib!=b.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">insert</span>(index++,*ib);</span><br><span class="line">        ib++;</span><br><span class="line">    &#125;</span><br><span class="line">    listSize=a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;            <span class="comment">//两个整数</span></span><br><span class="line">    <span class="keyword">int</span> value;          <span class="comment">//读取初始链表的各个元素值</span></span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    chain&lt;<span class="keyword">int</span>&gt; A,B,C;       <span class="comment">//创建对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)    <span class="comment">//将数据插入链表A</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;value;</span><br><span class="line">        A.<span class="built_in">insert</span>(i,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)    <span class="comment">//将数据插入链表B</span></span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;value;</span><br><span class="line">        B.<span class="built_in">insert</span>(i,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A.<span class="built_in">binSort</span>(A.<span class="built_in">getMax</span>(),A.<span class="built_in">getMin</span>());</span><br><span class="line">    B.<span class="built_in">binSort</span>(B.<span class="built_in">getMax</span>(),B.<span class="built_in">getMin</span>());</span><br><span class="line"></span><br><span class="line">    C.<span class="built_in">merge</span>(A,B);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;A.<span class="built_in">output</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;B.<span class="built_in">output</span>()&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;C.<span class="built_in">output</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><p>1.一般情况的箱子排序只需要参数range，条件是链表中的元素值均为非负整数，而题目中链表元素值包括负数，因此需要根据链表中的最大值和最小值确定range和offset。<br>2.由箱子排序衍生出基数排序，所谓基数排序，是把数按照某种基数r分解为数字，然后对数字排序。例如，用基数10把十进制数928分解为9、2、8。利用箱子排序方法，从最低位开始依次到最高位，根据当前位的数字对数据进行排序。基数排序和箱子排序时间复杂度虽然相同，但使用基数排序极大地减少了程序的执行步数。单个的箱子排序实际上相当于r=1000的基数排序。基数排序的基数不同，总的执行步数也不同，根据实际数据确定基数减少执行步数。<br>3.箱子排序和基数排序都是稳定的。<br>4.箱子排序还有类外函数的实现方法，但执行了很多new和delete操作将节点从一个位置移动到另一个位置，虽然时间复杂度与成员函数相同，但效率比较低。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;本文通过两个具体的题目实现线性表的链式描述，并为链表类封装了前向迭代器，链表类的方法包括插入、删除、原地逆置、查询、输出异或和、箱子排序、二路归并。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（三）数组描述线性表</title>
    <link href="https://tongyiheng.github.io/2020/10/04/DSA/DSA_3/"/>
    <id>https://tongyiheng.github.io/2020/10/04/DSA/DSA_3/</id>
    <published>2020-10-04T09:42:23.000Z</published>
    <updated>2021-04-10T01:01:20.403Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;经过前面两次基础知识的铺垫之后，我们正式进入数据结构部分。本文通过通讯录的实现来分析线性表的数组描述。</p><span id="more"></span><h2 id="P1004-通讯录"><a href="#P1004-通讯录" class="headerlink" title="P1004:通讯录"></a>P1004:通讯录</h2><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.不要使用STL（可以使用string类）。<br>2.封装线性表类，提供插入，删除，查找等操作。<br>3.线性表实现使用数组描述方法（顺序存储结构）。</p><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>&emsp;&emsp;设通讯录中每一个联系人的内容有：姓名、电话号码、班级宿舍。由标准输入读入联系人信息，使用线性表中操作实现通讯录管理功能，包括：插入、删除、编辑、查找（按姓名查找）；键盘输入一班级，输出通讯录中该班级中所有人的信息。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>&emsp;&emsp;每个操作的第一个数为操作数(插入：0，删除：1，编辑：2，查找：3，输出一个班所有人员信息：4)，具体格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> 姓名 电话 班级 宿舍 <span class="comment">//插入一条记录</span></span><br><span class="line"><span class="number">1</span> 姓名 <span class="comment">//根据姓名删除一条记录</span></span><br><span class="line"><span class="number">2</span> 姓名 编辑项目 项目新值 <span class="comment">//根据姓名编辑一条记录(编辑项目为1到3的整数，1代表编辑电话，2代表编辑班级，3代表编辑宿舍)</span></span><br><span class="line"><span class="number">3</span> 姓名 <span class="comment">//根据姓名查找，找到输出1，未找到输出0</span></span><br><span class="line"><span class="number">4</span> 班级 <span class="comment">//输出该班级的所有成员的宿舍号的异或值</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中查找操作当找到相应的人时输出1，未找到输出0。输出一个班级的人员信息时输出所有成员的宿舍号的异或值。输入数据保证合法。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>&emsp;&emsp;第一行一个n(1&lt;=n&lt;=20000), 代表接下来操作的数目。接下来n行代表各项操作。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>&emsp;&emsp;当遇到查找和输出一个班所有人员信息操作时输出。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>点击右上角可直接复制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">0</span> Evan <span class="number">57298577609</span> <span class="number">1</span> <span class="number">65</span></span><br><span class="line"><span class="number">0</span> WINNIE <span class="number">37367348390</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> Evan</span><br><span class="line"><span class="number">4</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> WINNIE</span><br><span class="line"><span class="number">1</span> Evan</span><br><span class="line"><span class="number">4</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> WINNIE</span><br><span class="line"><span class="number">3</span> MARYAM</span><br><span class="line"><span class="number">3</span> CAMERON</span><br><span class="line"><span class="number">3</span> TZIVIA</span><br><span class="line"><span class="number">0</span> OMAR <span class="number">16447001130</span> <span class="number">6</span> <span class="number">55</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> JADEN</span><br><span class="line"><span class="number">3</span> ELIZABETH</span><br><span class="line"><span class="number">2</span> OMAR <span class="number">1</span> <span class="number">79409905568</span></span><br><span class="line"><span class="number">3</span> JOSHUA</span><br><span class="line"><span class="number">2</span> OMAR <span class="number">1</span> <span class="number">8978214817</span></span><br><span class="line"><span class="number">1</span> OMAR</span><br><span class="line"><span class="number">3</span> Azaan</span><br><span class="line"><span class="number">3</span> MARIA</span><br><span class="line"><span class="number">0</span> HANNAH <span class="number">94060479192</span> <span class="number">5</span> <span class="number">98</span></span><br><span class="line"><span class="number">3</span> HEIDY</span><br><span class="line"><span class="number">1</span> HANNAH</span><br><span class="line"><span class="number">0</span> Axel <span class="number">92066832927</span> <span class="number">3</span> <span class="number">70</span></span><br><span class="line"><span class="number">1</span> Axel</span><br><span class="line"><span class="number">3</span> TIFFANY</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p>1s</p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;定义结构体contact，包含姓名、电话号码、班级、宿舍信息。线性表中的每一个元素都是一个结构体，通过结构体可以访问具体的个人信息。<br>&emsp;&emsp;使用顺序存储结构，封装线性表类AddressList，私有成员包括联系人个数contactSize，一维数组的容量listLength，存储联系人的一维数组element。公有成员包括构造函数，复制构造函数，析构函数，以及具体的方法，包括插入一条信息，根据姓名删除一条记录，根据姓名编辑电话，根据姓名编辑班级或宿舍（与根据姓名编辑电话函数形成重载），根据姓名查找，输出班级所有成员宿舍号的异或值。<br>&emsp;&emsp;读入数据时，按行读入，首先读入操作数instruction，根据操作数利用switch分支进行分类，再根据所属操作类别读入对应的数据，调用对应的成员函数，输出数据。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">contact</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    string name;             <span class="comment">//姓名</span></span><br><span class="line">    string telephoneNumber;  <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">int</span> classNumber;         <span class="comment">//班级</span></span><br><span class="line">    <span class="keyword">int</span> dormitoryNumber;     <span class="comment">//宿舍</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddressList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> contactSize;         <span class="comment">//联系人的个数</span></span><br><span class="line">    <span class="keyword">int</span> listLength;          <span class="comment">//一维数组的容量</span></span><br><span class="line">    contact* element;        <span class="comment">//存储联系人的一维数组</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">AddressList</span>(<span class="keyword">int</span> initialCapacity=<span class="number">10</span>);    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">AddressList</span>(<span class="keyword">const</span> AddressList&amp; s);      <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">AddressList</span>();   <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(string name, string telephoneNumber, <span class="keyword">int</span> classNumber, <span class="keyword">int</span> dormitoryNumber)</span></span>; <span class="comment">//插入一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eraser</span><span class="params">(string name)</span></span>;  <span class="comment">//根据姓名删除一条记录</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(string name, <span class="keyword">int</span> num, string telephoneNumber)</span></span>;      <span class="comment">//根据姓名编辑电话</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(string name, <span class="keyword">int</span> num, <span class="keyword">int</span> Number)</span></span>;                  <span class="comment">//根据姓名编辑班级或宿舍</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(string name)</span></span>;  <span class="comment">//根据姓名查找</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outputClass</span><span class="params">(<span class="keyword">int</span> classNumber)</span></span>;   <span class="comment">//输出班级所有成员宿舍号的异或值</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AddressList::<span class="built_in">AddressList</span>(<span class="keyword">int</span> initialCapacity)   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(initialCapacity&lt;<span class="number">1</span>) <span class="comment">//初始容量小于1，抛出异常</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;InitialCapacity must be positive.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    listLength=initialCapacity;</span><br><span class="line">    element=<span class="keyword">new</span> contact[listLength];</span><br><span class="line">    contactSize=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddressList::<span class="built_in">AddressList</span>(<span class="keyword">const</span> AddressList&amp; s)  <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    listLength=s.listLength;</span><br><span class="line">    contactSize=s.contactSize;</span><br><span class="line">    element=<span class="keyword">new</span> contact[listLength];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">        element[i]=s.element[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AddressList::~<span class="built_in">AddressList</span>() <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> []element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddressList::insert</span><span class="params">(string name, string telephoneNumber, <span class="keyword">int</span> classNumber, <span class="keyword">int</span> dormitoryNumber)</span> <span class="comment">//插入一条记录</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(contactSize==listLength) <span class="comment">//数组已满，容量扩大两倍</span></span><br><span class="line">    &#123;</span><br><span class="line">        contact* Nelement=<span class="keyword">new</span> contact[listLength*<span class="number">2</span>];</span><br><span class="line">        listLength=listLength*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Nelement[i]=element[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> []element;</span><br><span class="line">        element=Nelement;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在线性表末端(下标为contactSize处)插入一条记录</span></span><br><span class="line">    element[contactSize].name=name;</span><br><span class="line">    element[contactSize].telephoneNumber=telephoneNumber;</span><br><span class="line">    element[contactSize].classNumber=classNumber;</span><br><span class="line">    element[contactSize].dormitoryNumber=dormitoryNumber;</span><br><span class="line"></span><br><span class="line">    contactSize++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddressList::eraser</span><span class="params">(string name)</span>  <span class="comment">//根据姓名删除一条记录</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>; <span class="comment">//姓名对应的索引</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(element[i].name==name)</span><br><span class="line">            index=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index+<span class="number">1</span>;i&lt;contactSize;i++)    <span class="comment">//向左移动元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        element[i<span class="number">-1</span>]=element[i];</span><br><span class="line">    &#125;</span><br><span class="line">    element[--contactSize].~<span class="built_in">contact</span>();  <span class="comment">//联系人个数-1,析构无效元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddressList::edit</span><span class="params">(string name, <span class="keyword">int</span> num, string telephoneNumber)</span>   <span class="comment">//根据姓名编辑电话</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(element[i].name==name)</span><br><span class="line">        &#123;</span><br><span class="line">            element[i].telephoneNumber=telephoneNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddressList::edit</span><span class="params">(string name, <span class="keyword">int</span> num, <span class="keyword">int</span> Number)</span>    <span class="comment">//根据姓名编辑班级或宿舍</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">2</span>)  <span class="comment">//编辑班级</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(element[i].name==name)</span><br><span class="line">            &#123;</span><br><span class="line">                element[i].classNumber=Number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//编辑宿舍</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(element[i].name==name)</span><br><span class="line">            &#123;</span><br><span class="line">                element[i].dormitoryNumber=Number;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddressList::search</span><span class="params">(string name)</span> <span class="comment">//根据姓名查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(element[i].name==name)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddressList::outputClass</span><span class="params">(<span class="keyword">int</span> classNumber)</span> <span class="comment">//输出班级所有成员宿舍号的异或值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;contactSize;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(element[i].classNumber==classNumber)</span><br><span class="line">        &#123;</span><br><span class="line">            res^=element[i].dormitoryNumber;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="comment">//操作数目</span></span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="function">AddressList <span class="title">Contact</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//创建联系人对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> instruction; <span class="comment">//指令编号</span></span><br><span class="line">    string iName,iTelephone; <span class="comment">//读入的姓名、电话信息</span></span><br><span class="line">    <span class="keyword">int</span> iClass,iDormitory;   <span class="comment">//读入的班级、宿舍信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;instruction;</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(instruction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//插入一条记录</span></span><br><span class="line">                cin&gt;&gt;iName&gt;&gt;iTelephone&gt;&gt;iClass&gt;&gt;iDormitory;</span><br><span class="line">                Contact.<span class="built_in">insert</span>(iName,iTelephone,iClass,iDormitory);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//删除一条记录</span></span><br><span class="line">                cin&gt;&gt;iName;</span><br><span class="line">                Contact.<span class="built_in">eraser</span>(iName);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//根据姓名编辑一条记录</span></span><br><span class="line">                <span class="keyword">int</span> editNum;</span><br><span class="line">                cin&gt;&gt;iName&gt;&gt;editNum;</span><br><span class="line">                <span class="keyword">if</span>(editNum==<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin&gt;&gt;iTelephone;</span><br><span class="line">                    Contact.<span class="built_in">edit</span>(iName,editNum,iTelephone);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (editNum==<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    cin&gt;&gt;iClass;</span><br><span class="line">                    Contact.<span class="built_in">edit</span>(iName,editNum,iClass);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    cin&gt;&gt;iDormitory;</span><br><span class="line">                    Contact.<span class="built_in">edit</span>(iName,editNum,iDormitory);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">//根据姓名查找</span></span><br><span class="line">                cin&gt;&gt;iName;</span><br><span class="line">                cout&lt;&lt;Contact.<span class="built_in">search</span>(iName)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">//输出班级所有成员宿舍号的异或</span></span><br><span class="line">                cin&gt;&gt;iClass;</span><br><span class="line">                cout&lt;&lt;Contact.<span class="built_in">outputClass</span>(iClass)&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>&emsp;&emsp;第一次提交时7个节点通过，3个节点RE，一直找不到错误，然后仔细读代码(大概也就读了十几遍的样子)，发现在成员函数insert中，新数组动态申请时使用listLength*2表示新数组的元素个数，之后忘了对listLength扩大两倍（我真是个憨憨），修改后提交通过。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;经过前面两次基础知识的铺垫之后，我们正式进入数据结构部分。本文通过通讯录的实现来分析线性表的数组描述。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="线性表" scheme="https://tongyiheng.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（二）排序</title>
    <link href="https://tongyiheng.github.io/2020/10/02/DSA/DSA_2/"/>
    <id>https://tongyiheng.github.io/2020/10/02/DSA/DSA_2/</id>
    <published>2020-10-02T12:52:15.000Z</published>
    <updated>2021-04-10T01:01:23.768Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;本文讲述四种简单排序算法，名次排序、及时终止的选择排序、及时终止的冒泡排序、插入排序。</p><span id="more"></span><h2 id="P1003-排序算法"><a href="#P1003-排序算法" class="headerlink" title="P1003:排序算法"></a>P1003:排序算法</h2><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_2/2_1.png" alt="2_1"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_2/2_2.png" alt="2_2"></p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;定义排序类，私有成员包括指向动态数组的指针和数组的大小，公有成员包括构造函数，复制构造函数，析构函数，名次排序，及时终止的选择排序，及时终止的冒泡排序，插入排序，输入、输出函数。<br>&emsp;&emsp;名次排序需要计算出元素在序列的名次，即所有比它小的元素个数加上左侧出现的大小相同的元素个数，然后根据元素的名次进行排序，可以使用附加数组，也可以原地重排。<br>&emsp;&emsp;及时终止的选择排序是每次从无序段中找出最大元素，然后和无序段的末端元素进行交换，继续进行下一次排序。在寻找最大元素的过程中，如果判断出无序段已经有序，即每个元素均小于等于后面的元素，排序及时终止。<br>&emsp;&emsp;及时终止的冒泡排序是比较两个相邻元素的大小，将较大的元素交换至后面，每次冒泡过程可将序列中最大的元素调整到末端。如果在冒泡过程中判断出未进行交换，即任意相邻的两个元素均满足前面的元素小于后面的元素，排序及时终止。<br>&emsp;&emsp;插入排序是从序列中的第2个元素开始到第n个元素，每个元素依次作为被插入元素，在前n-1个元素构成的有序段中按照元素大小寻找合适位置进行插入。在寻找插入位置时，通过从后向前寻找，如果当前位置的元素大于被插入元素，当前位置元素后移一个位置，如果当前位置的元素小于等于被插入元素，则将被插入元素插入到当前元素的后一个位置。如果从前向后寻找插入位置，需要额外声明变量存储数据。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SORT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T* pArray;  <span class="comment">//保存动态数组</span></span><br><span class="line">    <span class="keyword">int</span> size;   <span class="comment">//数组大小</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SORT</span>(<span class="keyword">int</span> s); <span class="comment">//构造函数</span></span><br><span class="line">    <span class="built_in">SORT</span>(<span class="keyword">const</span> SORT&lt;T&gt;&amp; S); <span class="comment">//复制构造函数</span></span><br><span class="line">    ~<span class="built_in">SORT</span>();                <span class="comment">//析构函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rank_sort</span><span class="params">()</span></span>;       <span class="comment">//名次排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">()</span></span>;  <span class="comment">//及时终止的选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">()</span></span>;     <span class="comment">//及时终止的冒泡排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">()</span></span>;     <span class="comment">//插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>;           <span class="comment">//输入</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>;          <span class="comment">//输出</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">SORT&lt;T&gt;::<span class="built_in">SORT</span>(<span class="keyword">int</span> s) <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    size=s;</span><br><span class="line">    pArray=<span class="keyword">new</span> T[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">SORT&lt;T&gt;::<span class="built_in">SORT</span>(<span class="keyword">const</span> SORT&lt;T&gt;&amp; S) <span class="comment">//复制构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    size=S.size;</span><br><span class="line">    pArray=<span class="keyword">new</span> T[size];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pArray[i]=S.pArray[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">SORT&lt;T&gt;::~<span class="built_in">SORT</span>()    <span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> []pArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">rank_sort</span>()<span class="comment">//附加数组的名次排序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//计算名次</span></span><br><span class="line">    <span class="keyword">int</span> order[size];    <span class="comment">//保存名次的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++) <span class="comment">//初始化</span></span><br><span class="line">        order[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;size;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(pArray[j]&lt;=pArray[i]) order[i]++;</span><br><span class="line">            <span class="keyword">else</span> order[j]++;</span><br><span class="line"></span><br><span class="line">    T* temp=<span class="keyword">new</span> T[size];  <span class="comment">//附加数组 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++) <span class="comment">//按照名次排序</span></span><br><span class="line">        temp[order[i]]=pArray[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++) <span class="comment">//复制</span></span><br><span class="line">        pArray[i]=temp[i];</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">delete</span> []temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">selection_sort</span>()  <span class="comment">//及时终止的选择排序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bool</span> sorted=<span class="literal">false</span>;  <span class="comment">//判断是否有序 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos=size;!sorted &amp;&amp; (pos&gt;<span class="number">1</span>);pos--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> indexOfMax=<span class="number">0</span>;</span><br><span class="line">        sorted=<span class="literal">true</span>;    <span class="comment">//每次初始化为有序</span></span><br><span class="line">        <span class="comment">//查找最大元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pos;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pArray[indexOfMax]&lt;=pArray[i])</span><br><span class="line">                indexOfMax=i;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                sorted=<span class="literal">false</span>;   <span class="comment">//无序</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(pArray[indexOfMax],pArray[pos<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">bubble_sort</span>() <span class="comment">//及时终止的冒泡排序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">bool</span> sorted=<span class="literal">false</span>;  <span class="comment">//判断是否有序 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>&amp;&amp;!sorted;i++)<span class="comment">//size个数最多进行(size-1)次冒泡 </span></span><br><span class="line">  &#123;</span><br><span class="line">        sorted=<span class="literal">true</span>;    <span class="comment">//每次初始化为有序 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>-i;j++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">if</span>(pArray[j+<span class="number">1</span>]&lt;pArray[j]) </span><br><span class="line">      &#123;</span><br><span class="line">                <span class="built_in">swap</span>(pArray[j],pArray[j+<span class="number">1</span>]);</span><br><span class="line">                sorted = <span class="literal">false</span>;  <span class="comment">//发生了交换,仍处于无序状态 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">insert_sort</span>() <span class="comment">//插入排序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        T t=pArray[i];  <span class="comment">//待插入的元素</span></span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span> &amp;&amp; t&lt;pArray[j];j--)  <span class="comment">//寻找插入位置</span></span><br><span class="line">            pArray[j+<span class="number">1</span>]=pArray[j];</span><br><span class="line">        pArray[j+<span class="number">1</span>]=t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">input</span>()  <span class="comment">//输入</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        cin&gt;&gt;pArray[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">output</span>()  <span class="comment">//输出</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">        cout&lt;&lt;pArray[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="function">SORT&lt;<span class="keyword">int</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;  <span class="comment">//创建对象 </span></span><br><span class="line">    s.<span class="built_in">input</span>(); </span><br><span class="line">    s.<span class="built_in">bubble_sort</span>();</span><br><span class="line">    s.<span class="built_in">output</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>（1）名次排序、冒泡排序、插入排序是稳定的，选择排序是不稳定的。<br>e.g. 给序列3，1，1排序，首先找出最大元素3，和末端的1交换，序列变为1，1，3，满足及时终止的条件，排序结束，两个1的相对位置发生了变化。<br>（2）在使用for循环进行次数控制时，要注意边界，防止出现数组越界或者排序次数不够的情况。<br>（3）名次排序、冒泡排序、插入排序、选择排序的时间复杂度都是O(n^2)。<br>（4）对于名次排序，采用附加数组和原地重排两种方式进行比较，原地重排的最坏执行时间增加了，但是内存占用减少了，用时间换空间。</p><h3 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript"></a>Postscript</h3><p>1.排序的稳定性：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。<br>2.排序算法是否为稳定的是由具体算法决定的，不稳定的算法在某种条件下可以变为稳定的算法，而稳定的算法在某种条件下也可以变为不稳定的算法。例如若将上面的冒泡排序中相邻量元素交换的判定条件改为pArray[j+1]&lt;=pArray[j],则两个相等的元素就会交换位置，从而变成不稳定的排序算法。<br>3.上面的代码只给出了采用附加数组的名次排序，这里给出原地重排的代码实现。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> SORT&lt;T&gt;::<span class="built_in">rank_sort</span>()<span class="comment">//原地重排数组使之有序</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//计算名次</span></span><br><span class="line">    <span class="keyword">int</span> order[size];    <span class="comment">//保存名次的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++) <span class="comment">//初始化</span></span><br><span class="line">        order[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;size;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(pArray[j]&lt;=pArray[i]) order[i]++;</span><br><span class="line">            <span class="keyword">else</span> order[j]++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//原地重排</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把正确的元素移到pArray[i]</span></span><br><span class="line">        <span class="keyword">while</span>(order[i]!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=order[i];</span><br><span class="line">            <span class="built_in">swap</span>(pArray[i],pArray[t]);</span><br><span class="line">            <span class="built_in">swap</span>(order[i],order[t]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;本文讲述四种简单排序算法，名次排序、及时终止的选择排序、及时终止的冒泡排序、插入排序。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="简单算法" scheme="https://tongyiheng.github.io/tags/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://tongyiheng.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>DSA：（一）递归</title>
    <link href="https://tongyiheng.github.io/2020/10/02/DSA/DSA_1/"/>
    <id>https://tongyiheng.github.io/2020/10/02/DSA/DSA_1/</id>
    <published>2020-10-02T10:00:00.000Z</published>
    <updated>2021-04-10T01:01:29.146Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;递归的核心部分在于找到目标问题的递归部分和基础部分，本文通过求子集和全排列这两个问题来具体分析递归思想的运用。</p><span id="more"></span><h2 id="P1001-子集价值"><a href="#P1001-子集价值" class="headerlink" title="P1001:子集价值"></a>P1001:子集价值</h2><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_1/1_1.png" alt="1_1"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_1/1_2.png" alt="1_2"></p><h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;问题包括两个子问题，求子集和序列价值。<br>&emsp;&emsp;求子集：利用标记数组通过0、1标记对应元素是否在子集中，递归部分为从第一个元素开始依次标记，每个元素位置上的标记包括0和1两种情况，通过递归遍历2^n个子集，基础部分为最后一个元素被标记，子集中的元素全部确定。<br>&emsp;&emsp;求序列价值：当子集中的元素确定时，按照标记数组得到子集数组，若标记位为1，子集数组对应元素设置为原数，同时记录子集长度。然后通过子集数组名和子集长度调用价值函数，求出子集价值，返回至上一层。</p><h3 id="C-实现代码"><a href="#C-实现代码" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">(T* p,<span class="keyword">int</span> cnt)</span><span class="comment">//求序列的价值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    T sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=(i+<span class="number">1</span>)*p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">subset</span><span class="params">(T* p,<span class="keyword">int</span>* mark,<span class="keyword">int</span> pos,<span class="keyword">int</span> cnt)</span><span class="comment">//求子集价值的异或和</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>,res1=<span class="number">0</span>,res2=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基础部分</span></span><br><span class="line">    <span class="keyword">if</span>(pos==cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> curr[cnt];<span class="comment">//当前的子集</span></span><br><span class="line">        <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mark[i]==<span class="number">1</span>)<span class="comment">//mark标记位为1，取该元素</span></span><br><span class="line">                curr[size++]=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        res=<span class="built_in">value</span>(curr,size);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归部分</span></span><br><span class="line">    mark[pos]=<span class="number">0</span>;</span><br><span class="line">    res1=<span class="built_in">subset</span>(p,mark,pos+<span class="number">1</span>,cnt);</span><br><span class="line">    mark[pos]=<span class="number">1</span>;</span><br><span class="line">    res2=<span class="built_in">subset</span>(p,mark,pos+<span class="number">1</span>,cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res1^res2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,result=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> input[n],flag[n];</span><br><span class="line">    <span class="comment">//输入n个非负整数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;input[i];</span><br><span class="line">    &#125;</span><br><span class="line">    result=<span class="built_in">subset</span>(input,flag,<span class="number">0</span>,n);</span><br><span class="line">    cout&lt;&lt;result;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><p>&emsp;&emsp;在求n个元素的所有子集价值的异或和的问题中，分析递归调用时res1和res2的意义，res1表示在当前位置的元素标记为0和之前位置元素的标记的约束下，满足约束条件的所有子集价值的异或和，res2表示在当前位置的元素标记为1和之前位置元素的标记的约束下，满足约束条件的所有子集价值的异或和。例如，对于{1,2}这个集合，递归的执行步骤如下：</p><ul><li><p>设置元素1标记位mark[0]=0</p></li><li><p>调用subset</p><ul><li>设置元素2标记位mark[1]=0</li><li>调用subset，res1接收返回值</li></ul></li><li><p>满足pos==cnt条件，进入基础部分，计算子集价值后返回res</p><ul><li>设置元素2标记位mark[1]=1</li><li>调用subset，res2接收返回值</li></ul></li><li><p>满足pos==cnt条件，进入基础部分，计算子集价值后返回res</p><ul><li>返回res1^res2</li></ul></li><li><p>res1接收返回值，即两个子集价值的异或和</p></li><li><p>设置元素1标记位mark[0]=1</p></li><li><p>调用subset</p><ul><li>设置元素2标记位mark[1]=0</li><li>调用subset，res1接收返回值</li></ul></li><li><p>满足pos==cnt条件，进入基础部分，计算子集价值后返回res</p><ul><li>设置元素2标记位mark[1]=1</li><li>调用subset，res2接收返回值</li></ul></li><li><p>满足pos==cnt条件，进入基础部分，计算子集价值后返回res</p><ul><li>返回res1^res2</li></ul></li><li><p>res2接收返回值，即两个子集价值的异或和</p></li><li><p>返回res1^res2，即4个子集价值的异或和</p></li></ul><p>&emsp;&emsp;如果子集函数subset的返回类型设计为void，则需要定义一个全局变量或者在子集函数内部定义一个静态局部变量res来存储子集价值的异或和，每次求出一个子集价值后与res进行异或运算，最后在主函数中直接输出res的结果即可。但是需要注意，在C++中要尽可能少的使用全局变量，所以子集函数的返回类型设计为int更好，通过每一次的值返回可以对递归过程有更深刻的认识。</p><h2 id="P1002-全排列问题"><a href="#P1002-全排列问题" class="headerlink" title="P1002:全排列问题"></a>P1002:全排列问题</h2><p><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_1/1_3.png" alt="1_3"><br><img src="https://raw.githubusercontent.com/TongYiheng/MarkdownPictures/main/DSA/DSA_1/1_4.png" alt="1_4"></p><h3 id="算法描述-1"><a href="#算法描述-1" class="headerlink" title="算法描述"></a>算法描述</h3><p>&emsp;&emsp;问题包括两个子问题，求全排列和序列价值。<br>&emsp;&emsp;求全排列：将待求排列的数组分为前缀和后缀，递归部分为通过循环依次将后缀中的每个元素与后缀中的第一个元素交换作为前缀，求剩余后缀的排列，然后复原到交换前的状态。基础部分为后缀仅有一个元素，此时得到一个确定的排列。<br>&emsp;&emsp;求序列价值：当后缀部分仅有一个元素时，此时的排列确定，通过数组名和数组长度调用价值函数，求出子集价值，返回至上一层。</p><h3 id="C-实现代码-1"><a href="#C-实现代码-1" class="headerlink" title="C++实现代码"></a>C++实现代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">(T *p,<span class="keyword">int</span> cnt)</span> <span class="comment">//求序列价值</span></span></span><br><span class="line"><span class="function"></span>&#123;   T sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=p[i]^(i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">permutations</span><span class="params">(T* list,<span class="keyword">int</span> k,<span class="keyword">int</span> m,<span class="keyword">int</span> cnt)</span> <span class="comment">//求所有排列价值的或</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//基础部分</span></span><br><span class="line">    <span class="keyword">if</span>(k==m)   <span class="comment">//仅有一个排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="built_in">value</span>(list,cnt);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归部分</span></span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//有多于一个的排列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(list[k],list[i]); <span class="comment">//交换</span></span><br><span class="line">            res|=<span class="built_in">permutations</span>(list,k+<span class="number">1</span>,m,cnt);</span><br><span class="line">            <span class="built_in">swap</span>(list[k],list[i]); <span class="comment">//复原</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,result=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> input[n];</span><br><span class="line">    <span class="comment">//输入n个非负整数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;input[i];</span><br><span class="line">    &#125;</span><br><span class="line">    result=<span class="built_in">permutations</span>(input,<span class="number">0</span>,n<span class="number">-1</span>,n);</span><br><span class="line">    cout&lt;&lt;result;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果分析-1"><a href="#结果分析-1" class="headerlink" title="结果分析"></a>结果分析</h3><p>&emsp;&emsp;在求全排列的过程中，递归部分需要注意在进行后缀的每个元素与后缀的第一个元素的交换后，一定要进行复原。res的意义是在已有前缀的约束下，对后缀进行所有排列的价值的或。<br>&emsp;&emsp;这里求全排列的函数permutations的返回类型也可以设计为void,只不过需要定义一个全局变量res，每次求出排列的价值后与res进行或运算,最后在主函数输出res的结果。这样思路上更简单，但是能不用全局变量最好还是不用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;emsp;&amp;emsp;递归的核心部分在于找到目标问题的递归部分和基础部分，本文通过求子集和全排列这两个问题来具体分析递归思想的运用。&lt;/p&gt;</summary>
    
    
    
    <category term="Data Structures,Algorithms,and Applications" scheme="https://tongyiheng.github.io/categories/Data-Structures-Algorithms-and-Applications/"/>
    
    
    <category term="C++" scheme="https://tongyiheng.github.io/tags/C/"/>
    
    <category term="递归" scheme="https://tongyiheng.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="简单算法" scheme="https://tongyiheng.github.io/tags/%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tongyiheng.github.io/2020/10/02/Hello%20World/hello-world/"/>
    <id>https://tongyiheng.github.io/2020/10/02/Hello%20World/hello-world/</id>
    <published>2020-10-02T03:05:00.000Z</published>
    <updated>2021-04-06T11:49:30.271Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="Hello world" scheme="https://tongyiheng.github.io/categories/Hello-world/"/>
    
    
  </entry>
  
</feed>
